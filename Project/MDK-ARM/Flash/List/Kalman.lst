L 1 "..\..\MySrc\Kalman.cpp"
N#include "Kalman.h"
L 1 "..\..\MySrc\Kalman.h" 1
N#ifndef _Kalman_H_
N#define _Kalman_H_
N#ifdef __cplusplus
N extern "C" {
N#endif
N//1维的卡尔曼滤波
Ntypedef struct {
N    float x;  // 系统的状态量
N    float A;  // x(n)=A*x(n-1)+u(n),u(n)~N(0,q)
N    float H;  // z(n)=H*x(n)+w(n),w(n)~N(0,r)
N    float q;  // 预测过程噪声协方差
N    float r;  // 测量过程噪声协方差
N    float p;  // 估计误差协方差
N    float gain;//卡尔曼增益
N}kalman_struct;
Nvoid kalman_init(kalman_struct *kalman_lcw, float init_x, float init_p,float predict_q,float measure_q);
Nfloat kalman_filter(kalman_struct *kalman_lcw, float measure);
N
N#ifdef __cplusplus
N}
N#endif
N
N#endif
L 2 "..\..\MySrc\Kalman.cpp" 2
N
N/**
N *kalman_init - 卡尔曼滤波器初始化
N *@kalman_lcw：卡尔曼滤波器结构体
N *@init_x：待测量的初始值
N *@init_p：后验状态估计值误差的方差的初始值
N */
Nvoid kalman_init(kalman_struct *kalman_lcw, float init_x, float init_p,float predict_q,float measure_q)
N{
N    kalman_lcw->x = init_x;//待测量的初始值，如有中值一般设成中值
N    kalman_lcw->p = init_p;//后验状态估计值误差的方差的初始值
N    kalman_lcw->A = 1;
N    kalman_lcw->H = 1;
N    kalman_lcw->q = predict_q;//预测（过程）噪声方差 实验发现修改这个值会影响收敛速率
N    kalman_lcw->r = measure_q;//测量（观测）噪声方差
N    //这里两个参数是最关键的
N}
N
N/**
N *kalman_filter - 卡尔曼滤波器
N *@kalman_lcw:卡尔曼结构体
N *@measure；测量值
N *返回滤波后的值
N */
Nfloat kalman_filter(kalman_struct *kalman_lcw, float measure)
N{
N    /* Predict */
N    kalman_lcw->x = kalman_lcw->A * kalman_lcw->x;//%x的先验估计由上一个时间点的后验估计值和输入信息给出
N    kalman_lcw->p = kalman_lcw->A * kalman_lcw->A * kalman_lcw->p + kalman_lcw->q;  /*计算先验均方差 p(n|n-1)=A^2*p(n-1|n-1)+q */
N
N    /* Measurement */
N    kalman_lcw->gain = kalman_lcw->p * kalman_lcw->H / (kalman_lcw->p * kalman_lcw->H * kalman_lcw->H + kalman_lcw->r);
N    kalman_lcw->x = kalman_lcw->x + kalman_lcw->gain * (measure - kalman_lcw->H * kalman_lcw->x);//利用残余的信息改善对x(t)的估计，给出后验估计，这个值也就是输出
N    kalman_lcw->p = (1 - kalman_lcw->gain * kalman_lcw->H) * kalman_lcw->p;//%计算后验均方差
N
N    return kalman_lcw->x;
N}
