; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp_usart.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp_usart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp_usart.crf ..\..\User\bsp_stm32f4xx\src\bsp_usart.c]
                          THUMB

                          AREA ||i.ConfigUartNVIC||, CODE, READONLY, ALIGN=1

                  ConfigUartNVIC PROC
;;;140    */
;;;141    static void ConfigUartNVIC(void)
000000  b508              PUSH     {r3,lr}
;;;142    {
;;;143    	NVIC_InitTypeDef NVIC_InitStructure;
;;;144    
;;;145    	/* 使能串口1中断 */
;;;146    	NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;
000002  2025              MOVS     r0,#0x25
000004  f88d0000          STRB     r0,[sp,#0]
;;;147    	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = Priority_UART1_Pre;
000008  2000              MOVS     r0,#0
00000a  f88d0001          STRB     r0,[sp,#1]
;;;148    	NVIC_InitStructure.NVIC_IRQChannelSubPriority 		 = Priority_UART1_Sub;
00000e  2001              MOVS     r0,#1
000010  f88d0002          STRB     r0,[sp,#2]
;;;149    	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000014  f88d0003          STRB     r0,[sp,#3]
;;;150    	NVIC_Init(&NVIC_InitStructure);
000018  4668              MOV      r0,sp
00001a  f7fffffe          BL       NVIC_Init
;;;151    }
00001e  bd08              POP      {r3,pc}
;;;152    
                          ENDP


                          AREA ||i.DMA2_Stream7_IRQHandler||, CODE, READONLY, ALIGN=2

                  DMA2_Stream7_IRQHandler PROC
;;;358    
;;;359    void DMA2_Stream7_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;360    {
;;;361    	if(DMA_GetITStatus(DMA2_Stream7, DMA_IT_TCIF7))
000002  4906              LDR      r1,|L2.28|
000004  4806              LDR      r0,|L2.32|
000006  f7fffffe          BL       DMA_GetITStatus
00000a  b130              CBZ      r0,|L2.26|
;;;362    	{
;;;363    		UsartDmaTxFlag = 0;
00000c  2000              MOVS     r0,#0
00000e  4905              LDR      r1,|L2.36|
000010  7008              STRB     r0,[r1,#0]
;;;364    		// printf("ok\r\n");
;;;365    		DMA_ClearITPendingBit(DMA2_Stream7, DMA_IT_TCIF7);
000012  4902              LDR      r1,|L2.28|
000014  4802              LDR      r0,|L2.32|
000016  f7fffffe          BL       DMA_ClearITPendingBit
                  |L2.26|
;;;366    
;;;367    	}
;;;368    }
00001a  bd10              POP      {r4,pc}
;;;369    
                          ENDP

                  |L2.28|
                          DCD      0x28008000
                  |L2.32|
                          DCD      0x400264b8
                  |L2.36|
                          DCD      UsartDmaTxFlag

                          AREA ||i.InitHardUart||, CODE, READONLY, ALIGN=2

                  InitHardUart PROC
;;;50     */
;;;51     static void InitHardUart(void)
000000  b500              PUSH     {lr}
;;;52     {
000002  b087              SUB      sp,sp,#0x1c
;;;53     	GPIO_InitTypeDef GPIO_InitStructure;
;;;54     	USART_InitTypeDef USART_InitStructure;
;;;55     	/* 第1步： 配置GPIO */
;;;56     	#if UART1_PIN == 0	/* TX = PA9   RX = PA10 */
;;;57     		/* 打开 GPIO 时钟 */
;;;58     		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
000004  2101              MOVS     r1,#1
000006  4608              MOV      r0,r1
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;59     
;;;60     		/* 打开 UART 时钟 */
;;;61     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
00000c  2101              MOVS     r1,#1
00000e  2010              MOVS     r0,#0x10
000010  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;62     
;;;63     		/* 将 PA9 映射为 USART1_TX */
;;;64     		GPIO_PinAFConfig(GPIOA, GPIO_PinSource9, GPIO_AF_USART1);
000014  2207              MOVS     r2,#7
000016  2109              MOVS     r1,#9
000018  481d              LDR      r0,|L3.144|
00001a  f7fffffe          BL       GPIO_PinAFConfig
;;;65     
;;;66     		/* 将 PA10 映射为 USART1_RX */
;;;67     		GPIO_PinAFConfig(GPIOA, GPIO_PinSource10, GPIO_AF_USART1);
00001e  2207              MOVS     r2,#7
000020  210a              MOVS     r1,#0xa
000022  481b              LDR      r0,|L3.144|
000024  f7fffffe          BL       GPIO_PinAFConfig
;;;68     
;;;69     		/* 配置 USART Tx 为复用功能 */
;;;70     		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
000028  2000              MOVS     r0,#0
00002a  f88d001a          STRB     r0,[sp,#0x1a]
;;;71     		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
00002e  2001              MOVS     r0,#1
000030  f88d001b          STRB     r0,[sp,#0x1b]
;;;72     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
000034  2002              MOVS     r0,#2
000036  f88d0018          STRB     r0,[sp,#0x18]
;;;73     
;;;74     		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9;
00003a  0200              LSLS     r0,r0,#8
00003c  9005              STR      r0,[sp,#0x14]
;;;75     		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
00003e  2002              MOVS     r0,#2
000040  f88d0019          STRB     r0,[sp,#0x19]
;;;76     		GPIO_Init(GPIOA, &GPIO_InitStructure);
000044  a905              ADD      r1,sp,#0x14
000046  4812              LDR      r0,|L3.144|
000048  f7fffffe          BL       GPIO_Init
;;;77     
;;;78     		/* 配置 USART Rx 为复用功能 */
;;;79     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
00004c  2002              MOVS     r0,#2
00004e  f88d0018          STRB     r0,[sp,#0x18]
;;;80     		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_10;
000052  0240              LSLS     r0,r0,#9
000054  9005              STR      r0,[sp,#0x14]
;;;81     		GPIO_Init(GPIOA, &GPIO_InitStructure);
000056  a905              ADD      r1,sp,#0x14
000058  480d              LDR      r0,|L3.144|
00005a  f7fffffe          BL       GPIO_Init
;;;82     	#elif UART1_PIN == 1	/* TX = PB6   RX = PB7  */
;;;83     		/* 打开 GPIO 时钟 */
;;;84     		RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOB, ENABLE);
;;;85     
;;;86     		/* 打开 UART 时钟 */
;;;87     		RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1, ENABLE);
;;;88     
;;;89     		/* 将 PB6 映射为 USART1_TX */
;;;90     		GPIO_PinAFConfig(GPIOB, GPIO_PinSource6, GPIO_AF_USART1);
;;;91     
;;;92     		/* 将 PB7 映射为 USART1_RX */
;;;93     		GPIO_PinAFConfig(GPIOB, GPIO_PinSource7, GPIO_AF_USART1);
;;;94     
;;;95     		/* 配置 USART Tx 为复用功能 */
;;;96     		GPIO_InitStructure.GPIO_OType = GPIO_OType_PP;	/* 输出类型为推挽 */
;;;97     		GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP;	/* 内部上拉电阻使能 */
;;;98     		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;	/* 复用模式 */
;;;99     
;;;100    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_6;
;;;101    		GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;
;;;102    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;103    
;;;104    		/* 配置 USART Rx 为复用功能 */
;;;105    		GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;
;;;106    		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7;
;;;107    		GPIO_Init(GPIOB, &GPIO_InitStructure);
;;;108    	#endif
;;;109    
;;;110    	/* 第2步： 配置串口硬件参数 */
;;;111    	USART_InitStructure.USART_BaudRate = UART1_BAUD;	/* 波特率 */
00005e  f44f30e1          MOV      r0,#0x1c200
000062  9001              STR      r0,[sp,#4]
;;;112    	USART_InitStructure.USART_WordLength = USART_WordLength_8b;
000064  2000              MOVS     r0,#0
000066  f8ad0008          STRH     r0,[sp,#8]
;;;113    	USART_InitStructure.USART_StopBits = USART_StopBits_1;
00006a  f8ad000a          STRH     r0,[sp,#0xa]
;;;114    	USART_InitStructure.USART_Parity = USART_Parity_No ;
00006e  f8ad000c          STRH     r0,[sp,#0xc]
;;;115    	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
000072  f8ad0010          STRH     r0,[sp,#0x10]
;;;116    	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
000076  200c              MOVS     r0,#0xc
000078  f8ad000e          STRH     r0,[sp,#0xe]
;;;117    	USART_Init(USART1, &USART_InitStructure);
00007c  a901              ADD      r1,sp,#4
00007e  4805              LDR      r0,|L3.148|
000080  f7fffffe          BL       USART_Init
;;;118    
;;;119    	// USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);	/* 使能接收中断 */
;;;120    	/*
;;;121    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
;;;122    		注意: 不要在此处打开发送中断
;;;123    		发送中断使能在SendUart()函数打开
;;;124    	*/
;;;125    	USART_Cmd(USART1, ENABLE);		/* 使能串口 */
000084  2101              MOVS     r1,#1
000086  4803              LDR      r0,|L3.148|
000088  f7fffffe          BL       USART_Cmd
;;;126    
;;;127    	/* CPU的小缺陷：串口配置好，如果直接Send，则第1个字节发送不出去
;;;128    		如下语句解决第1个字节无法正确发送出去的问题 */
;;;129    //	USART_ClearFlag(USART1, USART_FLAG_TC);     /* 清发送完成标志，Transmission Complete flag */
;;;130    
;;;131    }
00008c  b007              ADD      sp,sp,#0x1c
00008e  bd00              POP      {pc}
;;;132    
                          ENDP

                  |L3.144|
                          DCD      0x40020000
                  |L3.148|
                          DCD      0x40011000

                          AREA ||i.USART1_DMA_Send||, CODE, READONLY, ALIGN=2

                  USART1_DMA_Send PROC
;;;277     */
;;;278    void USART1_DMA_Send(uint8_t *pbuffer, uint32_t size)
000000  b570              PUSH     {r4-r6,lr}
;;;279    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;280    
;;;281    	if(UsartDmaTxFlag == 0)//发送数据完成后才能开始发送
000006  480f              LDR      r0,|L4.68|
000008  7800              LDRB     r0,[r0,#0]  ; UsartDmaTxFlag
00000a  b9c8              CBNZ     r0,|L4.64|
;;;282    	{
;;;283    		DMA_Cmd (DMA2_Stream7,DISABLE);
00000c  2100              MOVS     r1,#0
00000e  480e              LDR      r0,|L4.72|
000010  f7fffffe          BL       DMA_Cmd
;;;284    		while (DMA_GetCmdStatus(DMA2_Stream7) != DISABLE){}
000014  bf00              NOP      
                  |L4.22|
000016  480c              LDR      r0,|L4.72|
000018  f7fffffe          BL       DMA_GetCmdStatus
00001c  2800              CMP      r0,#0
00001e  d1fa              BNE      |L4.22|
;;;285    	//	DMA2_Stream7->M0AR =  (u32)pbuffer;
;;;286    	//	DMA2_Stream7->NDTR = size;
;;;287    		DMA_MemoryTargetConfig(DMA2_Stream7,(u32)pbuffer,DMA_Memory_0);
000020  2200              MOVS     r2,#0
000022  4621              MOV      r1,r4
000024  4808              LDR      r0,|L4.72|
000026  f7fffffe          BL       DMA_MemoryTargetConfig
;;;288    		DMA_SetCurrDataCounter(DMA2_Stream7,size);
00002a  b2a9              UXTH     r1,r5
00002c  4806              LDR      r0,|L4.72|
00002e  f7fffffe          BL       DMA_SetCurrDataCounter
;;;289    	 	DMA_Cmd (DMA2_Stream7,ENABLE);//使能DMA,开始发送
000032  2101              MOVS     r1,#1
000034  4804              LDR      r0,|L4.72|
000036  f7fffffe          BL       DMA_Cmd
;;;290    		UsartDmaTxFlag=1; //数据发送中
00003a  2001              MOVS     r0,#1
00003c  4901              LDR      r1,|L4.68|
00003e  7008              STRB     r0,[r1,#0]
                  |L4.64|
;;;291    	}
;;;292    }
000040  bd70              POP      {r4-r6,pc}
;;;293    
                          ENDP

000042  0000              DCW      0x0000
                  |L4.68|
                          DCD      UsartDmaTxFlag
                  |L4.72|
                          DCD      0x400264b8

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;331    //extern DJM djm;
;;;332    void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;333    {
;;;334    	
;;;335    	u8 clear = clear;
000002  bf00              NOP      
;;;336    	if (USART_GetITStatus(USART1, USART_IT_IDLE) != RESET)//空闲中断,
000004  f2404124          MOV      r1,#0x424
000008  4810              LDR      r0,|L5.76|
00000a  f7fffffe          BL       USART_GetITStatus
00000e  b1d8              CBZ      r0,|L5.72|
;;;337    	{
;;;338    //		djm = *(DJM*)(g_RxBuf1);
;;;339    //		ANO_Data1_Send(0xf1,djm.current*djm.volate*100);
;;;340    //		u1_printf("V:%d\tI:%d\tP:%d\r\n",(int)(djm.volate*100),(int)(djm.current*100),(int)(djm.current*djm.volate*100));
;;;341    //		u1_printf("%f\t%f\t%d\t%d\t%f\t%f\t%d\t%d\t%d\t\r\n",djm.shoot_speed,djm.shoot_frequency,djm.time,djm.blood,djm.volate,djm.current,\
;;;342    //		djm.id1,djm.id1,djm.id1);
;;;343    //		if(g_RxBuf1[0] == 0xaa && g_RxBuf1[1] == 0x55)
;;;344    //			UsasrFrameRec(g_RxBuf1);
;;;345    //		else
;;;346    			run(g_RxBuf1);
000010  480f              LDR      r0,|L5.80|
000012  f7fffffe          BL       ||run||
;;;347    //		u1_printf("%d\r\n",USART_DMA_RX_LEN(DMA2_Stream2,UART1_RX_BUF_SIZE));
;;;348    
;;;349    		DMA_Cmd(DMA2_Stream2,DISABLE);//DMA失能
000016  2100              MOVS     r1,#0
000018  480e              LDR      r0,|L5.84|
00001a  f7fffffe          BL       DMA_Cmd
;;;350    		while(DMA_GetCmdStatus(DMA2_Stream2));//检测是否失能成功，DMA失能时需要等待少许时间才失能成功
00001e  bf00              NOP      
                  |L5.32|
000020  480c              LDR      r0,|L5.84|
000022  f7fffffe          BL       DMA_GetCmdStatus
000026  2800              CMP      r0,#0
000028  d1fa              BNE      |L5.32|
;;;351    		DMA_SetCurrDataCounter(DMA2_Stream2,UART1_RX_BUF_SIZE);//数据传输量
00002a  f44f6180          MOV      r1,#0x400
00002e  4809              LDR      r0,|L5.84|
000030  f7fffffe          BL       DMA_SetCurrDataCounter
;;;352    		DMA_Cmd(DMA2_Stream2,ENABLE);//DMA重新使能
000034  2101              MOVS     r1,#1
000036  4807              LDR      r0,|L5.84|
000038  f7fffffe          BL       DMA_Cmd
;;;353    		clear = USART1->SR;//这两步为清除空闲中断标志
00003c  4803              LDR      r0,|L5.76|
00003e  8800              LDRH     r0,[r0,#0]
000040  b2c4              UXTB     r4,r0
;;;354    		clear = USART1->DR;//这两步为清除空闲中断标志
000042  4802              LDR      r0,|L5.76|
000044  8880              LDRH     r0,[r0,#4]
000046  b2c4              UXTB     r4,r0
                  |L5.72|
;;;355    	}
;;;356    }
000048  bd10              POP      {r4,pc}
;;;357    
                          ENDP

00004a  0000              DCW      0x0000
                  |L5.76|
                          DCD      0x40011000
                  |L5.80|
                          DCD      g_RxBuf1
                  |L5.84|
                          DCD      0x40026440

                          AREA ||i.USART_DMA_RX_LEN||, CODE, READONLY, ALIGN=1

                  USART_DMA_RX_LEN PROC
;;;316     */
;;;317    uint16_t USART_DMA_RX_LEN(DMA_Stream_TypeDef* DMAy_Streamx,uint16_t BufSize)
000000  4602              MOV      r2,r0
;;;318    {
;;;319    	return (BufSize - DMAy_Streamx->NDTR);
000002  6850              LDR      r0,[r2,#4]
000004  1a08              SUBS     r0,r1,r0
000006  b280              UXTH     r0,r0
;;;320    }
000008  4770              BX       lr
;;;321    
                          ENDP


                          AREA ||i.UsartDMA_Init||, CODE, READONLY, ALIGN=2

                  UsartDMA_Init PROC
;;;204    
;;;205    void UsartDMA_Init(void)
000000  b500              PUSH     {lr}
;;;206    {
000002  b091              SUB      sp,sp,#0x44
;;;207    	NVIC_InitTypeDef NVIC_InitStructure;
;;;208    	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_DMA2, ENABLE);
000004  2101              MOVS     r1,#1
000006  0588              LSLS     r0,r1,#22
000008  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;209    	USART_Cmd(USART1,ENABLE);
00000c  2101              MOVS     r1,#1
00000e  483d              LDR      r0,|L7.260|
000010  f7fffffe          BL       USART_Cmd
;;;210    	USART_DMACmd(USART1,USART_DMAReq_Rx,ENABLE);
000014  2201              MOVS     r2,#1
000016  2140              MOVS     r1,#0x40
000018  483a              LDR      r0,|L7.260|
00001a  f7fffffe          BL       USART_DMACmd
;;;211    	USART_DMACmd(USART1,USART_DMAReq_Tx,ENABLE);
00001e  2201              MOVS     r2,#1
000020  2180              MOVS     r1,#0x80
000022  4838              LDR      r0,|L7.260|
000024  f7fffffe          BL       USART_DMACmd
;;;212    	/* -------------- Configure NVIC ---------------------------------------*/
;;;213    //	{
;;;214    
;;;215    		NVIC_InitStructure.NVIC_IRQChannel = DMA2_Stream7_IRQn;
000028  2046              MOVS     r0,#0x46
00002a  f88d0040          STRB     r0,[sp,#0x40]
;;;216    		NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority = 2;
00002e  2002              MOVS     r0,#2
000030  f88d0041          STRB     r0,[sp,#0x41]
;;;217    		NVIC_InitStructure.NVIC_IRQChannelSubPriority = 2;
000034  f88d0042          STRB     r0,[sp,#0x42]
;;;218    		NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;
000038  2001              MOVS     r0,#1
00003a  f88d0043          STRB     r0,[sp,#0x43]
;;;219    		NVIC_Init(&NVIC_InitStructure);
00003e  a810              ADD      r0,sp,#0x40
000040  f7fffffe          BL       NVIC_Init
;;;220    //	}
;;;221    	/* -------------- Configure DMA_RX -----------------------------------------*/
;;;222    	{
;;;223    		DMA_InitTypeDef DMA_InitStructure;
;;;224    		DMA_DeInit(DMA2_Stream2);
000044  4830              LDR      r0,|L7.264|
000046  f7fffffe          BL       DMA_DeInit
;;;225    		DMA_InitStructure.DMA_Channel = DMA_Channel_4;
00004a  f04f6000          MOV      r0,#0x8000000
00004e  9001              STR      r0,[sp,#4]
;;;226    		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(USART1->DR);
000050  482c              LDR      r0,|L7.260|
000052  1d00              ADDS     r0,r0,#4
000054  9002              STR      r0,[sp,#8]
;;;227    		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)g_RxBuf1;
000056  482d              LDR      r0,|L7.268|
000058  9003              STR      r0,[sp,#0xc]
;;;228    		DMA_InitStructure.DMA_DIR = DMA_DIR_PeripheralToMemory;
00005a  2000              MOVS     r0,#0
00005c  9004              STR      r0,[sp,#0x10]
;;;229    		DMA_InitStructure.DMA_BufferSize = UART1_RX_BUF_SIZE;
00005e  f44f6080          MOV      r0,#0x400
000062  9005              STR      r0,[sp,#0x14]
;;;230    		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
000064  2000              MOVS     r0,#0
000066  9006              STR      r0,[sp,#0x18]
;;;231    		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
000068  f44f6080          MOV      r0,#0x400
00006c  9007              STR      r0,[sp,#0x1c]
;;;232    		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
00006e  2000              MOVS     r0,#0
000070  9008              STR      r0,[sp,#0x20]
;;;233    		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
000072  9009              STR      r0,[sp,#0x24]
;;;234    		DMA_InitStructure.DMA_Mode = DMA_Mode_Circular;
000074  f44f7080          MOV      r0,#0x100
000078  900a              STR      r0,[sp,#0x28]
;;;235    		DMA_InitStructure.DMA_Priority = DMA_Priority_VeryHigh;
00007a  f44f3040          MOV      r0,#0x30000
00007e  900b              STR      r0,[sp,#0x2c]
;;;236    		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
000080  2000              MOVS     r0,#0
000082  900c              STR      r0,[sp,#0x30]
;;;237    		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
000084  900d              STR      r0,[sp,#0x34]
;;;238    		DMA_InitStructure.DMA_MemoryBurst = DMA_Mode_Normal;
000086  900e              STR      r0,[sp,#0x38]
;;;239    		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
000088  900f              STR      r0,[sp,#0x3c]
;;;240    		DMA_Init(DMA2_Stream2,&DMA_InitStructure);
00008a  a901              ADD      r1,sp,#4
00008c  481e              LDR      r0,|L7.264|
00008e  f7fffffe          BL       DMA_Init
;;;241    		// DMA_ITConfig(DMA2_Stream2,DMA_IT_TC,ENABLE);//用了该方法后不需要DMA中断
;;;242    		DMA_Cmd(DMA2_Stream2,ENABLE);
000092  2101              MOVS     r1,#1
000094  481c              LDR      r0,|L7.264|
000096  f7fffffe          BL       DMA_Cmd
;;;243    	}
;;;244    	/* -------------- Configure DMA_TX -----------------------------------------*/
;;;245    	{
;;;246    		DMA_InitTypeDef DMA_InitStructure;
;;;247    		DMA_DeInit(DMA2_Stream7);
00009a  481b              LDR      r0,|L7.264|
00009c  3078              ADDS     r0,r0,#0x78
00009e  f7fffffe          BL       DMA_DeInit
;;;248    		DMA_InitStructure.DMA_Channel = DMA_Channel_4;
0000a2  f04f6000          MOV      r0,#0x8000000
0000a6  9001              STR      r0,[sp,#4]
;;;249    		DMA_InitStructure.DMA_PeripheralBaseAddr = (uint32_t)&(USART1->DR);
0000a8  4816              LDR      r0,|L7.260|
0000aa  1d00              ADDS     r0,r0,#4
0000ac  9002              STR      r0,[sp,#8]
;;;250    //		DMA_InitStructure.DMA_Memory0BaseAddr = (uint32_t)table;
;;;251    		DMA_InitStructure.DMA_DIR = DMA_DIR_MemoryToPeripheral;
0000ae  2040              MOVS     r0,#0x40
0000b0  9004              STR      r0,[sp,#0x10]
;;;252    //		DMA_InitStructure.DMA_BufferSize = 30;
;;;253    		DMA_InitStructure.DMA_PeripheralInc = DMA_PeripheralInc_Disable;
0000b2  2000              MOVS     r0,#0
0000b4  9006              STR      r0,[sp,#0x18]
;;;254    		DMA_InitStructure.DMA_MemoryInc = DMA_MemoryInc_Enable;
0000b6  f44f6080          MOV      r0,#0x400
0000ba  9007              STR      r0,[sp,#0x1c]
;;;255    		DMA_InitStructure.DMA_PeripheralDataSize = DMA_PeripheralDataSize_Byte;
0000bc  2000              MOVS     r0,#0
0000be  9008              STR      r0,[sp,#0x20]
;;;256    		DMA_InitStructure.DMA_MemoryDataSize = DMA_MemoryDataSize_Byte;
0000c0  9009              STR      r0,[sp,#0x24]
;;;257    		DMA_InitStructure.DMA_Mode = DMA_Mode_Normal;
0000c2  900a              STR      r0,[sp,#0x28]
;;;258    		DMA_InitStructure.DMA_Priority = DMA_Priority_Medium;
0000c4  f44f3080          MOV      r0,#0x10000
0000c8  900b              STR      r0,[sp,#0x2c]
;;;259    		DMA_InitStructure.DMA_FIFOMode = DMA_FIFOMode_Disable;
0000ca  2000              MOVS     r0,#0
0000cc  900c              STR      r0,[sp,#0x30]
;;;260    		DMA_InitStructure.DMA_FIFOThreshold = DMA_FIFOThreshold_1QuarterFull;
0000ce  900d              STR      r0,[sp,#0x34]
;;;261    		DMA_InitStructure.DMA_MemoryBurst = DMA_MemoryBurst_Single;
0000d0  900e              STR      r0,[sp,#0x38]
;;;262    		DMA_InitStructure.DMA_PeripheralBurst = DMA_PeripheralBurst_Single;
0000d2  900f              STR      r0,[sp,#0x3c]
;;;263    		DMA_Init(DMA2_Stream7,&DMA_InitStructure);
0000d4  a901              ADD      r1,sp,#4
0000d6  480c              LDR      r0,|L7.264|
0000d8  3078              ADDS     r0,r0,#0x78
0000da  f7fffffe          BL       DMA_Init
;;;264    //		USART_DMACmd(USART1,USART_DMAReq_Tx,ENABLE);
;;;265    		DMA_ITConfig(DMA2_Stream7,DMA_IT_TC,ENABLE);
0000de  2201              MOVS     r2,#1
0000e0  2110              MOVS     r1,#0x10
0000e2  4809              LDR      r0,|L7.264|
0000e4  3078              ADDS     r0,r0,#0x78
0000e6  f7fffffe          BL       DMA_ITConfig
;;;266    		DMA_Cmd(DMA2_Stream7,DISABLE);//初始化时要失能。。。不能！！！
0000ea  2100              MOVS     r1,#0
0000ec  4806              LDR      r0,|L7.264|
0000ee  3078              ADDS     r0,r0,#0x78
0000f0  f7fffffe          BL       DMA_Cmd
;;;267    	}
;;;268    	USART_ITConfig(USART1, USART_IT_IDLE, ENABLE);//空闲中断,用于不定长接收
0000f4  2201              MOVS     r2,#1
0000f6  f2404124          MOV      r1,#0x424
0000fa  4802              LDR      r0,|L7.260|
0000fc  f7fffffe          BL       USART_ITConfig
;;;269    
;;;270    }
000100  b011              ADD      sp,sp,#0x44
000102  bd00              POP      {pc}
;;;271    
                          ENDP

                  |L7.260|
                          DCD      0x40011000
                  |L7.264|
                          DCD      0x40026440
                  |L7.268|
                          DCD      g_RxBuf1

                          AREA ||i.bsp_InitUart||, CODE, READONLY, ALIGN=1

                  bsp_InitUart PROC
;;;34     */
;;;35     void bsp_InitUart(void)
000000  b510              PUSH     {r4,lr}
;;;36     {
;;;37     
;;;38     	InitHardUart();		/* 配置串口的硬件参数(波特率等) */
000002  f7fffffe          BL       InitHardUart
;;;39     	ConfigUartNVIC();	/* 配置串口中断 */
000006  f7fffffe          BL       ConfigUartNVIC
;;;40     	UsartDMA_Init();
00000a  f7fffffe          BL       UsartDMA_Init
;;;41     }
00000e  bd10              POP      {r4,pc}
;;;42     
                          ENDP


                          AREA ||i.fgetc||, CODE, READONLY, ALIGN=2

                  fgetc PROC
;;;186    */
;;;187    int fgetc(FILE *f)
000000  b510              PUSH     {r4,lr}
;;;188    {
000002  4604              MOV      r4,r0
;;;189    
;;;190    #if 0	/* 从串口接收FIFO中取1个数据, 只有取到数据才返回 */
;;;191    	uint8_t ucData;
;;;192    
;;;193    	while(comGetChar(COM1, &ucData) == 0);
;;;194    
;;;195    	return ucData;
;;;196    #else
;;;197    	/* 等待串口1输入数据 */
;;;198    	while (USART_GetFlagStatus(USART1, USART_FLAG_RXNE) == RESET);
000004  bf00              NOP      
                  |L9.6|
000006  2120              MOVS     r1,#0x20
000008  4804              LDR      r0,|L9.28|
00000a  f7fffffe          BL       USART_GetFlagStatus
00000e  2800              CMP      r0,#0
000010  d0f9              BEQ      |L9.6|
;;;199    
;;;200    	return (int)USART_ReceiveData(USART1);
000012  4802              LDR      r0,|L9.28|
000014  f7fffffe          BL       USART_ReceiveData
;;;201    #endif
;;;202    }
000018  bd10              POP      {r4,pc}
;;;203    
                          ENDP

00001a  0000              DCW      0x0000
                  |L9.28|
                          DCD      0x40011000

                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;160    */
;;;161    int fputc(int ch, FILE *f)
000000  b570              PUSH     {r4-r6,lr}
;;;162    {
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;163    #if 0	/* 将需要printf的字符通过串口中断FIFO发送出去，printf函数会立即返回 */
;;;164    	comSendChar(COM1, ch);
;;;165    
;;;166    	return ch;
;;;167    #else	/* 采用阻塞方式发送每个字符,等待数据发送完毕 */
;;;168    	/* 写一个字节到USART1 */
;;;169    	USART_SendData(USART1, (uint8_t) ch);
000006  b2e1              UXTB     r1,r4
000008  4805              LDR      r0,|L10.32|
00000a  f7fffffe          BL       USART_SendData
;;;170    
;;;171    	/* 等待发送结束 */
;;;172    	while (USART_GetFlagStatus(USART1, USART_FLAG_TC) == RESET)
00000e  bf00              NOP      
                  |L10.16|
000010  2140              MOVS     r1,#0x40
000012  4803              LDR      r0,|L10.32|
000014  f7fffffe          BL       USART_GetFlagStatus
000018  2800              CMP      r0,#0
00001a  d0f9              BEQ      |L10.16|
;;;173    	{}
;;;174    
;;;175    	return ch;
00001c  4620              MOV      r0,r4
;;;176    #endif
;;;177    }
00001e  bd70              POP      {r4-r6,pc}
;;;178    
                          ENDP

                  |L10.32|
                          DCD      0x40011000

                          AREA ||i.u1_printf||, CODE, READONLY, ALIGN=2

                  u1_printf PROC
;;;296     */
;;;297    void u1_printf(char* fmt,...)
000000  b40f              PUSH     {r0-r3}
;;;298    {
000002  b538              PUSH     {r3-r5,lr}
;;;299    	va_list ap;
;;;300    	va_start(ap,fmt);
000004  a805              ADD      r0,sp,#0x14
000006  9000              STR      r0,[sp,#0]
;;;301    	vsprintf((char*)USART1_TX_BUF,fmt,ap);
000008  4808              LDR      r0,|L11.44|
00000a  9a00              LDR      r2,[sp,#0]
00000c  9904              LDR      r1,[sp,#0x10]
00000e  f7fffffe          BL       __c89vsprintf
;;;302    	va_end(ap);
000012  2000              MOVS     r0,#0
000014  9000              STR      r0,[sp,#0]
;;;303    	USART1_DMA_Send(USART1_TX_BUF, strlen((const char*)USART1_TX_BUF));
000016  4805              LDR      r0,|L11.44|
000018  f7fffffe          BL       strlen
00001c  4604              MOV      r4,r0
00001e  4621              MOV      r1,r4
000020  4802              LDR      r0,|L11.44|
000022  f7fffffe          BL       USART1_DMA_Send
;;;304    //	for(j=0;j<i;j++)//循环发送数据
;;;305    //	{
;;;306    //	  while(USART_GetFlagStatus(USART1,USART_FLAG_TC)==RESET);  //等待上次传输完成
;;;307    //		USART_SendData(USART1,(uint8_t)USART1_TX_BUF[j]); 	 //发送数据到串口3
;;;308    //	}
;;;309    }
000026  bc38              POP      {r3-r5}
000028  f85dfb14          LDR      pc,[sp],#0x14
;;;310    
                          ENDP

                  |L11.44|
                          DCD      USART1_TX_BUF

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  g_RxBuf1
                          %        1024
                  USART1_TX_BUF
                          %        2048

                          AREA ||.data||, DATA, ALIGN=0

                  UsartDmaTxFlag
000000  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp_usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_usart_c_b28b0d00____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___11_bsp_usart_c_b28b0d00____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_usart_c_b28b0d00____REVSH|
#line 144
|__asm___11_bsp_usart_c_b28b0d00____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___11_bsp_usart_c_b28b0d00____RRX|
#line 300
|__asm___11_bsp_usart_c_b28b0d00____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
