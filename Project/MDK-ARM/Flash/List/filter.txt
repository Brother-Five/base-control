; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\filter.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\filter.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\filter.crf ..\..\MySrc\filter.cpp]
                          THUMB

                          AREA ||i._Z13Middle_filterPfPhhf||, CODE, READONLY, ALIGN=1

                  _Z13Middle_filterPfPhhf PROC ; Middle_filter(float*, unsigned char*, unsigned char, float)
;;;65     
;;;66     float Middle_filter(float *temp,unsigned char *k, unsigned char num,float current)
000000  b570              PUSH     {r4-r6,lr}
;;;67     {
000002  ed2d8b02          VPUSH    {d8}
000006  b0b2              SUB      sp,sp,#0xc8
000008  4606              MOV      r6,r0
00000a  460c              MOV      r4,r1
00000c  4615              MOV      r5,r2
00000e  eeb08a40          VMOV.F32 s16,s0
;;;68     	float32_t TempBuf[50];
;;;69     //	float32_t sum;
;;;70     
;;;71     //	if(*k != 0)
;;;72     //		if(myabs(current - temp[*k - 1]) >= 1000)
;;;73     //			current = temp[*k - 1];
;;;74     
;;;75     	temp[*k] = current;
000012  7820              LDRB     r0,[r4,#0]
000014  eb060080          ADD      r0,r6,r0,LSL #2
000018  ed808a00          VSTR     s16,[r0,#0]
;;;76     	(*k)++;
00001c  7820              LDRB     r0,[r4,#0]
00001e  1c40              ADDS     r0,r0,#1
000020  7020              STRB     r0,[r4,#0]
;;;77     	if ( *k == num  ) *k = 0;
000022  7820              LDRB     r0,[r4,#0]
000024  42a8              CMP      r0,r5
000026  d101              BNE      |L1.44|
000028  2000              MOVS     r0,#0
00002a  7020              STRB     r0,[r4,#0]
                  |L1.44|
;;;78     
;;;79     	arm_copy_f32(temp,TempBuf,num);
00002c  462a              MOV      r2,r5
00002e  4669              MOV      r1,sp
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       arm_copy_f32
;;;80     
;;;81     	bubble_sort(TempBuf,num);
000036  4629              MOV      r1,r5
000038  4668              MOV      r0,sp
00003a  f7fffffe          BL       _Z11bubble_sortIfEvPT_i ; void bubble_sort<float>(T1*, int)
;;;82     	return TempBuf[(num-1)/2];
00003e  1e68              SUBS     r0,r5,#1
000040  eb0071d0          ADD      r1,r0,r0,LSR #31
000044  1049              ASRS     r1,r1,#1
000046  466a              MOV      r2,sp
000048  eb020181          ADD      r1,r2,r1,LSL #2
00004c  ed910a00          VLDR     s0,[r1,#0]
;;;83     
;;;84     //	arm_mean_f32( &(TempBuf[1]) , num-2 , &sum);
;;;85     //	return sum;
;;;86     //	中位值平均滤波法（又称防脉冲干扰平均滤波法）
;;;87     	// for(count=1,TempChange = 0;count<num-1;count++)
;;;88     	// 	TempChange += TempBuf[count];
;;;89     	// return TempChange/(num-2);
;;;90     }
000050  b032              ADD      sp,sp,#0xc8
000052  ecbd8b02          VPOP     {d8}
000056  bd70              POP      {r4-r6,pc}
;;;91     
                          ENDP


                          AREA ||i._Z13Middle_filterPiPhhi||, CODE, READONLY, ALIGN=1

                  _Z13Middle_filterPiPhhi PROC ; Middle_filter(int*, unsigned char*, unsigned char, int)
;;;8      
;;;9      int Middle_filter(int *temp,unsigned char *k, unsigned char num,int current)
000000  b5f0              PUSH     {r4-r7,lr}
;;;10     {
000002  b0b3              SUB      sp,sp,#0xcc
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;11     	q31_t TempBuf[50];
;;;12     //	q31_t sum;
;;;13     
;;;14     
;;;15     //	if(*k != 0)
;;;16     //		if(myabs(current - temp[*k - 1]) >= 1000)
;;;17     //			current = temp[*k - 1];
;;;18     
;;;19     	temp[*k] = current;
00000c  7820              LDRB     r0,[r4,#0]
00000e  f8467020          STR      r7,[r6,r0,LSL #2]
;;;20     	(*k)++;
000012  7820              LDRB     r0,[r4,#0]
000014  1c40              ADDS     r0,r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;21     	if ( *k == num  ) *k = 0;
000018  7820              LDRB     r0,[r4,#0]
00001a  42a8              CMP      r0,r5
00001c  d101              BNE      |L2.34|
00001e  2000              MOVS     r0,#0
000020  7020              STRB     r0,[r4,#0]
                  |L2.34|
;;;22     
;;;23     	arm_copy_q31(temp,TempBuf,num);
000022  462a              MOV      r2,r5
000024  a901              ADD      r1,sp,#4
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       arm_copy_q31
;;;24     
;;;25     	bubble_sort(TempBuf,num);
00002c  4629              MOV      r1,r5
00002e  a801              ADD      r0,sp,#4
000030  f7fffffe          BL       _Z11bubble_sortIiEvPT_i ; void bubble_sort<int>(T1*, int)
;;;26     	return TempBuf[(num-1)/2];
000034  1e69              SUBS     r1,r5,#1
000036  eb0170d1          ADD      r0,r1,r1,LSR #31
00003a  1040              ASRS     r0,r0,#1
00003c  aa01              ADD      r2,sp,#4
00003e  f8520020          LDR      r0,[r2,r0,LSL #2]
;;;27     //	arm_mean_q31( &(TempBuf[1]) , num-2 , &sum);
;;;28     //	return sum;
;;;29     
;;;30     //	中位值平均滤波法（又称防脉冲干扰平均滤波法）
;;;31     	// for(count=1,TempChange = 0;count<num-1;count++)
;;;32     	// 	TempChange += TempBuf[count];
;;;33     	// return TempChange/(num-2);
;;;34     }
000042  b033              ADD      sp,sp,#0xcc
000044  bdf0              POP      {r4-r7,pc}
;;;35     
                          ENDP


                          AREA ||i._Z13Middle_filterPsPhhs||, CODE, READONLY, ALIGN=1

                  _Z13Middle_filterPsPhhs PROC ; Middle_filter(short*, unsigned char*, unsigned char, short)
;;;35     
;;;36     short Middle_filter(short *temp,unsigned char *k, unsigned char num,short current)
000000  b5f0              PUSH     {r4-r7,lr}
;;;37     {
000002  b099              SUB      sp,sp,#0x64
000004  4606              MOV      r6,r0
000006  460c              MOV      r4,r1
000008  4615              MOV      r5,r2
00000a  461f              MOV      r7,r3
;;;38     	q15_t TempBuf[50];
;;;39     	// q15_t sum;
;;;40     
;;;41     //	if(*k != 0)
;;;42     //		if(myabs(current - temp[*k - 1]) >= 1000)
;;;43     //			current = temp[*k - 1];
;;;44     
;;;45     	temp[*k] = current;
00000c  7820              LDRB     r0,[r4,#0]
00000e  f8267010          STRH     r7,[r6,r0,LSL #1]
;;;46     	(*k)++;
000012  7820              LDRB     r0,[r4,#0]
000014  1c40              ADDS     r0,r0,#1
000016  7020              STRB     r0,[r4,#0]
;;;47     	if ( *k == num  ) *k = 0;
000018  7820              LDRB     r0,[r4,#0]
00001a  42a8              CMP      r0,r5
00001c  d101              BNE      |L3.34|
00001e  2000              MOVS     r0,#0
000020  7020              STRB     r0,[r4,#0]
                  |L3.34|
;;;48     
;;;49     	arm_copy_q15(temp,TempBuf,num);
000022  462a              MOV      r2,r5
000024  4669              MOV      r1,sp
000026  4630              MOV      r0,r6
000028  f7fffffe          BL       arm_copy_q15
;;;50     
;;;51     	bubble_sort(TempBuf,num);
00002c  4629              MOV      r1,r5
00002e  4668              MOV      r0,sp
000030  f7fffffe          BL       _Z11bubble_sortIsEvPT_i ; void bubble_sort<short>(T1*, int)
;;;52     	// return TempBuf[(num-1)/2];
;;;53     	return TempBuf[(num-1)/2];
000034  1e69              SUBS     r1,r5,#1
000036  eb0170d1          ADD      r0,r1,r1,LSR #31
00003a  1040              ASRS     r0,r0,#1
00003c  f93d0010          LDRSH    r0,[sp,r0,LSL #1]
;;;54     //	return temp[_tempi];
;;;55     
;;;56     //	arm_mean_q15(&(TempBuf[1]) , num-2 , &sum);
;;;57     //	temp[_tempi] = sum;
;;;58     //	return sum;
;;;59     
;;;60     //	中位值平均滤波法（又称防脉冲干扰平均滤波法）
;;;61     	// for(count=1,TempChange = 0;count<num-1;count++)
;;;62     	// 	TempChange += TempBuf[count];
;;;63     	// return TempChange/(num-2);
;;;64     }
000040  b019              ADD      sp,sp,#0x64
000042  bdf0              POP      {r4-r7,pc}
;;;65     
                          ENDP


                          AREA ||i._Z13Slider_FilterPfPhhf||, CODE, READONLY, ALIGN=2

                  _Z13Slider_FilterPfPhhf PROC ; Slider_Filter(float*, unsigned char*, unsigned char, float)
;;;116    }
;;;117    float Slider_Filter(float *temp,unsigned char *i, unsigned char num,float current)
000000  b570              PUSH     {r4-r6,lr}
;;;118    {
000002  ed2d8b02          VPUSH    {d8}
000006  b082              SUB      sp,sp,#8
000008  4606              MOV      r6,r0
00000a  460c              MOV      r4,r1
00000c  4615              MOV      r5,r2
00000e  eeb08a40          VMOV.F32 s16,s0
;;;119    	float32_t sum=0;
000012  ed9f0a0e          VLDR     s0,|L4.76|
000016  ed8d0a01          VSTR     s0,[sp,#4]
;;;120    
;;;121    	temp[*i] = current;
00001a  7820              LDRB     r0,[r4,#0]
00001c  eb060080          ADD      r0,r6,r0,LSL #2
000020  ed808a00          VSTR     s16,[r0,#0]
;;;122    	(*i)++;
000024  7820              LDRB     r0,[r4,#0]
000026  1c40              ADDS     r0,r0,#1
000028  7020              STRB     r0,[r4,#0]
;;;123    	if ( *i == num  ) *i = 0;
00002a  7820              LDRB     r0,[r4,#0]
00002c  42a8              CMP      r0,r5
00002e  d101              BNE      |L4.52|
000030  2000              MOVS     r0,#0
000032  7020              STRB     r0,[r4,#0]
                  |L4.52|
;;;124    
;;;125    	arm_mean_f32(temp, num, &sum);
000034  aa01              ADD      r2,sp,#4
000036  4629              MOV      r1,r5
000038  4630              MOV      r0,r6
00003a  f7fffffe          BL       arm_mean_f32
;;;126    	return sum;
00003e  ed9d0a01          VLDR     s0,[sp,#4]
;;;127    }
000042  b002              ADD      sp,sp,#8
000044  ecbd8b02          VPOP     {d8}
000048  bd70              POP      {r4-r6,pc}
                          ENDP

00004a  0000              DCW      0x0000
                  |L4.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z13Slider_FilterPiPhhi||, CODE, READONLY, ALIGN=1

                  _Z13Slider_FilterPiPhhi PROC ; Slider_Filter(int*, unsigned char*, unsigned char, int)
;;;92     
;;;93     int Slider_Filter(int *temp,unsigned char *i, unsigned char num,int current)
000000  b5f8              PUSH     {r3-r7,lr}
;;;94     {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;95     	q31_t sum=0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;96     
;;;97     	temp[*i] = current;
00000e  7820              LDRB     r0,[r4,#0]
000010  f8467020          STR      r7,[r6,r0,LSL #2]
;;;98     	(*i)++;
000014  7820              LDRB     r0,[r4,#0]
000016  1c40              ADDS     r0,r0,#1
000018  7020              STRB     r0,[r4,#0]
;;;99     	if ( *i == num  ) *i = 0;
00001a  7820              LDRB     r0,[r4,#0]
00001c  42a8              CMP      r0,r5
00001e  d101              BNE      |L5.36|
000020  2000              MOVS     r0,#0
000022  7020              STRB     r0,[r4,#0]
                  |L5.36|
;;;100    
;;;101    	arm_mean_q31(temp, num, &sum);
000024  466a              MOV      r2,sp
000026  4629              MOV      r1,r5
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       arm_mean_q31
;;;102    	return sum;
00002e  9800              LDR      r0,[sp,#0]
;;;103    }
000030  bdf8              POP      {r3-r7,pc}
;;;104    
                          ENDP


                          AREA ||i._Z13Slider_FilterPsPhhs||, CODE, READONLY, ALIGN=1

                  _Z13Slider_FilterPsPhhs PROC ; Slider_Filter(short*, unsigned char*, unsigned char, short)
;;;105    
;;;106    short Slider_Filter(short *temp,unsigned char *i, unsigned char num,short current)
000000  b5f8              PUSH     {r3-r7,lr}
;;;107    {
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
000006  4615              MOV      r5,r2
000008  461f              MOV      r7,r3
;;;108    	q15_t sum=0;
00000a  2000              MOVS     r0,#0
00000c  9000              STR      r0,[sp,#0]
;;;109    
;;;110    	temp[*i] = current;
00000e  7820              LDRB     r0,[r4,#0]
000010  f8267010          STRH     r7,[r6,r0,LSL #1]
;;;111    	(*i)++;
000014  7820              LDRB     r0,[r4,#0]
000016  1c40              ADDS     r0,r0,#1
000018  7020              STRB     r0,[r4,#0]
;;;112    	if ( *i == num  ) *i = 0;
00001a  7820              LDRB     r0,[r4,#0]
00001c  42a8              CMP      r0,r5
00001e  d101              BNE      |L6.36|
000020  2000              MOVS     r0,#0
000022  7020              STRB     r0,[r4,#0]
                  |L6.36|
;;;113    
;;;114    	arm_mean_q15(temp, num, &sum);
000024  466a              MOV      r2,sp
000026  4629              MOV      r1,r5
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       arm_mean_q15
;;;115    	return sum;
00002e  f9bd0000          LDRSH    r0,[sp,#0]
;;;116    }
000032  bdf8              POP      {r3-r7,pc}
;;;117    float Slider_Filter(float *temp,unsigned char *i, unsigned char num,float current)
                          ENDP


                          AREA ||.ARM.exidx||, LINKORDER=||i._Z13Middle_filterPiPhhi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z13Middle_filterPiPhhi||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i._Z13Middle_filterPsPhhs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Middle_filterPsPhhs||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i._Z13Middle_filterPfPhhf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Middle_filterPfPhhf||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i._Z13Slider_FilterPiPhhi||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Slider_FilterPiPhhi||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i._Z13Slider_FilterPsPhhs||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Slider_FilterPsPhhs||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i._Z13Slider_FilterPfPhhf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Slider_FilterPfPhhf||
                          DCD      0x00000001

                          AREA ||t._Z11bubble_sortIiEvPT_i||, COMGROUP=_Z11bubble_sortIiEvPT_i, CODE, READONLY, ALIGN=1

                  _Z11bubble_sortIiEvPT_i PROC ; void bubble_sort<int>(T1*, int)
;;;30     template<class T>
;;;31     void bubble_sort(T a[], int n)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4602              MOV      r2,r0
;;;33         int i,j;
;;;34     //	char flag;
;;;35     	T temp;
;;;36         for (j = 0; j < n - 1; j++)
000004  2300              MOVS     r3,#0
000006  e018              B        |L49.58|
                  |L49.8|
;;;37     	{
;;;38     //		if(flag)
;;;39     //			break;
;;;40     //		flag = 1;
;;;41             for (i = 0; i < n - 1 - j; i++)
000008  2000              MOVS     r0,#0
00000a  e011              B        |L49.48|
                  |L49.12|
;;;42             {
;;;43                 if(a[i] > a[i + 1])
00000c  f8526020          LDR      r6,[r2,r0,LSL #2]
000010  1c45              ADDS     r5,r0,#1
000012  f8525025          LDR      r5,[r2,r5,LSL #2]
000016  42ae              CMP      r6,r5
000018  dd09              BLE      |L49.46|
;;;44                 {
;;;45                     temp = a[i];
00001a  f8524020          LDR      r4,[r2,r0,LSL #2]
;;;46                     a[i] = a[i + 1];
00001e  1c45              ADDS     r5,r0,#1
000020  f8525025          LDR      r5,[r2,r5,LSL #2]
000024  f8425020          STR      r5,[r2,r0,LSL #2]
;;;47                     a[i + 1] = temp;
000028  1c45              ADDS     r5,r0,#1
00002a  f8424025          STR      r4,[r2,r5,LSL #2]
                  |L49.46|
00002e  1c40              ADDS     r0,r0,#1              ;41
                  |L49.48|
000030  1e4d              SUBS     r5,r1,#1              ;41
000032  1aed              SUBS     r5,r5,r3              ;41
000034  4285              CMP      r5,r0                 ;41
000036  dce9              BGT      |L49.12|
000038  1c5b              ADDS     r3,r3,#1              ;36
                  |L49.58|
00003a  1e4d              SUBS     r5,r1,#1              ;36
00003c  429d              CMP      r5,r3                 ;36
00003e  dce3              BGT      |L49.8|
;;;48     //				flag = 0;
;;;49                 }
;;;50             }
;;;51     	}
;;;52     }
000040  bd70              POP      {r4-r6,pc}
;;;53     //#ifdef __cplusplus
                          ENDP


                          AREA ||area_number.50||, COMGROUP=_Z11bubble_sortIiEvPT_i, LINKORDER=||t._Z11bubble_sortIiEvPT_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.50||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z11bubble_sortIiEvPT_i||
                          DCD      0x00000001

                          AREA ||t._Z11bubble_sortIsEvPT_i||, COMGROUP=_Z11bubble_sortIsEvPT_i, CODE, READONLY, ALIGN=1

                  _Z11bubble_sortIsEvPT_i PROC ; void bubble_sort<short>(T1*, int)
;;;30     template<class T>
;;;31     void bubble_sort(T a[], int n)
000000  b570              PUSH     {r4-r6,lr}
;;;32     {
000002  4602              MOV      r2,r0
;;;33         int i,j;
;;;34     //	char flag;
;;;35     	T temp;
;;;36         for (j = 0; j < n - 1; j++)
000004  2300              MOVS     r3,#0
000006  e018              B        |L57.58|
                  |L57.8|
;;;37     	{
;;;38     //		if(flag)
;;;39     //			break;
;;;40     //		flag = 1;
;;;41             for (i = 0; i < n - 1 - j; i++)
000008  2000              MOVS     r0,#0
00000a  e011              B        |L57.48|
                  |L57.12|
;;;42             {
;;;43                 if(a[i] > a[i + 1])
00000c  f9326010          LDRSH    r6,[r2,r0,LSL #1]
000010  1c45              ADDS     r5,r0,#1
000012  f9325015          LDRSH    r5,[r2,r5,LSL #1]
000016  42ae              CMP      r6,r5
000018  dd09              BLE      |L57.46|
;;;44                 {
;;;45                     temp = a[i];
00001a  f9324010          LDRSH    r4,[r2,r0,LSL #1]
;;;46                     a[i] = a[i + 1];
00001e  1c45              ADDS     r5,r0,#1
000020  f8325015          LDRH     r5,[r2,r5,LSL #1]
000024  f8225010          STRH     r5,[r2,r0,LSL #1]
;;;47                     a[i + 1] = temp;
000028  1c45              ADDS     r5,r0,#1
00002a  f8224015          STRH     r4,[r2,r5,LSL #1]
                  |L57.46|
00002e  1c40              ADDS     r0,r0,#1              ;41
                  |L57.48|
000030  1e4d              SUBS     r5,r1,#1              ;41
000032  1aed              SUBS     r5,r5,r3              ;41
000034  4285              CMP      r5,r0                 ;41
000036  dce9              BGT      |L57.12|
000038  1c5b              ADDS     r3,r3,#1              ;36
                  |L57.58|
00003a  1e4d              SUBS     r5,r1,#1              ;36
00003c  429d              CMP      r5,r3                 ;36
00003e  dce3              BGT      |L57.8|
;;;48     //				flag = 0;
;;;49                 }
;;;50             }
;;;51     	}
;;;52     }
000040  bd70              POP      {r4-r6,pc}
;;;53     //#ifdef __cplusplus
                          ENDP


                          AREA ||area_number.58||, COMGROUP=_Z11bubble_sortIsEvPT_i, LINKORDER=||t._Z11bubble_sortIsEvPT_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.58||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z11bubble_sortIsEvPT_i||
                          DCD      0x00000001

                          AREA ||t._Z11bubble_sortIfEvPT_i||, COMGROUP=_Z11bubble_sortIfEvPT_i, CODE, READONLY, ALIGN=1

                  _Z11bubble_sortIfEvPT_i PROC ; void bubble_sort<float>(T1*, int)
;;;30     template<class T>
;;;31     void bubble_sort(T a[], int n)
000000  b510              PUSH     {r4,lr}
;;;32     {
000002  4602              MOV      r2,r0
;;;33         int i,j;
;;;34     //	char flag;
;;;35     	T temp;
;;;36         for (j = 0; j < n - 1; j++)
000004  2300              MOVS     r3,#0
000006  e027              B        |L65.88|
                  |L65.8|
;;;37     	{
;;;38     //		if(flag)
;;;39     //			break;
;;;40     //		flag = 1;
;;;41             for (i = 0; i < n - 1 - j; i++)
000008  2000              MOVS     r0,#0
00000a  e020              B        |L65.78|
                  |L65.12|
;;;42             {
;;;43                 if(a[i] > a[i + 1])
00000c  eb020480          ADD      r4,r2,r0,LSL #2
000010  edd40a00          VLDR     s1,[r4,#0]
000014  1c44              ADDS     r4,r0,#1
000016  eb020484          ADD      r4,r2,r4,LSL #2
00001a  ed941a00          VLDR     s2,[r4,#0]
00001e  eef40ac1          VCMPE.F32 s1,s2
000022  eef1fa10          VMRS     APSR_nzcv,FPSCR
000026  dd11              BLE      |L65.76|
;;;44                 {
;;;45                     temp = a[i];
000028  eb020480          ADD      r4,r2,r0,LSL #2
00002c  ed940a00          VLDR     s0,[r4,#0]
;;;46                     a[i] = a[i + 1];
000030  1c44              ADDS     r4,r0,#1
000032  eb020484          ADD      r4,r2,r4,LSL #2
000036  edd40a00          VLDR     s1,[r4,#0]
00003a  eb020480          ADD      r4,r2,r0,LSL #2
00003e  edc40a00          VSTR     s1,[r4,#0]
;;;47                     a[i + 1] = temp;
000042  1c44              ADDS     r4,r0,#1
000044  eb020484          ADD      r4,r2,r4,LSL #2
000048  ed840a00          VSTR     s0,[r4,#0]
                  |L65.76|
00004c  1c40              ADDS     r0,r0,#1              ;41
                  |L65.78|
00004e  1e4c              SUBS     r4,r1,#1              ;41
000050  1ae4              SUBS     r4,r4,r3              ;41
000052  4284              CMP      r4,r0                 ;41
000054  dcda              BGT      |L65.12|
000056  1c5b              ADDS     r3,r3,#1              ;36
                  |L65.88|
000058  1e4c              SUBS     r4,r1,#1              ;36
00005a  429c              CMP      r4,r3                 ;36
00005c  dcd4              BGT      |L65.8|
;;;48     //				flag = 0;
;;;49                 }
;;;50             }
;;;51     	}
;;;52     }
00005e  bd10              POP      {r4,pc}
;;;53     //#ifdef __cplusplus
                          ENDP


                          AREA ||area_number.66||, COMGROUP=_Z11bubble_sortIfEvPT_i, LINKORDER=||t._Z11bubble_sortIfEvPT_i||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.66||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z11bubble_sortIfEvPT_i||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\filter.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___10_filter_cpp_ae5fde99___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___10_filter_cpp_ae5fde99___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___10_filter_cpp_ae5fde99___Z7__REVSHi|
#line 144
|__asm___10_filter_cpp_ae5fde99___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___10_filter_cpp_ae5fde99___Z5__RRXj|
#line 300
|__asm___10_filter_cpp_ae5fde99___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
