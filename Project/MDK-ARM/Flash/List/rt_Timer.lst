L 1 "..\..\RTX\src\rt_Timer.c"
N/*----------------------------------------------------------------------------
N *      RL-ARM - RTX
N *----------------------------------------------------------------------------
N *      Name:    RT_TIMER.C
N *      Purpose: User timer functions
N *      Rev.:    V4.70
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N#include "rt_TypeDef.h"
L 1 "..\..\RTX\inc\rt_TypeDef.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - RTX
N *----------------------------------------------------------------------------
N *      Name:    RT_TYPEDEF.H
N *      Purpose: Type Definitions
N *      Rev.:    V4.73
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N/* Types */
Ntypedef signed char        S8;
Ntypedef unsigned char      U8;
Ntypedef short              S16;
Ntypedef unsigned short     U16;
Ntypedef int                S32;
Ntypedef unsigned int       U32;
Ntypedef long long          S64;
Ntypedef unsigned long long U64;
Ntypedef unsigned char      BIT;
Ntypedef unsigned int       BOOL;
Ntypedef void               (*FUNCP)(void);
N
Ntypedef U32     OS_TID;
Ntypedef void    *OS_ID;
Ntypedef U32     OS_RESULT;
N
Ntypedef struct OS_TCB {
N  /* General part: identical for all implementations.                        */
N  U8     cb_type;                 /* Control Block Type                      */
N  U8     state;                   /* Task state                              */
N  U8     prio;                    /* Execution priority                      */
N  U8     task_id;                 /* Task ID value for optimized TCB access  */
N  struct OS_TCB *p_lnk;           /* Link pointer for ready/sem. wait list   */
N  struct OS_TCB *p_rlnk;          /* Link pointer for sem./mbx lst backwards */
N  struct OS_TCB *p_dlnk;          /* Link pointer for delay list             */
N  struct OS_TCB *p_blnk;          /* Link pointer for delay list backwards   */
N  U16    delta_time;              /* Time until time out                     */
N  U16    interval_time;           /* Time interval for periodic waits        */
N  U16    events;                  /* Event flags                             */
N  U16    waits;                   /* Wait flags                              */
N  void   **msg;                   /* Direct message passing when task waits  */
N  struct OS_MUCB *p_mlnk;         /* Link pointer for mutex owner list       */
N  U8     prio_base;               /* Base priority                           */
N  U8     ret_val;                 /* Return value upon completion of a wait  */
N
N  /* Hardware dependant part: specific for CM processor                      */
N  U8     ret_upd;                 /* Updated return value                    */
N  U16    priv_stack;              /* Private stack size, 0= system assigned  */
N  U32    tsk_stack;               /* Current task Stack pointer (R13)        */
N  U32    *stack;                  /* Pointer to Task Stack memory block      */
N
N  /* Task entry point used for uVision debugger                              */
N  FUNCP  ptask;                   /* Task entry address                      */
N} *P_TCB;
N#define TCB_RETVAL      37        /* 'ret_val' offset                        */
N#define TCB_RETUPD      38        /* 'ret_upd' offset                        */
N#define TCB_TSTACK      44        /* 'tsk_stack' offset                      */
N
Ntypedef struct OS_PSFE {          /* Post Service Fifo Entry                 */
N  void  *id;                      /* Object Identification                   */
N  U32    arg;                     /* Object Argument                         */
N} *P_PSFE;
N
Ntypedef struct OS_PSQ {           /* Post Service Queue                      */
N  U8     first;                   /* FIFO Head Index                         */
N  U8     last;                    /* FIFO Tail Index                         */
N  U8     count;                   /* Number of stored items in FIFO          */
N  U8     size;                    /* FIFO Size                               */
N  struct OS_PSFE q[1];            /* FIFO Content                            */
N} *P_PSQ;
N
Ntypedef struct OS_TSK {
N  P_TCB  run;                     /* Current running task                    */
N  P_TCB  new;                     /* Scheduled task to run                   */
N} *P_TSK;
N
Ntypedef struct OS_ROBIN {         /* Round Robin Control                     */
N  P_TCB  task;                    /* Round Robin task                        */
N  U16    time;                    /* Round Robin switch time                 */
N  U16    tout;                    /* Round Robin timeout                     */
N} *P_ROBIN;
N
Ntypedef struct OS_XCB {
N  U8     cb_type;                 /* Control Block Type                      */
N  struct OS_TCB *p_lnk;           /* Link pointer for ready/sem. wait list   */
N  struct OS_TCB *p_rlnk;          /* Link pointer for sem./mbx lst backwards */
N  struct OS_TCB *p_dlnk;          /* Link pointer for delay list             */
N  struct OS_TCB *p_blnk;          /* Link pointer for delay list backwards   */
N  U16    delta_time;              /* Time until time out                     */
N} *P_XCB;
N
Ntypedef struct OS_MCB {
N  U8     cb_type;                 /* Control Block Type                      */
N  U8     isr_st;                  /* State flag variable for isr functions   */
N  struct OS_TCB *p_lnk;           /* Chain of tasks waiting for message      */
N  U16    first;                   /* Index of the message list begin         */
N  U16    last;                    /* Index of the message list end           */
N  U16    count;                   /* Actual number of stored messages        */
N  U16    size;                    /* Maximum number of stored messages       */
N  void   *msg[1];                 /* FIFO for Message pointers 1st element   */
N} *P_MCB;
N
Ntypedef struct OS_SCB {
N  U8     cb_type;                 /* Control Block Type                      */
N  U16    tokens;                  /* Semaphore tokens                        */
N  struct OS_TCB *p_lnk;           /* Chain of tasks waiting for tokens       */
N} *P_SCB;
N
Ntypedef struct OS_MUCB {
N  U8     cb_type;                 /* Control Block Type                      */
N  U16    level;                   /* Call nesting level                      */
N  struct OS_TCB *p_lnk;           /* Chain of tasks waiting for mutex        */
N  struct OS_TCB *owner;           /* Mutex owner task                        */
N  struct OS_MUCB *p_mlnk;         /* Chain of mutexes by owner task          */
N} *P_MUCB;
N
Ntypedef struct OS_XTMR {
N  struct OS_TMR  *next;
N  U16    tcnt;
N} *P_XTMR;
N
Ntypedef struct OS_TMR {
N  struct OS_TMR  *next;           /* Link pointer to Next timer              */
N  U16    tcnt;                    /* Timer delay count                       */
N  U16    info;                    /* User defined call info                  */
N} *P_TMR;
N
Ntypedef struct OS_BM {
N  void *free;                     /* Pointer to first free memory block      */
N  void *end;                      /* Pointer to memory block end             */
N  U32  blk_size;                  /* Memory block size                       */
N} *P_BM;
N
N/* Definitions */
N#define __TRUE          1
N#define __FALSE         0
N#define NULL            ((void *) 0)
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N
L 13 "..\..\RTX\src\rt_Timer.c" 2
N#include "RTX_Config.h"
L 1 "..\..\RTX\inc\RTX_Config.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - RTX
N *----------------------------------------------------------------------------
N *      Name:    RTX_CONFIG.H
N *      Purpose: Exported functions of RTX_Config.c
N *      Rev.:    V4.70
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N
N/* Error Codes */
N#define OS_ERR_STK_OVF          1
N#define OS_ERR_FIFO_OVF         2
N#define OS_ERR_MBX_OVF          3
N
N/* Definitions */
N#define BOX_ALIGN_8                   0x80000000
N#define _declare_box(pool,size,cnt)   U32 pool[(((size)+3)/4)*(cnt) + 3]
N#define _declare_box8(pool,size,cnt)  U64 pool[(((size)+7)/8)*(cnt) + 2]
N#define _init_box8(pool,size,bsize)   _init_box (pool,size,(bsize) | BOX_ALIGN_8)
N
N/* Variables */
Nextern U32 mp_tcb[];
Nextern U64 mp_stk[];
Nextern U32 os_fifo[];
Nextern void *os_active_TCB[];
N
N/* Constants */
Nextern U16 const os_maxtaskrun;
Nextern U32 const os_trv;
Nextern U8  const os_flags;
Nextern U32 const os_stackinfo;
Nextern U32 const os_rrobin;
Nextern U32 const os_clockrate;
Nextern U32 const os_timernum;
Nextern U16 const mp_tcb_size;
Nextern U32 const mp_stk_size;
Nextern U32 const *m_tmr;
Nextern U16 const mp_tmr_size;
Nextern U8  const os_fifo_size;
N
N/* Functions */
Nextern void os_idle_demon   (void);
Nextern int  os_tick_init    (void);
Nextern void os_tick_irqack  (void);
Nextern void os_tmr_call     (U16  info);
Nextern void os_error        (U32 err_code);
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
L 14 "..\..\RTX\src\rt_Timer.c" 2
N#include "rt_Timer.h"
L 1 "..\..\RTX\inc\rt_Timer.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - RTX
N *----------------------------------------------------------------------------
N *      Name:    RT_TIMER.H
N *      Purpose: User timer functions
N *      Rev.:    V4.70
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N/* Variables */
Nextern struct OS_XTMR os_tmr;
N
N/* Functions */
Nextern void  rt_tmr_tick   (void);
Nextern OS_ID rt_tmr_create (U16 tcnt, U16 info);
Nextern OS_ID rt_tmr_kill   (OS_ID timer);
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N
L 15 "..\..\RTX\src\rt_Timer.c" 2
N#include "rt_MemBox.h"
L 1 "..\..\RTX\inc\rt_MemBox.h" 1
N/*----------------------------------------------------------------------------
N *      RL-ARM - RTX
N *----------------------------------------------------------------------------
N *      Name:    RT_MEMBOX.H
N *      Purpose: Interface functions for fixed memory block management system
N *      Rev.:    V4.70
N *----------------------------------------------------------------------------
N *      This code is part of the RealView Run-Time Library.
N *      Copyright (c) 2004-2013 KEIL - An ARM Company. All rights reserved.
N *---------------------------------------------------------------------------*/
N
N/* Functions */
N#define rt_init_box     _init_box
N#define rt_calloc_box   _calloc_box
Nextern int     _init_box   (void *box_mem, U32 box_size, U32 blk_size);
Nextern void *rt_alloc_box  (void *box_mem);
Nextern void *  _calloc_box (void *box_mem);
Nextern int   rt_free_box   (void *box_mem, void *box);
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
N
L 16 "..\..\RTX\src\rt_Timer.c" 2
N
N
N/*----------------------------------------------------------------------------
N *      Global Variables
N *---------------------------------------------------------------------------*/
N
N/* User Timer list pointer */
Nstruct OS_XTMR os_tmr;
N
N/*----------------------------------------------------------------------------
N *      Functions
N *---------------------------------------------------------------------------*/
N
N/*--------------------------- rt_tmr_tick -----------------------------------*/
N
Nvoid rt_tmr_tick (void) {
N  /* Decrement delta count of timer list head. Timers having the value of   */
N  /* zero are removed from the list and the callback function is called.    */
N  P_TMR p;
N
N  if (os_tmr.next == NULL) {
X  if (os_tmr.next == ((void *) 0)) {
N    return;
N  }
N  os_tmr.tcnt--;
N  while (os_tmr.tcnt == 0 && (p = os_tmr.next) != NULL) {
X  while (os_tmr.tcnt == 0 && (p = os_tmr.next) != ((void *) 0)) {
N    /* Call a user provided function to handle an elapsed timer */
N    os_tmr_call (p->info);
N    os_tmr.tcnt = p->tcnt;
N    os_tmr.next = p->next;
N    rt_free_box ((U32 *)m_tmr, p);
N  }
N}
N
N/*--------------------------- rt_tmr_create ---------------------------------*/
N
NOS_ID rt_tmr_create (U16 tcnt, U16 info)  {
N  /* Create an user timer and put it into the chained timer list using      */
N  /* a timeout count value of "tcnt". User parameter "info" is used as a    */
N  /* parameter for the user provided callback function "os_tmr_call ()".    */
N  P_TMR p_tmr, p;
N  U32 delta,itcnt = tcnt;
N
N  if (tcnt == 0 || m_tmr == NULL)  {
X  if (tcnt == 0 || m_tmr == ((void *) 0))  {
N    return (NULL);
X    return (((void *) 0));
N  }
N  p_tmr = rt_alloc_box ((U32 *)m_tmr);
N  if (!p_tmr)  {
N    return (NULL);
X    return (((void *) 0));
N  }
N  p_tmr->info = info;
N  p = (P_TMR)&os_tmr;
N  delta = p->tcnt;
N  while (delta < itcnt && p->next != NULL) {
X  while (delta < itcnt && p->next != ((void *) 0)) {
N    p = p->next;
N    delta += p->tcnt;
N  }
N  /* Right place found, insert timer into the list */
N  p_tmr->next = p->next;
N  p_tmr->tcnt = (U16)(delta - itcnt);
N  p->next = p_tmr;
N  p->tcnt -= p_tmr->tcnt;
N  return (p_tmr);
N}
N
N/*--------------------------- rt_tmr_kill -----------------------------------*/
N
NOS_ID rt_tmr_kill (OS_ID timer)  {
N  /* Remove user timer from the chained timer list. */
N  P_TMR p, p_tmr;
N
N  p_tmr = (P_TMR)timer;
N  p = (P_TMR)&os_tmr;
N  /* Search timer list for requested timer */
N  while (p->next != p_tmr)  {
N    if (p->next == NULL) {
X    if (p->next == ((void *) 0)) {
N      /* Failed, "timer" is not in the timer list */
N      return (p_tmr);
N    }
N    p = p->next;
N  }
N  /* Timer was found, remove it from the list */
N  p->next = p_tmr->next;
N  p->tcnt += p_tmr->tcnt;
N  rt_free_box ((U32 *)m_tmr, p_tmr);
N  /* Timer killed */
N  return (NULL);
X  return (((void *) 0));
N}
N
N/*----------------------------------------------------------------------------
N * end of file
N *---------------------------------------------------------------------------*/
