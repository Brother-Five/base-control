; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_time.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_time.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rt_time.crf ..\..\RTX\src\rt_Time.c]
                          THUMB

                          AREA ||i.rt_dly_wait||, CODE, READONLY, ALIGN=1

                  rt_dly_wait PROC
;;;39     
;;;40     void rt_dly_wait (U16 delay_time) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;41       /* Delay task by "delay_time" */
;;;42       rt_block (delay_time, WAIT_DLY);
000004  2103              MOVS     r1,#3
000006  4620              MOV      r0,r4
000008  f7fffffe          BL       rt_block
;;;43     }
00000c  bd10              POP      {r4,pc}
;;;44     
                          ENDP


                          AREA ||i.rt_itv_set||, CODE, READONLY, ALIGN=2

                  rt_itv_set PROC
;;;47     
;;;48     void rt_itv_set (U16 interval_time) {
000000  4904              LDR      r1,|L2.20|
;;;49       /* Set interval length and define start of first interval */
;;;50       os_tsk.run->interval_time = interval_time;
000002  6809              LDR      r1,[r1,#0]  ; os_tsk
000004  82c8              STRH     r0,[r1,#0x16]
;;;51       os_tsk.run->delta_time = interval_time + (U16)os_time;
000006  4904              LDR      r1,|L2.24|
000008  8809              LDRH     r1,[r1,#0]  ; os_time
00000a  4401              ADD      r1,r1,r0
00000c  4a01              LDR      r2,|L2.20|
00000e  6812              LDR      r2,[r2,#0]  ; os_tsk
000010  8291              STRH     r1,[r2,#0x14]
;;;52     }
000012  4770              BX       lr
;;;53     
                          ENDP

                  |L2.20|
                          DCD      os_tsk
                  |L2.24|
                          DCD      os_time

                          AREA ||i.rt_itv_wait||, CODE, READONLY, ALIGN=2

                  rt_itv_wait PROC
;;;56     
;;;57     void rt_itv_wait (void) {
000000  b510              PUSH     {r4,lr}
;;;58       /* Wait for interval end and define start of next one */
;;;59       U16 delta;
;;;60     
;;;61       delta = os_tsk.run->delta_time - (U16)os_time;
000002  480c              LDR      r0,|L3.52|
000004  6800              LDR      r0,[r0,#0]  ; os_tsk
000006  8a80              LDRH     r0,[r0,#0x14]
000008  490b              LDR      r1,|L3.56|
00000a  8809              LDRH     r1,[r1,#0]  ; os_time
00000c  1a40              SUBS     r0,r0,r1
00000e  b284              UXTH     r4,r0
;;;62       os_tsk.run->delta_time += os_tsk.run->interval_time;
000010  4808              LDR      r0,|L3.52|
000012  6800              LDR      r0,[r0,#0]  ; os_tsk
000014  8a80              LDRH     r0,[r0,#0x14]
000016  4907              LDR      r1,|L3.52|
000018  6809              LDR      r1,[r1,#0]  ; os_tsk
00001a  8ac9              LDRH     r1,[r1,#0x16]
00001c  4408              ADD      r0,r0,r1
00001e  4905              LDR      r1,|L3.52|
000020  6809              LDR      r1,[r1,#0]  ; os_tsk
000022  8288              STRH     r0,[r1,#0x14]
;;;63       if ((delta & 0x8000) == 0) {
000024  f4044000          AND      r0,r4,#0x8000
000028  b918              CBNZ     r0,|L3.50|
;;;64         rt_block (delta, WAIT_ITV);
00002a  2104              MOVS     r1,#4
00002c  4620              MOV      r0,r4
00002e  f7fffffe          BL       rt_block
                  |L3.50|
;;;65       }
;;;66     }
000032  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  |L3.52|
                          DCD      os_tsk
                  |L3.56|
                          DCD      os_time

                          AREA ||i.rt_time_get||, CODE, READONLY, ALIGN=2

                  rt_time_get PROC
;;;31     
;;;32     U32 rt_time_get (void) {
000000  4801              LDR      r0,|L4.8|
;;;33       /* Get system time tick */
;;;34       return (os_time);
000002  6800              LDR      r0,[r0,#0]  ; os_time
;;;35     }
000004  4770              BX       lr
;;;36     
                          ENDP

000006  0000              DCW      0x0000
                  |L4.8|
                          DCD      os_time

                          AREA ||.data||, DATA, ALIGN=2

                  os_time
                          DCD      0x00000000
