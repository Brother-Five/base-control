; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\cpid.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\cpid.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\cpid.crf ..\..\MySrc\cpid.cpp]
                          THUMB

                          AREA ||i._Z3TRIffff||, CODE, READONLY, ALIGN=2

                  _Z3TRIffff PROC ; TRI(float, float, float, float)
;;;361    
;;;362    float TRI(float X,float DOWN,float MID,float UP)
000000  eeb02a40          VMOV.F32 s4,s0
;;;363    {
;;;364    	if( X >= DOWN && X <= UP)
000004  eeb42ae0          VCMPE.F32 s4,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  db1b              BLT      |L1.70|
00000e  eeb42ae1          VCMPE.F32 s4,s3
000012  eef1fa10          VMRS     APSR_nzcv,FPSCR
000016  d816              BHI      |L1.70|
;;;365    		return ( 1 - myabs(X - MID)/( MID - DOWN) );
000018  ee320a41          VSUB.F32 s0,s4,s2
00001c  eeb50ac0          VCMPE.F32 s0,#0.0
000020  eef1fa10          VMRS     APSR_nzcv,FPSCR
000024  dd02              BLE      |L1.44|
000026  ee320a41          VSUB.F32 s0,s4,s2
00002a  e003              B        |L1.52|
                  |L1.44|
00002c  ee320a41          VSUB.F32 s0,s4,s2
000030  eeb10a40          VNEG.F32 s0,s0
                  |L1.52|
000034  ee313a60          VSUB.F32 s6,s2,s1
000038  eec02a03          VDIV.F32 s5,s0,s6
00003c  eeb70a00          VMOV.F32 s0,#1.00000000
000040  ee300a62          VSUB.F32 s0,s0,s5
                  |L1.68|
;;;366    	else
;;;367    		return 0;
;;;368    }
000044  4770              BX       lr
                  |L1.70|
000046  ed9f0a01          VLDR     s0,|L1.76|
00004a  e7fb              B        |L1.68|
;;;369    float LAD_DOWN(float X,float MID,float UP)
                          ENDP

                  |L1.76|
00004c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z6LAD_UPfff||, CODE, READONLY, ALIGN=2

                  _Z6LAD_UPfff PROC ; LAD_UP(float, float, float)
;;;378    
;;;379    float LAD_UP(float X,float DOWN,float MID)
000000  eef01a40          VMOV.F32 s3,s0
;;;380    {
;;;381    	if(	X >= MID)
000004  eef41ac1          VCMPE.F32 s3,s2
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  db02              BLT      |L2.20|
;;;382    		return 1.0f;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
                  |L2.18|
;;;383    	else if( X >= DOWN )
;;;384    		return (X - DOWN) / (MID - DOWN);
;;;385    	else
;;;386    		return 0;
;;;387    }
000012  4770              BX       lr
                  |L2.20|
000014  eef41ae0          VCMPE.F32 s3,s1                 ;383
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;383
00001c  db06              BLT      |L2.44|
00001e  ee312ae0          VSUB.F32 s4,s3,s1              ;384
000022  ee712a60          VSUB.F32 s5,s2,s1              ;384
000026  ee820a22          VDIV.F32 s0,s4,s5              ;384
00002a  e7f2              B        |L2.18|
                  |L2.44|
00002c  ed9f0a01          VLDR     s0,|L2.52|
000030  e7ef              B        |L2.18|
;;;388    
                          ENDP

000032  0000              DCW      0x0000
                  |L2.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._Z8LAD_DOWNfff||, CODE, READONLY, ALIGN=2

                  _Z8LAD_DOWNfff PROC ; LAD_DOWN(float, float, float)
;;;368    }
;;;369    float LAD_DOWN(float X,float MID,float UP)
000000  eef01a40          VMOV.F32 s3,s0
;;;370    {
;;;371    	if(	X <= MID)
000004  eef41ae0          VCMPE.F32 s3,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  d802              BHI      |L3.20|
;;;372    		return 1.0f;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
                  |L3.18|
;;;373    	else if( X <= UP )
;;;374    		return (X - UP) / (MID - UP);
;;;375    	else
;;;376    		return 0;
;;;377    }
000012  4770              BX       lr
                  |L3.20|
000014  eef41ac1          VCMPE.F32 s3,s2                 ;373
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;373
00001c  d806              BHI      |L3.44|
00001e  ee312ac1          VSUB.F32 s4,s3,s2              ;374
000022  ee702ac1          VSUB.F32 s5,s1,s2              ;374
000026  ee820a22          VDIV.F32 s0,s4,s5              ;374
00002a  e7f2              B        |L3.18|
                  |L3.44|
00002c  ed9f0a01          VLDR     s0,|L3.52|
000030  e7ef              B        |L3.18|
;;;378    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
000034  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN4CPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN4CPID9AdjustPIDEv PROC ; CPID::AdjustPID()
;;;114    
;;;115    void CPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;116    {
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
;;;117    	float now_error;
;;;118    
;;;119    	if(UpdataTimeStamp()) return;
000008  f104005c          ADD      r0,r4,#0x5c
00000c  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
000010  b110              CBZ      r0,|L4.24|
                  |L4.18|
;;;120    
;;;121    
;;;122    	now_error = Target - Current;
;;;123    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;124    	
;;;125    
;;;126    	//P
;;;127    	PTerm = Kp * now_error;
;;;128    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;129    
;;;130    	//I
;;;131    
;;;132    	ITerm +=  Ki * now_error * dt;
;;;133    
;;;134    	ITerm = Constrain(ITerm, Rii, Ria);
;;;135    
;;;136    
;;;137    
;;;138    	Omega = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,Omega);
;;;139    	DTerm =   Kd * (Omega - Omega_Offset);
;;;140    	Out = PTerm + ITerm + DTerm;
;;;141    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;142    
;;;143    	if(myabs(now_error) <= DeadZone)
;;;144    	{
;;;145    		counter++;
;;;146    		if(counter >= 1024)
;;;147    			counter = 1024;
;;;148    	}
;;;149    	else
;;;150    	{
;;;151    		counter--;
;;;152    		if(counter <= 0)
;;;153    			counter = 0;
;;;154    	}
;;;155    	if(counter >= 1000)
;;;156    	{
;;;157    		Out = 0;
;;;158    		ITerm = 0;
;;;159    	}
;;;160    }
000012  ecbd8b02          VPOP     {d8}
000016  bd10              POP      {r4,pc}
                  |L4.24|
000018  ed940a01          VLDR     s0,[r4,#4]            ;122
00001c  edd40a02          VLDR     s1,[r4,#8]            ;122
000020  ee300a60          VSUB.F32 s0,s0,s1              ;122
000024  eeb08a40          VMOV.F32 s16,s0                ;122
000028  eeb00a48          VMOV.F32 s0,s16                ;123
00002c  2205              MOVS     r2,#5                 ;123
00002e  f104016c          ADD      r1,r4,#0x6c           ;123
000032  1d08              ADDS     r0,r1,#4              ;123
000034  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000038  eeb08a40          VMOV.F32 s16,s0                ;123
00003c  ed940a08          VLDR     s0,[r4,#0x20]         ;127
000040  ee200a08          VMUL.F32 s0,s0,s16             ;127
000044  ed840a05          VSTR     s0,[r4,#0x14]         ;127
000048  edd41a0f          VLDR     s3,[r4,#0x3c]         ;128
00004c  eeb01a61          VMOV.F32 s2,s3                 ;128
000050  edd41a0b          VLDR     s3,[r4,#0x2c]         ;128
000054  eef00a61          VMOV.F32 s1,s3                 ;128
000058  edd41a05          VLDR     s3,[r4,#0x14]         ;128
00005c  eeb00a61          VMOV.F32 s0,s3                 ;128
000060  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000064  ed840a05          VSTR     s0,[r4,#0x14]         ;128
000068  ed940a06          VLDR     s0,[r4,#0x18]         ;132
00006c  edd40a09          VLDR     s1,[r4,#0x24]         ;132
000070  ee600a88          VMUL.F32 s1,s1,s16             ;132
000074  ed941a17          VLDR     s2,[r4,#0x5c]         ;132
000078  ee000a81          VMLA.F32 s0,s1,s2              ;132
00007c  ed840a06          VSTR     s0,[r4,#0x18]         ;132
000080  edd41a10          VLDR     s3,[r4,#0x40]         ;134
000084  eeb01a61          VMOV.F32 s2,s3                 ;134
000088  edd41a0c          VLDR     s3,[r4,#0x30]         ;134
00008c  eef00a61          VMOV.F32 s1,s3                 ;134
000090  edd41a06          VLDR     s3,[r4,#0x18]         ;134
000094  eeb00a61          VMOV.F32 s0,s3                 ;134
000098  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00009c  ed840a06          VSTR     s0,[r4,#0x18]         ;134
0000a0  edd40a19          VLDR     s1,[r4,#0x64]         ;138
0000a4  eeb00a60          VMOV.F32 s0,s1                 ;138
0000a8  2205              MOVS     r2,#5                 ;138
0000aa  f104016d          ADD      r1,r4,#0x6d           ;138
0000ae  f1040084          ADD      r0,r4,#0x84           ;138
0000b2  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
0000b6  ed840a19          VSTR     s0,[r4,#0x64]         ;138
0000ba  ed940a19          VLDR     s0,[r4,#0x64]         ;139
0000be  edd40a1a          VLDR     s1,[r4,#0x68]         ;139
0000c2  ee300a60          VSUB.F32 s0,s0,s1              ;139
0000c6  edd40a0a          VLDR     s1,[r4,#0x28]         ;139
0000ca  ee200a20          VMUL.F32 s0,s0,s1              ;139
0000ce  ed840a07          VSTR     s0,[r4,#0x1c]         ;139
0000d2  ed940a05          VLDR     s0,[r4,#0x14]         ;140
0000d6  edd40a06          VLDR     s1,[r4,#0x18]         ;140
0000da  ee300a20          VADD.F32 s0,s0,s1              ;140
0000de  edd40a07          VLDR     s1,[r4,#0x1c]         ;140
0000e2  ee300a20          VADD.F32 s0,s0,s1              ;140
0000e6  ed840a03          VSTR     s0,[r4,#0xc]          ;140
0000ea  edd40a03          VLDR     s1,[r4,#0xc]          ;141
0000ee  eeb00a60          VMOV.F32 s0,s1                 ;141
0000f2  2205              MOVS     r2,#5                 ;141
0000f4  f104016e          ADD      r1,r4,#0x6e           ;141
0000f8  f1040098          ADD      r0,r4,#0x98           ;141
0000fc  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000100  ed840a03          VSTR     s0,[r4,#0xc]          ;141
000104  eeb58ac0          VCMPE.F32 s16,#0.0              ;143
000108  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;143
00010c  dd02              BLE      |L4.276|
00010e  eeb00a48          VMOV.F32 s0,s16                ;143
000112  e001              B        |L4.280|
                  |L4.276|
000114  eeb10a48          VNEG.F32 s0,s16                ;143
                  |L4.280|
000118  edd40a13          VLDR     s1,[r4,#0x4c]         ;143
00011c  eeb40ae0          VCMPE.F32 s0,s1                 ;143
000120  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;143
000124  d80e              BHI      |L4.324|
000126  f8340f50          LDRH     r0,[r4,#0x50]!        ;145
00012a  1c40              ADDS     r0,r0,#1              ;145
00012c  b200              SXTH     r0,r0                 ;145
00012e  8020              STRH     r0,[r4,#0]            ;145
000130  f9340950          LDRSH    r0,[r4],#-0x50        ;146
000134  f5b06f80          CMP      r0,#0x400             ;146
000138  db10              BLT      |L4.348|
00013a  f44f6080          MOV      r0,#0x400             ;147
00013e  f8a40050          STRH     r0,[r4,#0x50]         ;147
000142  e00b              B        |L4.348|
                  |L4.324|
000144  f8340f50          LDRH     r0,[r4,#0x50]!        ;151
000148  1e40              SUBS     r0,r0,#1              ;151
00014a  b200              SXTH     r0,r0                 ;151
00014c  8020              STRH     r0,[r4,#0]            ;151
00014e  f9340950          LDRSH    r0,[r4],#-0x50        ;152
000152  2800              CMP      r0,#0                 ;152
000154  dc02              BGT      |L4.348|
000156  2000              MOVS     r0,#0                 ;153
000158  f8a40050          STRH     r0,[r4,#0x50]         ;153
                  |L4.348|
00015c  f9b40050          LDRSH    r0,[r4,#0x50]         ;155
000160  f5b07f7a          CMP      r0,#0x3e8             ;155
000164  db07              BLT      |L4.374|
000166  ed9f0a05          VLDR     s0,|L4.380|
00016a  ed840a03          VSTR     s0,[r4,#0xc]          ;157
00016e  ed9f0a03          VLDR     s0,|L4.380|
000172  ed840a06          VSTR     s0,[r4,#0x18]         ;158
                  |L4.374|
000176  bf00              NOP      
000178  e74b              B        |L4.18|
;;;161    
                          ENDP

00017a  0000              DCW      0x0000
                  |L4.380|
00017c  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN5SCPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN5SCPID9AdjustPIDEv PROC ; SCPID::AdjustPID()
;;;162    
;;;163    void SCPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;164    {
000002  4604              MOV      r4,r0
;;;165    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L5.16|
                  |L5.14|
;;;166    
;;;167    	last_error = now_error;
;;;168    	now_error = Target - Current;
;;;169    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;170    
;;;171    	//P
;;;172    	PTerm = Kp * now_error;
;;;173    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;174    
;;;175    	//I
;;;176    	ITerm +=  Ki * now_error * dt;
;;;177    	ITerm = Constrain(ITerm, Rii, Ria);
;;;178    
;;;179    	//D
;;;180    	DTerm =   Kd * (now_error - last_error)/dt;
;;;181    	DTerm = Constrain(DTerm, Rdi, Rda);
;;;182    	DTerm = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,DTerm);//滤波，输出更加平滑
;;;183    
;;;184    	Out = PTerm + ITerm + DTerm;
;;;185    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;186    	
;;;187    	if(myabs(now_error) <= DeadZone)
;;;188    	{
;;;189    		counter++;
;;;190    		if(counter >= 1024)
;;;191    			counter = 1024;
;;;192    	}
;;;193    	else
;;;194    	{
;;;195    		counter--;
;;;196    		if(counter <= 0)
;;;197    			counter = 0;
;;;198    	}
;;;199    	if(counter >= 1000)
;;;200    	{
;;;201    		Out = 0;
;;;202    		ITerm = 0;
;;;203    	}
;;;204    }
00000e  bd10              POP      {r4,pc}
                  |L5.16|
000010  ed940a15          VLDR     s0,[r4,#0x54]         ;167
000014  ed840a16          VSTR     s0,[r4,#0x58]         ;167
000018  ed940a01          VLDR     s0,[r4,#4]            ;168
00001c  edd40a02          VLDR     s1,[r4,#8]            ;168
000020  ee300a60          VSUB.F32 s0,s0,s1              ;168
000024  ed840a15          VSTR     s0,[r4,#0x54]         ;168
000028  edd40a15          VLDR     s1,[r4,#0x54]         ;169
00002c  eeb00a60          VMOV.F32 s0,s1                 ;169
000030  2205              MOVS     r2,#5                 ;169
000032  f1040164          ADD      r1,r4,#0x64           ;169
000036  1d08              ADDS     r0,r1,#4              ;169
000038  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00003c  ed840a15          VSTR     s0,[r4,#0x54]         ;169
000040  ed940a08          VLDR     s0,[r4,#0x20]         ;172
000044  edd40a15          VLDR     s1,[r4,#0x54]         ;172
000048  ee200a20          VMUL.F32 s0,s0,s1              ;172
00004c  ed840a05          VSTR     s0,[r4,#0x14]         ;172
000050  edd41a0f          VLDR     s3,[r4,#0x3c]         ;173
000054  eeb01a61          VMOV.F32 s2,s3                 ;173
000058  edd41a0b          VLDR     s3,[r4,#0x2c]         ;173
00005c  eef00a61          VMOV.F32 s1,s3                 ;173
000060  edd41a05          VLDR     s3,[r4,#0x14]         ;173
000064  eeb00a61          VMOV.F32 s0,s3                 ;173
000068  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00006c  ed840a05          VSTR     s0,[r4,#0x14]         ;173
000070  ed940a09          VLDR     s0,[r4,#0x24]         ;176
000074  edd40a15          VLDR     s1,[r4,#0x54]         ;176
000078  ee600a20          VMUL.F32 s1,s0,s1              ;176
00007c  ed941a17          VLDR     s2,[r4,#0x5c]         ;176
000080  ed940a06          VLDR     s0,[r4,#0x18]         ;176
000084  ee000a81          VMLA.F32 s0,s1,s2              ;176
000088  ed840a06          VSTR     s0,[r4,#0x18]         ;176
00008c  edd41a10          VLDR     s3,[r4,#0x40]         ;177
000090  eeb01a61          VMOV.F32 s2,s3                 ;177
000094  edd41a0c          VLDR     s3,[r4,#0x30]         ;177
000098  eef00a61          VMOV.F32 s1,s3                 ;177
00009c  edd41a06          VLDR     s3,[r4,#0x18]         ;177
0000a0  eeb00a61          VMOV.F32 s0,s3                 ;177
0000a4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000a8  ed840a06          VSTR     s0,[r4,#0x18]         ;177
0000ac  ed940a15          VLDR     s0,[r4,#0x54]         ;180
0000b0  edd40a16          VLDR     s1,[r4,#0x58]         ;180
0000b4  ee300a60          VSUB.F32 s0,s0,s1              ;180
0000b8  edd40a0a          VLDR     s1,[r4,#0x28]         ;180
0000bc  ee200a20          VMUL.F32 s0,s0,s1              ;180
0000c0  edd40a17          VLDR     s1,[r4,#0x5c]         ;180
0000c4  ee801a20          VDIV.F32 s2,s0,s1              ;180
0000c8  ed841a07          VSTR     s2,[r4,#0x1c]         ;180
0000cc  edd41a11          VLDR     s3,[r4,#0x44]         ;181
0000d0  eeb01a61          VMOV.F32 s2,s3                 ;181
0000d4  edd41a0d          VLDR     s3,[r4,#0x34]         ;181
0000d8  eef00a61          VMOV.F32 s1,s3                 ;181
0000dc  edd41a07          VLDR     s3,[r4,#0x1c]         ;181
0000e0  eeb00a61          VMOV.F32 s0,s3                 ;181
0000e4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000e8  ed840a07          VSTR     s0,[r4,#0x1c]         ;181
0000ec  edd40a07          VLDR     s1,[r4,#0x1c]         ;182
0000f0  eeb00a60          VMOV.F32 s0,s1                 ;182
0000f4  2205              MOVS     r2,#5                 ;182
0000f6  f1040165          ADD      r1,r4,#0x65           ;182
0000fa  f104007c          ADD      r0,r4,#0x7c           ;182
0000fe  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000102  ed840a07          VSTR     s0,[r4,#0x1c]         ;182
000106  ed940a05          VLDR     s0,[r4,#0x14]         ;184
00010a  edd40a06          VLDR     s1,[r4,#0x18]         ;184
00010e  ee300a20          VADD.F32 s0,s0,s1              ;184
000112  edd40a07          VLDR     s1,[r4,#0x1c]         ;184
000116  ee300a20          VADD.F32 s0,s0,s1              ;184
00011a  ed840a03          VSTR     s0,[r4,#0xc]          ;184
00011e  edd40a03          VLDR     s1,[r4,#0xc]          ;185
000122  eeb00a60          VMOV.F32 s0,s1                 ;185
000126  2205              MOVS     r2,#5                 ;185
000128  f1040166          ADD      r1,r4,#0x66           ;185
00012c  f1040090          ADD      r0,r4,#0x90           ;185
000130  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000134  ed840a03          VSTR     s0,[r4,#0xc]          ;185
000138  ed940a15          VLDR     s0,[r4,#0x54]         ;187
00013c  eeb50ac0          VCMPE.F32 s0,#0.0               ;187
000140  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;187
000144  dd02              BLE      |L5.332|
000146  ed940a15          VLDR     s0,[r4,#0x54]         ;187
00014a  e003              B        |L5.340|
                  |L5.332|
00014c  ed940a15          VLDR     s0,[r4,#0x54]         ;187
000150  eeb10a40          VNEG.F32 s0,s0                 ;187
                  |L5.340|
000154  edd40a13          VLDR     s1,[r4,#0x4c]         ;187
000158  eeb40ae0          VCMPE.F32 s0,s1                 ;187
00015c  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;187
000160  d80e              BHI      |L5.384|
000162  f8340f50          LDRH     r0,[r4,#0x50]!        ;189
000166  1c40              ADDS     r0,r0,#1              ;189
000168  b200              SXTH     r0,r0                 ;189
00016a  8020              STRH     r0,[r4,#0]            ;189
00016c  f9340950          LDRSH    r0,[r4],#-0x50        ;190
000170  f5b06f80          CMP      r0,#0x400             ;190
000174  db10              BLT      |L5.408|
000176  f44f6080          MOV      r0,#0x400             ;191
00017a  f8a40050          STRH     r0,[r4,#0x50]         ;191
00017e  e00b              B        |L5.408|
                  |L5.384|
000180  f8340f50          LDRH     r0,[r4,#0x50]!        ;195
000184  1e40              SUBS     r0,r0,#1              ;195
000186  b200              SXTH     r0,r0                 ;195
000188  8020              STRH     r0,[r4,#0]            ;195
00018a  f9340950          LDRSH    r0,[r4],#-0x50        ;196
00018e  2800              CMP      r0,#0                 ;196
000190  dc02              BGT      |L5.408|
000192  2000              MOVS     r0,#0                 ;197
000194  f8a40050          STRH     r0,[r4,#0x50]         ;197
                  |L5.408|
000198  f9b40050          LDRSH    r0,[r4,#0x50]         ;199
00019c  f5b07f7a          CMP      r0,#0x3e8             ;199
0001a0  db07              BLT      |L5.434|
0001a2  ed9f0a05          VLDR     s0,|L5.440|
0001a6  ed840a03          VSTR     s0,[r4,#0xc]          ;201
0001aa  ed9f0a03          VLDR     s0,|L5.440|
0001ae  ed840a06          VSTR     s0,[r4,#0x18]         ;202
                  |L5.434|
0001b2  bf00              NOP      
0001b4  e72b              B        |L5.14|
;;;205    
                          ENDP

0001b6  0000              DCW      0x0000
                  |L5.440|
0001b8  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN7PIDBase10SetCurrentEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetCurrentEf PROC ; PIDBase::SetCurrent(float)
;;;44     }
;;;45     void PIDBase::SetCurrent(float current){
000000  ed800a02          VSTR     s0,[r0,#8]
;;;46     	Current = current;
;;;47     }
000004  4770              BX       lr
;;;48     
                          ENDP


                          AREA ||i._ZN7PIDBase10SetDMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetDMaxMinEff PROC ; PIDBase::SetDMaxMin(float, float)
;;;71     }
;;;72     void PIDBase::SetDMaxMin(float m_Rdi, float m_Rda){
000000  ed800a0d          VSTR     s0,[r0,#0x34]
;;;73     	Rdi = m_Rdi;
;;;74     	Rda = m_Rda;
000004  edc00a11          VSTR     s1,[r0,#0x44]
;;;75     	// printf("Rdi:%5.2f\tRda:%5.2f\r\n",this->Rdi,this->Rda);//调试用
;;;76     }
000008  4770              BX       lr
;;;77     
                          ENDP


                          AREA ||i._ZN7PIDBase10SetIMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetIMaxMinEff PROC ; PIDBase::SetIMaxMin(float, float)
;;;66     
;;;67     void PIDBase::SetIMaxMin(float m_Rii, float m_Ria){
000000  ed800a0c          VSTR     s0,[r0,#0x30]
;;;68     	Rii = m_Rii;
;;;69     	Ria = m_Ria;
000004  edc00a10          VSTR     s1,[r0,#0x40]
;;;70     	// printf("Rii:%5.2f\tRia:%5.2f\r\n",this->Rii,this->Ria);//调试用
;;;71     }
000008  4770              BX       lr
;;;72     void PIDBase::SetDMaxMin(float m_Rdi, float m_Rda){
                          ENDP


                          AREA ||i._ZN7PIDBase10SetPMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase10SetPMaxMinEff PROC ; PIDBase::SetPMaxMin(float, float)
;;;60     }
;;;61     void PIDBase::SetPMaxMin(float m_Rpi, float m_Rpa){
000000  ed800a0b          VSTR     s0,[r0,#0x2c]
;;;62     	Rpi = m_Rpi;
;;;63     	Rpa = m_Rpa;
000004  edc00a0f          VSTR     s1,[r0,#0x3c]
;;;64     	// printf("Rpi:%5.2f\tRpa:%5.2f\r\n",this->Rpi,this->Rpa);//调试用
;;;65     }
000008  4770              BX       lr
;;;66     
                          ENDP


                          AREA ||i._ZN7PIDBase11SetDeadZoneEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase11SetDeadZoneEf PROC ; PIDBase::SetDeadZone(float)
;;;77     
;;;78     void PIDBase::SetDeadZone(float m_DeadZone){
000000  ed800a13          VSTR     s0,[r0,#0x4c]
;;;79      	DeadZone = m_DeadZone;
;;;80      	// printf("DeadZone:%5.2f\tD_dt_time:%d\r\n",this->DeadZone,this->D_dt_time);//调试用
;;;81     }
000004  4770              BX       lr
;;;82     
                          ENDP


                          AREA ||i._ZN7PIDBase15SetTargetMaxMinEff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase15SetTargetMaxMinEff PROC ; PIDBase::SetTargetMaxMin(float, float)
;;;55     
;;;56     void PIDBase::SetTargetMaxMin( float m_Ti, float m_Ta){
000000  ed800a0e          VSTR     s0,[r0,#0x38]
;;;57     	Ti = m_Ti;
;;;58     	Ta = m_Ta;
000004  edc00a12          VSTR     s1,[r0,#0x48]
;;;59     	// printf("Ti:%5.2f\tTa:%5.2f\r\n",this->Ti,this->Ta);//调试用
;;;60     }
000008  4770              BX       lr
;;;61     void PIDBase::SetPMaxMin(float m_Rpi, float m_Rpa){
                          ENDP


                          AREA ||i._ZN7PIDBase6SetPIDEfff||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase6SetPIDEfff PROC ; PIDBase::SetPID(float, float, float)
;;;48     
;;;49     void PIDBase::SetPID(float m_Kp, float m_Ki, float m_Kd){
000000  ed800a08          VSTR     s0,[r0,#0x20]
;;;50     	Kp = m_Kp;
;;;51     	Ki = m_Ki;
000004  edc00a09          VSTR     s1,[r0,#0x24]
;;;52     	Kd = m_Kd;
000008  ed801a0a          VSTR     s2,[r0,#0x28]
;;;53     	// printf("P:%5.2f\tI:%5.2f\tD:%5.2f\r\n",this->Kp,this->Ki,this->Kd);//调试用
;;;54     }
00000c  4770              BX       lr
;;;55     
                          ENDP


                          AREA ||i._ZN7PIDBase9SetTargetEf||, CODE, READONLY, ALIGN=1

                  _ZN7PIDBase9SetTargetEf PROC ; PIDBase::SetTarget(float)
;;;41     }
;;;42     void PIDBase::SetTarget(float target){
000000  b510              PUSH     {r4,lr}
000002  ed2d8b02          VPUSH    {d8}
000006  4604              MOV      r4,r0
000008  eeb08a40          VMOV.F32 s16,s0
;;;43     	Target = Constrain(target,Ti,Ta);
00000c  ed940a12          VLDR     s0,[r4,#0x48]
000010  eeb01a40          VMOV.F32 s2,s0
000014  ed940a0e          VLDR     s0,[r4,#0x38]
000018  eef00a40          VMOV.F32 s1,s0
00001c  eeb00a48          VMOV.F32 s0,s16
000020  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000024  ed840a01          VSTR     s0,[r4,#4]
;;;44     }
000028  ecbd8b02          VPOP     {d8}
00002c  bd10              POP      {r4,pc}
;;;45     void PIDBase::SetCurrent(float current){
                          ENDP


                          AREA ||i._ZN7PIDBaseC1Efffffffffffff||, CODE, READONLY, ALIGN=2

                  _ZN7PIDBaseC2Efffffffffffff                  ; Alternate entry point ; PIDBase::PIDBase__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN7PIDBaseC1Efffffffffffff PROC ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;22     
;;;23     PIDBase::PIDBase(float m_Kp, float m_Ki, float m_Kd, float m_Target,
;;;24     float m_Rpi, float m_Rpa, float m_Rii, float m_Ria, float m_Rdi, float m_Rda, float m_Ti, float m_Ta,float m_DeadZone){
;;;25     	Kp       = m_Kp;
;;;26     	Ki       = m_Ki;
;;;27     	Kd       = m_Kd;
;;;28     	Target   = m_Target;
;;;29     	Rpi      = m_Rpi;
;;;30     	Rii      = m_Rii;
;;;31     	Rdi      = m_Rdi;
;;;32     	Rpa      = m_Rpa;
;;;33     	Ria      = m_Ria;
;;;34     	Rda      = m_Rda;
;;;35     	Ti       = m_Ti;
;;;36     	Ta       = m_Ta;
;;;37     	DeadZone = m_DeadZone;
;;;38     	Out      = 0;
;;;39     	MODE     = 0;
;;;40     
;;;41     }
;;;42     void PIDBase::SetTarget(float target){
000000  ed800a08          VSTR     s0,[r0,#0x20]
000004  edc00a09          VSTR     s1,[r0,#0x24]
000008  ed801a0a          VSTR     s2,[r0,#0x28]
00000c  edc01a01          VSTR     s3,[r0,#4]
000010  ed802a0b          VSTR     s4,[r0,#0x2c]
000014  ed803a0c          VSTR     s6,[r0,#0x30]
000018  ed804a0d          VSTR     s8,[r0,#0x34]
00001c  edc02a0f          VSTR     s5,[r0,#0x3c]
000020  edc03a10          VSTR     s7,[r0,#0x40]
000024  edc04a11          VSTR     s9,[r0,#0x44]
000028  ed805a0e          VSTR     s10,[r0,#0x38]
00002c  edc05a12          VSTR     s11,[r0,#0x48]
000030  ed806a13          VSTR     s12,[r0,#0x4c]
000034  eddf6a04          VLDR     s13,|L14.72|
000038  edc06a03          VSTR     s13,[r0,#0xc]
00003c  eddf6a02          VLDR     s13,|L14.72|
000040  edc06a00          VSTR     s13,[r0,#0]
000044  4770              BX       lr
                          ENDP

000046  0000              DCW      0x0000
                  |L14.72|
000048  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN8FUZZYPID8FuzzyPIDEff||, CODE, READONLY, ALIGN=1

                  _ZN8FUZZYPID8FuzzyPIDEff PROC ; FUZZYPID::FuzzyPID(float, float)
;;;209    
;;;210    void FUZZYPID::FuzzyPID(float error,float errorC)
000000  b510              PUSH     {r4,lr}
;;;211    {
000002  ed2d8b08          VPUSH    {d8-d11}
000006  4604              MOV      r4,r0
000008  eeb09a40          VMOV.F32 s18,s0
00000c  eef0ba60          VMOV.F32 s23,s1
;;;212    	float Ux_S,Ux_M,Ux_B;
;;;213    	float kp,ki,kd;
;;;214    	Ux_S  = LAD_DOWN(myabs(error),this->NS_PS,this->NM_PM);
000010  edd41a1c          VLDR     s3,[r4,#0x70]
000014  eeb01a61          VMOV.F32 s2,s3
000018  edd41a1d          VLDR     s3,[r4,#0x74]
00001c  eef00a61          VMOV.F32 s1,s3
000020  eeb59ac0          VCMPE.F32 s18,#0.0
000024  eef1fa10          VMRS     APSR_nzcv,FPSCR
000028  dd02              BLE      |L15.48|
00002a  eef01a49          VMOV.F32 s3,s18
00002e  e001              B        |L15.52|
                  |L15.48|
000030  eef11a49          VNEG.F32 s3,s18
                  |L15.52|
000034  eeb00a61          VMOV.F32 s0,s3
000038  f7fffffe          BL       _Z8LAD_DOWNfff ; LAD_DOWN(float, float, float)
00003c  eeb08a40          VMOV.F32 s16,s0
;;;215    	Ux_M  = TRI(myabs(error),this->NS_PS,this->NM_PM,this->NB_PB);
000040  ed942a1b          VLDR     s4,[r4,#0x6c]
000044  eef01a42          VMOV.F32 s3,s4
000048  ed942a1c          VLDR     s4,[r4,#0x70]
00004c  eeb01a42          VMOV.F32 s2,s4
000050  ed942a1d          VLDR     s4,[r4,#0x74]
000054  eef00a42          VMOV.F32 s1,s4
000058  eeb59ac0          VCMPE.F32 s18,#0.0
00005c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000060  dd02              BLE      |L15.104|
000062  eeb02a49          VMOV.F32 s4,s18
000066  e001              B        |L15.108|
                  |L15.104|
000068  eeb12a49          VNEG.F32 s4,s18
                  |L15.108|
00006c  eeb00a42          VMOV.F32 s0,s4
000070  f7fffffe          BL       _Z3TRIffff ; TRI(float, float, float, float)
000074  eef08a40          VMOV.F32 s17,s0
;;;216    	Ux_B  = LAD_UP(myabs(error),this->NM_PM,this->NB_PB);
000078  edd41a1b          VLDR     s3,[r4,#0x6c]
00007c  eeb01a61          VMOV.F32 s2,s3
000080  edd41a1c          VLDR     s3,[r4,#0x70]
000084  eef00a61          VMOV.F32 s1,s3
000088  eeb59ac0          VCMPE.F32 s18,#0.0
00008c  eef1fa10          VMRS     APSR_nzcv,FPSCR
000090  dd02              BLE      |L15.152|
000092  eef01a49          VMOV.F32 s3,s18
000096  e001              B        |L15.156|
                  |L15.152|
000098  eef11a49          VNEG.F32 s3,s18
                  |L15.156|
00009c  eeb00a61          VMOV.F32 s0,s3
0000a0  f7fffffe          BL       _Z6LAD_UPfff ; LAD_UP(float, float, float)
0000a4  eef09a40          VMOV.F32 s19,s0
;;;217    
;;;218    	// Ux_S  = LAD_DOWN(myabs(error),this->NS_PS,this->NM_PM);
;;;219    	// Ux_M  = TRI(myabs(error),this->NS_PS,this->NM_PM,this->NB_PB);
;;;220    	// Ux_B  = LAD_UP(myabs(error),this->NM_PM,this->NB_PB);
;;;221    
;;;222    	kp = (Ux_S * this->NS_PS_kp + Ux_M * this->NM_PM_kp + Ux_B * this->NB_PB_kp)/(Ux_S + Ux_M + Ux_B);
0000a8  ed940a20          VLDR     s0,[r4,#0x80]
0000ac  ee200a08          VMUL.F32 s0,s0,s16
0000b0  edd40a1f          VLDR     s1,[r4,#0x7c]
0000b4  ee080aa0          VMLA.F32 s0,s17,s1
0000b8  edd40a1e          VLDR     s1,[r4,#0x78]
0000bc  ee090aa0          VMLA.F32 s0,s19,s1
0000c0  ee780a28          VADD.F32 s1,s16,s17
0000c4  ee700aa9          VADD.F32 s1,s1,s19
0000c8  ee80aa20          VDIV.F32 s20,s0,s1
;;;223    	ki = (Ux_S * this->NS_PS_ki + Ux_M * this->NM_PM_ki + Ux_B * this->NB_PB_ki)/(Ux_S + Ux_M + Ux_B);
0000cc  ed940a23          VLDR     s0,[r4,#0x8c]
0000d0  ee200a08          VMUL.F32 s0,s0,s16
0000d4  edd40a22          VLDR     s1,[r4,#0x88]
0000d8  ee080aa0          VMLA.F32 s0,s17,s1
0000dc  edd40a21          VLDR     s1,[r4,#0x84]
0000e0  ee090aa0          VMLA.F32 s0,s19,s1
0000e4  ee780a28          VADD.F32 s1,s16,s17
0000e8  ee700aa9          VADD.F32 s1,s1,s19
0000ec  eec0aa20          VDIV.F32 s21,s0,s1
;;;224    	kd = (Ux_S * this->NS_PS_kd + Ux_M * this->NM_PM_kd + Ux_B * this->NB_PB_kd)/(Ux_S + Ux_M + Ux_B);
0000f0  ed940a26          VLDR     s0,[r4,#0x98]
0000f4  ee200a08          VMUL.F32 s0,s0,s16
0000f8  edd40a25          VLDR     s1,[r4,#0x94]
0000fc  ee080aa0          VMLA.F32 s0,s17,s1
000100  edd40a24          VLDR     s1,[r4,#0x90]
000104  ee090aa0          VMLA.F32 s0,s19,s1
000108  ee780a28          VADD.F32 s1,s16,s17
00010c  ee700aa9          VADD.F32 s1,s1,s19
000110  ee80ba20          VDIV.F32 s22,s0,s1
;;;225    
;;;226    //	kp = CLimitSlider_Filter(Kpfilter,5,kp,10000);//滤波
;;;227    //	ki = CLimitSlider_Filter(Kifilter,5,ki,10000);//滤波
;;;228    //	kd = CLimitSlider_Filter(Kdfilter,5,kd,10000);//滤波
;;;229    
;;;230    //	kp = Constrain(kp, 0.0f, this->NB_PB_kp);
;;;231    //	ki = Constrain(ki, 0.0f, this->NB_PB_ki);
;;;232    //	kd = Constrain(kd, 0.0f, this->NB_PB_kd);
;;;233    //	if(myabs(error) <= NS_PS)
;;;234    //	{
;;;235    //		kd = NS_PS_kd*errorC;
;;;236    //		kp = NS_PS_kp/errorC;
;;;237    //	}
;;;238    	SetPID(kp,ki,kd);
000114  eeb01a4b          VMOV.F32 s2,s22
000118  eef00a6a          VMOV.F32 s1,s21
00011c  eeb00a4a          VMOV.F32 s0,s20
000120  4620              MOV      r0,r4
000122  f7fffffe          BL       _ZN7PIDBase6SetPIDEfff ; PIDBase::SetPID(float, float, float)
;;;239    }
000126  ecbd8b08          VPOP     {d8-d11}
00012a  bd10              POP      {r4,pc}
;;;240    
                          ENDP


                          AREA ||i._ZN8FUZZYPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN8FUZZYPID9AdjustPIDEv PROC ; FUZZYPID::AdjustPID()
;;;268    
;;;269    void FUZZYPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;270    {
000002  4604              MOV      r4,r0
;;;271    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L16.16|
                  |L16.14|
;;;272    
;;;273    	now_error = Target - Current;
;;;274    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;275    	Omega = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,Omega);
;;;276    
;;;277    	errorC = Kec*Omega/dt;
;;;278    	FuzzyPID(now_error,errorC);
;;;279    
;;;280    	//P
;;;281    	PTerm = Kp * now_error;
;;;282    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;283    
;;;284    	//I
;;;285    
;;;286    	ITerm +=  Ki * now_error * dt;
;;;287    	ITerm = Constrain(ITerm, Rii, Ria);
;;;288    
;;;289    	//D
;;;290    	DTerm =   Kd * (Omega - Omega_Offset);
;;;291    
;;;292    	Out = PTerm + ITerm + DTerm;
;;;293    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;294    	
;;;295    	if(myabs(now_error) <= DeadZone)
;;;296    	{
;;;297    		counter++;
;;;298    		if(counter >= 1024)
;;;299    			counter = 1024;
;;;300    	}
;;;301    	else
;;;302    	{
;;;303    		counter--;
;;;304    		if(counter <= 0)
;;;305    			counter = 0;
;;;306    	}
;;;307    	if(counter >= 1000)
;;;308    	{
;;;309    		Out = 0;
;;;310    		ITerm = 0;
;;;311    	}
;;;312    }
00000e  bd10              POP      {r4,pc}
                  |L16.16|
000010  ed940a01          VLDR     s0,[r4,#4]            ;273
000014  edd40a02          VLDR     s1,[r4,#8]            ;273
000018  ee300a60          VSUB.F32 s0,s0,s1              ;273
00001c  ed840a15          VSTR     s0,[r4,#0x54]         ;273
000020  edd40a15          VLDR     s1,[r4,#0x54]         ;274
000024  eeb00a60          VMOV.F32 s0,s1                 ;274
000028  2205              MOVS     r2,#5                 ;274
00002a  f10401a4          ADD      r1,r4,#0xa4           ;274
00002e  1d08              ADDS     r0,r1,#4              ;274
000030  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000034  ed840a15          VSTR     s0,[r4,#0x54]         ;274
000038  edd40a19          VLDR     s1,[r4,#0x64]         ;275
00003c  eeb00a60          VMOV.F32 s0,s1                 ;275
000040  2205              MOVS     r2,#5                 ;275
000042  f10401a5          ADD      r1,r4,#0xa5           ;275
000046  f10400bc          ADD      r0,r4,#0xbc           ;275
00004a  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00004e  ed840a19          VSTR     s0,[r4,#0x64]         ;275
000052  ed940a28          VLDR     s0,[r4,#0xa0]         ;277
000056  edd40a19          VLDR     s1,[r4,#0x64]         ;277
00005a  ee200a20          VMUL.F32 s0,s0,s1              ;277
00005e  edd40a17          VLDR     s1,[r4,#0x5c]         ;277
000062  ee801a20          VDIV.F32 s2,s0,s1              ;277
000066  ed841a27          VSTR     s2,[r4,#0x9c]         ;277
00006a  ed941a27          VLDR     s2,[r4,#0x9c]         ;278
00006e  eef00a41          VMOV.F32 s1,s2                 ;278
000072  ed941a15          VLDR     s2,[r4,#0x54]         ;278
000076  eeb00a41          VMOV.F32 s0,s2                 ;278
00007a  4620              MOV      r0,r4                 ;278
00007c  f7fffffe          BL       _ZN8FUZZYPID8FuzzyPIDEff ; FUZZYPID::FuzzyPID(float, float)
000080  ed940a08          VLDR     s0,[r4,#0x20]         ;281
000084  edd40a15          VLDR     s1,[r4,#0x54]         ;281
000088  ee200a20          VMUL.F32 s0,s0,s1              ;281
00008c  ed840a05          VSTR     s0,[r4,#0x14]         ;281
000090  edd41a0f          VLDR     s3,[r4,#0x3c]         ;282
000094  eeb01a61          VMOV.F32 s2,s3                 ;282
000098  edd41a0b          VLDR     s3,[r4,#0x2c]         ;282
00009c  eef00a61          VMOV.F32 s1,s3                 ;282
0000a0  edd41a05          VLDR     s3,[r4,#0x14]         ;282
0000a4  eeb00a61          VMOV.F32 s0,s3                 ;282
0000a8  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000ac  ed840a05          VSTR     s0,[r4,#0x14]         ;282
0000b0  ed940a09          VLDR     s0,[r4,#0x24]         ;286
0000b4  edd40a15          VLDR     s1,[r4,#0x54]         ;286
0000b8  ee600a20          VMUL.F32 s1,s0,s1              ;286
0000bc  ed941a17          VLDR     s2,[r4,#0x5c]         ;286
0000c0  ed940a06          VLDR     s0,[r4,#0x18]         ;286
0000c4  ee000a81          VMLA.F32 s0,s1,s2              ;286
0000c8  ed840a06          VSTR     s0,[r4,#0x18]         ;286
0000cc  edd41a10          VLDR     s3,[r4,#0x40]         ;287
0000d0  eeb01a61          VMOV.F32 s2,s3                 ;287
0000d4  edd41a0c          VLDR     s3,[r4,#0x30]         ;287
0000d8  eef00a61          VMOV.F32 s1,s3                 ;287
0000dc  edd41a06          VLDR     s3,[r4,#0x18]         ;287
0000e0  eeb00a61          VMOV.F32 s0,s3                 ;287
0000e4  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000e8  ed840a06          VSTR     s0,[r4,#0x18]         ;287
0000ec  ed940a19          VLDR     s0,[r4,#0x64]         ;290
0000f0  edd40a1a          VLDR     s1,[r4,#0x68]         ;290
0000f4  ee300a60          VSUB.F32 s0,s0,s1              ;290
0000f8  edd40a0a          VLDR     s1,[r4,#0x28]         ;290
0000fc  ee200a20          VMUL.F32 s0,s0,s1              ;290
000100  ed840a07          VSTR     s0,[r4,#0x1c]         ;290
000104  ed940a05          VLDR     s0,[r4,#0x14]         ;292
000108  edd40a06          VLDR     s1,[r4,#0x18]         ;292
00010c  ee300a20          VADD.F32 s0,s0,s1              ;292
000110  edd40a07          VLDR     s1,[r4,#0x1c]         ;292
000114  ee300a20          VADD.F32 s0,s0,s1              ;292
000118  ed840a03          VSTR     s0,[r4,#0xc]          ;292
00011c  edd40a03          VLDR     s1,[r4,#0xc]          ;293
000120  eeb00a60          VMOV.F32 s0,s1                 ;293
000124  2205              MOVS     r2,#5                 ;293
000126  f10401a6          ADD      r1,r4,#0xa6           ;293
00012a  f10400d0          ADD      r0,r4,#0xd0           ;293
00012e  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000132  ed840a03          VSTR     s0,[r4,#0xc]          ;293
000136  ed940a15          VLDR     s0,[r4,#0x54]         ;295
00013a  eeb50ac0          VCMPE.F32 s0,#0.0               ;295
00013e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;295
000142  dd02              BLE      |L16.330|
000144  ed940a15          VLDR     s0,[r4,#0x54]         ;295
000148  e003              B        |L16.338|
                  |L16.330|
00014a  ed940a15          VLDR     s0,[r4,#0x54]         ;295
00014e  eeb10a40          VNEG.F32 s0,s0                 ;295
                  |L16.338|
000152  edd40a13          VLDR     s1,[r4,#0x4c]         ;295
000156  eeb40ae0          VCMPE.F32 s0,s1                 ;295
00015a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;295
00015e  d80e              BHI      |L16.382|
000160  f8340f50          LDRH     r0,[r4,#0x50]!        ;297
000164  1c40              ADDS     r0,r0,#1              ;297
000166  b200              SXTH     r0,r0                 ;297
000168  8020              STRH     r0,[r4,#0]            ;297
00016a  f9340950          LDRSH    r0,[r4],#-0x50        ;298
00016e  f5b06f80          CMP      r0,#0x400             ;298
000172  db10              BLT      |L16.406|
000174  f44f6080          MOV      r0,#0x400             ;299
000178  f8a40050          STRH     r0,[r4,#0x50]         ;299
00017c  e00b              B        |L16.406|
                  |L16.382|
00017e  f8340f50          LDRH     r0,[r4,#0x50]!        ;303
000182  1e40              SUBS     r0,r0,#1              ;303
000184  b200              SXTH     r0,r0                 ;303
000186  8020              STRH     r0,[r4,#0]            ;303
000188  f9340950          LDRSH    r0,[r4],#-0x50        ;304
00018c  2800              CMP      r0,#0                 ;304
00018e  dc02              BGT      |L16.406|
000190  2000              MOVS     r0,#0                 ;305
000192  f8a40050          STRH     r0,[r4,#0x50]         ;305
                  |L16.406|
000196  f9b40050          LDRSH    r0,[r4,#0x50]         ;307
00019a  f5b07f7a          CMP      r0,#0x3e8             ;307
00019e  db07              BLT      |L16.432|
0001a0  ed9f0a04          VLDR     s0,|L16.436|
0001a4  ed840a03          VSTR     s0,[r4,#0xc]          ;309
0001a8  ed9f0a02          VLDR     s0,|L16.436|
0001ac  ed840a06          VSTR     s0,[r4,#0x18]         ;310
                  |L16.432|
0001b0  bf00              NOP      
0001b2  e72c              B        |L16.14|
;;;313    
                          ENDP

                  |L16.436|
0001b4  00000000          DCFS     0x00000000 ; 0

                          AREA ||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||, CODE, READONLY, ALIGN=2

                  _ZN8FUZZYPIDC2Efffffffffffffffffffffffff                  ; Alternate entry point ; FUZZYPID::FUZZYPID__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN8FUZZYPIDC1Efffffffffffffffffffffffff PROC ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;241    
;;;242    FUZZYPID::FUZZYPID(float m_Kp, float m_Ki, float m_Kd, float m_Target,\
;;;243    		 float m_Rpi, float m_Rpa, float m_Rii, float m_Ria,\
;;;244    		 float m_Rdi, float m_Rda, float m_Ti, float m_Ta, float m_DeadZone,\
;;;245    		 float m_NB_PB, float m_NM_PM, float m_NS_PS,\
;;;246    		 float m_NB_PB_kp,float m_NM_PM_kp, float m_NS_PS_kp,\
;;;247    		 float m_NB_PB_ki,float m_NM_PM_ki, float m_NS_PS_ki,\
;;;248    		 float m_NB_PB_kd,float m_NM_PM_kd, float m_NS_PS_kd)
;;;249    		:PIDBase(m_Kp,m_Ki,m_Kd,m_Target,\
;;;250    				m_Rpi,m_Rpa,m_Rii,m_Ria,\
;;;251    				m_Rdi,m_Rda,m_Ti,m_Ta,m_DeadZone),
;;;252    		NB_PB (m_NB_PB),
;;;253    		NM_PM (m_NM_PM),
;;;254    		NS_PS (m_NS_PS),
;;;255    		NB_PB_kp (m_NB_PB_kp),
;;;256    		NM_PM_kp (m_NM_PM_kp),
;;;257    		NS_PS_kp (m_NS_PS_kp),
;;;258    		NB_PB_ki (m_NB_PB_ki),
;;;259    		NM_PM_ki (m_NM_PM_ki),
;;;260    		NS_PS_ki (m_NS_PS_ki),
;;;261    		NB_PB_kd (m_NB_PB_kd),
;;;262    		NM_PM_kd (m_NM_PM_kd),
;;;263    		NS_PS_kd (m_NS_PS_kd)
;;;264    		{
;;;265    			Kec = 0.00001f;
;;;266    		};
;;;267    
000000  b501              PUSH     {r0,lr}
000002  ed2d0b10          VPUSH    {d0-d7}
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  4601              MOV      r1,r0
00000c  eef08a40          VMOV.F32 s17,s0
000010  eeb09a60          VMOV.F32 s18,s1
000014  eef09a41          VMOV.F32 s19,s2
000018  eeb0aa61          VMOV.F32 s20,s3
00001c  eef0aa42          VMOV.F32 s21,s4
000020  eeb0ba62          VMOV.F32 s22,s5
000024  eef0ba43          VMOV.F32 s23,s6
000028  eeb0ca63          VMOV.F32 s24,s7
00002c  eef0ca44          VMOV.F32 s25,s8
000030  eeb0da64          VMOV.F32 s26,s9
000034  eef0da45          VMOV.F32 s27,s10
000038  eef0fa65          VMOV.F32 s31,s11
00003c  eeb08a66          VMOV.F32 s16,s13
000040  ed9dea22          VLDR     s28,[sp,#0x88]
000044  edddea23          VLDR     s29,[sp,#0x8c]
000048  ed9dfa24          VLDR     s30,[sp,#0x90]
00004c  ed9d6a1c          VLDR     s12,[sp,#0x70]
000050  eef05a6f          VMOV.F32 s11,s31
000054  eeb05a6d          VMOV.F32 s10,s27
000058  eef04a4d          VMOV.F32 s9,s26
00005c  eeb04a6c          VMOV.F32 s8,s25
000060  eef03a4c          VMOV.F32 s7,s24
000064  eeb03a6b          VMOV.F32 s6,s23
000068  eef02a4b          VMOV.F32 s5,s22
00006c  eeb02a6a          VMOV.F32 s4,s21
000070  eef01a4a          VMOV.F32 s3,s20
000074  eeb01a69          VMOV.F32 s2,s19
000078  eef00a49          VMOV.F32 s1,s18
00007c  eeb00a68          VMOV.F32 s0,s17
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       _ZN7PIDBaseC1Efffffffffffff ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
000086  4601              MOV      r1,r0
000088  ed818a1b          VSTR     s16,[r1,#0x6c]
00008c  ed817a1c          VSTR     s14,[r1,#0x70]
000090  edc17a1d          VSTR     s15,[r1,#0x74]
000094  ed81ea1e          VSTR     s28,[r1,#0x78]
000098  edc1ea1f          VSTR     s29,[r1,#0x7c]
00009c  ed81fa20          VSTR     s30,[r1,#0x80]
0000a0  ed9d0a25          VLDR     s0,[sp,#0x94]
0000a4  ed810a21          VSTR     s0,[r1,#0x84]
0000a8  ed9d0a26          VLDR     s0,[sp,#0x98]
0000ac  ed810a22          VSTR     s0,[r1,#0x88]
0000b0  ed9d0a27          VLDR     s0,[sp,#0x9c]
0000b4  ed810a23          VSTR     s0,[r1,#0x8c]
0000b8  ed9d0a28          VLDR     s0,[sp,#0xa0]
0000bc  ed810a24          VSTR     s0,[r1,#0x90]
0000c0  ed9d0a29          VLDR     s0,[sp,#0xa4]
0000c4  ed810a25          VSTR     s0,[r1,#0x94]
0000c8  ed9d0a2a          VLDR     s0,[sp,#0xa8]
0000cc  ed810a26          VSTR     s0,[r1,#0x98]
0000d0  ed9f0a04          VLDR     s0,|L17.228|
0000d4  ed810a28          VSTR     s0,[r1,#0xa0]
0000d8  4608              MOV      r0,r1
0000da  ecbd8b10          VPOP     {d8-d15}
0000de  b011              ADD      sp,sp,#0x44
0000e0  bd00              POP      {pc}
                          ENDP

0000e2  0000              DCW      0x0000
                  |L17.228|
0000e4  3727c5ac          DCFS     0x3727c5ac ; 9.9999997473787516e-06

                          AREA ||i._ZN8PIDTimer15UpdataTimeStampEv||, CODE, READONLY, ALIGN=2

                  _ZN8PIDTimer15UpdataTimeStampEv PROC ; PIDTimer::UpdataTimeStamp()
;;;83     
;;;84     unsigned char PIDTimer::UpdataTimeStamp(void)
000000  4601              MOV      r1,r0
;;;85     {
;;;86     	u32 now_time;
;;;87     
;;;88     	//系统时间的获取
;;;89     	if(last_time == 0)
000002  6848              LDR      r0,[r1,#4]
000004  b920              CBNZ     r0,|L18.16|
;;;90     	{
;;;91     		last_time = micros();
000006  4814              LDR      r0,|L18.88|
000008  6800              LDR      r0,[r0,#0]
00000a  6048              STR      r0,[r1,#4]
;;;92     		return 1;
00000c  2001              MOVS     r0,#1
                  |L18.14|
;;;93     	}
;;;94     	now_time = micros();
;;;95     
;;;96     	if(now_time < last_time)
;;;97     	{
;;;98     	  	dt = (float)(now_time + (0xFFFFFFFF - last_time) );
;;;99     	}
;;;100    	else
;;;101    	{
;;;102    		dt = (float)(now_time - last_time);
;;;103    
;;;104    	}
;;;105    
;;;106      	last_time = now_time ;
;;;107    
;;;108    	dt /= 1000000.0f;
;;;109    
;;;110    	return 0;
;;;111    
;;;112    }
00000e  4770              BX       lr
                  |L18.16|
000010  4811              LDR      r0,|L18.88|
000012  6802              LDR      r2,[r0,#0]            ;94
000014  6848              LDR      r0,[r1,#4]            ;96
000016  4290              CMP      r0,r2                 ;96
000018  d90a              BLS      |L18.48|
00001a  6848              LDR      r0,[r1,#4]            ;98
00001c  f1c030ff          RSB      r0,r0,#0xffffffff     ;98
000020  4410              ADD      r0,r0,r2              ;98
000022  ee000a10          VMOV     s0,r0                 ;98
000026  eeb80a40          VCVT.F32.U32 s0,s0                 ;98
00002a  ed810a00          VSTR     s0,[r1,#0]            ;98
00002e  e007              B        |L18.64|
                  |L18.48|
000030  6848              LDR      r0,[r1,#4]            ;102
000032  1a10              SUBS     r0,r2,r0              ;102
000034  ee000a10          VMOV     s0,r0                 ;102
000038  eeb80a40          VCVT.F32.U32 s0,s0                 ;102
00003c  ed810a00          VSTR     s0,[r1,#0]            ;102
                  |L18.64|
000040  604a              STR      r2,[r1,#4]            ;106
000042  ed910a00          VLDR     s0,[r1,#0]            ;108
000046  eddf0a05          VLDR     s1,|L18.92|
00004a  ee801a20          VDIV.F32 s2,s0,s1              ;108
00004e  ed811a00          VSTR     s2,[r1,#0]            ;108
000052  2000              MOVS     r0,#0                 ;110
000054  e7db              B        |L18.14|
;;;113    
                          ENDP

000056  0000              DCW      0x0000
                  |L18.88|
                          DCD      0x40000c24
                  |L18.92|
00005c  49742400          DCFS     0x49742400 ; 1000000

                          AREA ||i._ZN9FUZZYSPID9AdjustPIDEv||, CODE, READONLY, ALIGN=2

                  _ZN9FUZZYSPID9AdjustPIDEv PROC ; FUZZYSPID::AdjustPID()
;;;314    
;;;315    void FUZZYSPID::AdjustPID(void)
000000  b510              PUSH     {r4,lr}
;;;316    {
000002  4604              MOV      r4,r0
;;;317    	if(UpdataTimeStamp()) return;
000004  f104005c          ADD      r0,r4,#0x5c
000008  f7fffffe          BL       _ZN8PIDTimer15UpdataTimeStampEv ; PIDTimer::UpdataTimeStamp()
00000c  b100              CBZ      r0,|L19.16|
                  |L19.14|
;;;318    
;;;319    	last_error = now_error;
;;;320    	now_error = Target - Current;
;;;321    	now_error = Slider_Filter(filterstruct.filterbuff[0],&filterstruct.num[0],5,now_error);
;;;322    
;;;323    	errorC = Kec*Omega/dt;
;;;324    	FuzzyPID(now_error,errorC);
;;;325    
;;;326    	//P
;;;327    	PTerm = Kp * now_error;
;;;328    	PTerm = Constrain(PTerm, Rpi, Rpa);
;;;329    
;;;330    	//I
;;;331    
;;;332    	ITerm +=  Ki * now_error * dt;
;;;333    	ITerm = Constrain(ITerm, Rii, Ria);
;;;334    
;;;335    	//D
;;;336    	DTerm =   Kd * (now_error - last_error)/dt;
;;;337    	DTerm = Constrain(DTerm, Rdi, Rda);
;;;338    	DTerm = Slider_Filter(filterstruct.filterbuff[1],&filterstruct.num[1],5,DTerm);//滤波，输出更加平滑
;;;339    	
;;;340    	Out = PTerm + ITerm + DTerm;
;;;341    	Out = Slider_Filter(filterstruct.filterbuff[2],&filterstruct.num[2],5,Out);//滤波，输出更加平滑
;;;342    	
;;;343    	if(myabs(now_error) <= DeadZone)
;;;344    	{
;;;345    		counter++;
;;;346    		if(counter >= 1024)
;;;347    			counter = 1024;
;;;348    	}
;;;349    	else
;;;350    	{
;;;351    		counter--;
;;;352    		if(counter <= 0)
;;;353    			counter = 0;
;;;354    	}
;;;355    	if(counter >= 1000)
;;;356    	{
;;;357    		Out = 0;
;;;358    		ITerm = 0;
;;;359    	}
;;;360    }
00000e  bd10              POP      {r4,pc}
                  |L19.16|
000010  ed940a15          VLDR     s0,[r4,#0x54]         ;319
000014  ed840a16          VSTR     s0,[r4,#0x58]         ;319
000018  ed940a01          VLDR     s0,[r4,#4]            ;320
00001c  edd40a02          VLDR     s1,[r4,#8]            ;320
000020  ee300a60          VSUB.F32 s0,s0,s1              ;320
000024  ed840a15          VSTR     s0,[r4,#0x54]         ;320
000028  edd40a15          VLDR     s1,[r4,#0x54]         ;321
00002c  eeb00a60          VMOV.F32 s0,s1                 ;321
000030  2205              MOVS     r2,#5                 ;321
000032  f10401e4          ADD      r1,r4,#0xe4           ;321
000036  1d08              ADDS     r0,r1,#4              ;321
000038  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
00003c  ed840a15          VSTR     s0,[r4,#0x54]         ;321
000040  ed940a28          VLDR     s0,[r4,#0xa0]         ;323
000044  edd40a19          VLDR     s1,[r4,#0x64]         ;323
000048  ee200a20          VMUL.F32 s0,s0,s1              ;323
00004c  edd40a17          VLDR     s1,[r4,#0x5c]         ;323
000050  ee801a20          VDIV.F32 s2,s0,s1              ;323
000054  ed841a27          VSTR     s2,[r4,#0x9c]         ;323
000058  ed941a27          VLDR     s2,[r4,#0x9c]         ;324
00005c  eef00a41          VMOV.F32 s1,s2                 ;324
000060  ed941a15          VLDR     s2,[r4,#0x54]         ;324
000064  eeb00a41          VMOV.F32 s0,s2                 ;324
000068  4620              MOV      r0,r4                 ;324
00006a  f7fffffe          BL       _ZN8FUZZYPID8FuzzyPIDEff ; FUZZYPID::FuzzyPID(float, float)
00006e  ed940a08          VLDR     s0,[r4,#0x20]         ;327
000072  edd40a15          VLDR     s1,[r4,#0x54]         ;327
000076  ee200a20          VMUL.F32 s0,s0,s1              ;327
00007a  ed840a05          VSTR     s0,[r4,#0x14]         ;327
00007e  edd41a0f          VLDR     s3,[r4,#0x3c]         ;328
000082  eeb01a61          VMOV.F32 s2,s3                 ;328
000086  edd41a0b          VLDR     s3,[r4,#0x2c]         ;328
00008a  eef00a61          VMOV.F32 s1,s3                 ;328
00008e  edd41a05          VLDR     s3,[r4,#0x14]         ;328
000092  eeb00a61          VMOV.F32 s0,s3                 ;328
000096  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
00009a  ed840a05          VSTR     s0,[r4,#0x14]         ;328
00009e  ed940a09          VLDR     s0,[r4,#0x24]         ;332
0000a2  edd40a15          VLDR     s1,[r4,#0x54]         ;332
0000a6  ee600a20          VMUL.F32 s1,s0,s1              ;332
0000aa  ed941a17          VLDR     s2,[r4,#0x5c]         ;332
0000ae  ed940a06          VLDR     s0,[r4,#0x18]         ;332
0000b2  ee000a81          VMLA.F32 s0,s1,s2              ;332
0000b6  ed840a06          VSTR     s0,[r4,#0x18]         ;332
0000ba  edd41a10          VLDR     s3,[r4,#0x40]         ;333
0000be  eeb01a61          VMOV.F32 s2,s3                 ;333
0000c2  edd41a0c          VLDR     s3,[r4,#0x30]         ;333
0000c6  eef00a61          VMOV.F32 s1,s3                 ;333
0000ca  edd41a06          VLDR     s3,[r4,#0x18]         ;333
0000ce  eeb00a61          VMOV.F32 s0,s3                 ;333
0000d2  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
0000d6  ed840a06          VSTR     s0,[r4,#0x18]         ;333
0000da  ed940a15          VLDR     s0,[r4,#0x54]         ;336
0000de  edd40a16          VLDR     s1,[r4,#0x58]         ;336
0000e2  ee300a60          VSUB.F32 s0,s0,s1              ;336
0000e6  edd40a0a          VLDR     s1,[r4,#0x28]         ;336
0000ea  ee200a20          VMUL.F32 s0,s0,s1              ;336
0000ee  edd40a17          VLDR     s1,[r4,#0x5c]         ;336
0000f2  ee801a20          VDIV.F32 s2,s0,s1              ;336
0000f6  ed841a07          VSTR     s2,[r4,#0x1c]         ;336
0000fa  edd41a11          VLDR     s3,[r4,#0x44]         ;337
0000fe  eeb01a61          VMOV.F32 s2,s3                 ;337
000102  edd41a0d          VLDR     s3,[r4,#0x34]         ;337
000106  eef00a61          VMOV.F32 s1,s3                 ;337
00010a  edd41a07          VLDR     s3,[r4,#0x1c]         ;337
00010e  eeb00a61          VMOV.F32 s0,s3                 ;337
000112  f7fffffe          BL       _Z9ConstrainIfET_S0_S0_S0_ ; T1 Constrain<float>(T1, T1, T1)
000116  ed840a07          VSTR     s0,[r4,#0x1c]         ;337
00011a  edd40a07          VLDR     s1,[r4,#0x1c]         ;338
00011e  eeb00a60          VMOV.F32 s0,s1                 ;338
000122  2205              MOVS     r2,#5                 ;338
000124  f10401e5          ADD      r1,r4,#0xe5           ;338
000128  f10400fc          ADD      r0,r4,#0xfc           ;338
00012c  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000130  ed840a07          VSTR     s0,[r4,#0x1c]         ;338
000134  ed940a05          VLDR     s0,[r4,#0x14]         ;340
000138  edd40a06          VLDR     s1,[r4,#0x18]         ;340
00013c  ee300a20          VADD.F32 s0,s0,s1              ;340
000140  edd40a07          VLDR     s1,[r4,#0x1c]         ;340
000144  ee300a20          VADD.F32 s0,s0,s1              ;340
000148  ed840a03          VSTR     s0,[r4,#0xc]          ;340
00014c  edd40a03          VLDR     s1,[r4,#0xc]          ;341
000150  eeb00a60          VMOV.F32 s0,s1                 ;341
000154  2205              MOVS     r2,#5                 ;341
000156  f10401e6          ADD      r1,r4,#0xe6           ;341
00015a  f5047088          ADD      r0,r4,#0x110          ;341
00015e  f7fffffe          BL       _Z13Slider_FilterPfPhhf ; Slider_Filter(float*, unsigned char*, unsigned char, float)
000162  ed840a03          VSTR     s0,[r4,#0xc]          ;341
000166  ed940a15          VLDR     s0,[r4,#0x54]         ;343
00016a  eeb50ac0          VCMPE.F32 s0,#0.0               ;343
00016e  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;343
000172  dd02              BLE      |L19.378|
000174  ed940a15          VLDR     s0,[r4,#0x54]         ;343
000178  e003              B        |L19.386|
                  |L19.378|
00017a  ed940a15          VLDR     s0,[r4,#0x54]         ;343
00017e  eeb10a40          VNEG.F32 s0,s0                 ;343
                  |L19.386|
000182  edd40a13          VLDR     s1,[r4,#0x4c]         ;343
000186  eeb40ae0          VCMPE.F32 s0,s1                 ;343
00018a  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;343
00018e  d80e              BHI      |L19.430|
000190  f8340f50          LDRH     r0,[r4,#0x50]!        ;345
000194  1c40              ADDS     r0,r0,#1              ;345
000196  b200              SXTH     r0,r0                 ;345
000198  8020              STRH     r0,[r4,#0]            ;345
00019a  f9340950          LDRSH    r0,[r4],#-0x50        ;346
00019e  f5b06f80          CMP      r0,#0x400             ;346
0001a2  db10              BLT      |L19.454|
0001a4  f44f6080          MOV      r0,#0x400             ;347
0001a8  f8a40050          STRH     r0,[r4,#0x50]         ;347
0001ac  e00b              B        |L19.454|
                  |L19.430|
0001ae  f8340f50          LDRH     r0,[r4,#0x50]!        ;351
0001b2  1e40              SUBS     r0,r0,#1              ;351
0001b4  b200              SXTH     r0,r0                 ;351
0001b6  8020              STRH     r0,[r4,#0]            ;351
0001b8  f9340950          LDRSH    r0,[r4],#-0x50        ;352
0001bc  2800              CMP      r0,#0                 ;352
0001be  dc02              BGT      |L19.454|
0001c0  2000              MOVS     r0,#0                 ;353
0001c2  f8a40050          STRH     r0,[r4,#0x50]         ;353
                  |L19.454|
0001c6  f9b40050          LDRSH    r0,[r4,#0x50]         ;355
0001ca  f5b07f7a          CMP      r0,#0x3e8             ;355
0001ce  db07              BLT      |L19.480|
0001d0  ed9f0a04          VLDR     s0,|L19.484|
0001d4  ed840a03          VSTR     s0,[r4,#0xc]          ;357
0001d8  ed9f0a02          VLDR     s0,|L19.484|
0001dc  ed840a06          VSTR     s0,[r4,#0x18]         ;358
                  |L19.480|
0001e0  bf00              NOP      
0001e2  e714              B        |L19.14|
;;;361    
                          ENDP

                  |L19.484|
0001e4  00000000          DCFS     0x00000000 ; 0

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z3TRIffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z3TRIffff||
                          DCD      0x00000001

                          AREA ||area_number.21||, LINKORDER=||i._Z8LAD_DOWNfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.21||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8LAD_DOWNfff||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._Z6LAD_UPfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z6LAD_UPfff||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._ZN7PIDBaseC1Efffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBaseC1Efffffffffffff||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._ZN7PIDBase9SetTargetEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase9SetTargetEf||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._ZN7PIDBase10SetCurrentEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetCurrentEf||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._ZN7PIDBase6SetPIDEfff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase6SetPIDEfff||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._ZN7PIDBase15SetTargetMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase15SetTargetMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._ZN7PIDBase10SetPMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetPMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._ZN7PIDBase10SetIMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetIMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._ZN7PIDBase10SetDMaxMinEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase10SetDMaxMinEff||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._ZN7PIDBase11SetDeadZoneEf||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN7PIDBase11SetDeadZoneEf||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._ZN8PIDTimer15UpdataTimeStampEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8PIDTimer15UpdataTimeStampEv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPIDC1Efffffffffffffffffffffffff||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._ZN8FUZZYPID8FuzzyPIDEff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPID8FuzzyPIDEff||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._ZN8FUZZYPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._ZN9FUZZYSPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9FUZZYSPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._ZN4CPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN4CPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._ZN5SCPID9AdjustPIDEv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN5SCPID9AdjustPIDEv||
                          DCD      0x00000001

                          AREA ||t._Z9ConstrainIfET_S0_S0_S0_||, COMGROUP=_Z9ConstrainIfET_S0_S0_S0_, CODE, READONLY, ALIGN=1

                  _Z9ConstrainIfET_S0_S0_S0_ PROC ; T1 Constrain<float>(T1, T1, T1)
;;;21     template<class Type>
;;;22     Type Constrain(Type input,Type min,Type max){
000000  eef01a40          VMOV.F32 s3,s0
;;;23     if (input <= min)
000004  eef41ae0          VCMPE.F32 s3,s1
000008  eef1fa10          VMRS     APSR_nzcv,FPSCR
00000c  d802              BHI      |L121.20|
;;;24     	return min;
00000e  eeb00a60          VMOV.F32 s0,s1
                  |L121.18|
;;;25     else if(input >= max)
;;;26     	return max;
;;;27     else return input;
;;;28     }
000012  4770              BX       lr
                  |L121.20|
000014  eef41ac1          VCMPE.F32 s3,s2                 ;25
000018  eef1fa10          VMRS     APSR_nzcv,FPSCR       ;25
00001c  db02              BLT      |L121.36|
00001e  eeb00a41          VMOV.F32 s0,s2                 ;26
000022  e7f6              B        |L121.18|
                  |L121.36|
000024  eeb00a61          VMOV.F32 s0,s3                 ;27
000028  e7f3              B        |L121.18|
;;;29     
                          ENDP


                          AREA ||area_number.122||, COMGROUP=_Z9ConstrainIfET_S0_S0_S0_, LINKORDER=||t._Z9ConstrainIfET_S0_S0_S0_||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.122||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||t._Z9ConstrainIfET_S0_S0_S0_||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\cpid.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_cpid_cpp_9305d724___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z7__REVSHi|
#line 144
|__asm___8_cpid_cpp_9305d724___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_cpid_cpp_9305d724___Z5__RRXj|
#line 300
|__asm___8_cpid_cpp_9305d724___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
