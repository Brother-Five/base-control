; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_semaphore.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_semaphore.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rt_semaphore.crf ..\..\RTX\src\rt_Semaphore.c]
                          THUMB

                          AREA ||i.isr_sem_send||, CODE, READONLY, ALIGN=1

                  isr_sem_send PROC
;;;88     
;;;89     void isr_sem_send (OS_ID semaphore) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
;;;90       /* Same function as "os_sem_send", but to be called by ISRs */
;;;91       P_SCB p_SCB = semaphore;
000004  4625              MOV      r5,r4
;;;92     
;;;93       rt_psq_enq (p_SCB, 0);
000006  2100              MOVS     r1,#0
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       rt_psq_enq
;;;94       rt_psh_req ();
00000e  f7fffffe          BL       rt_psh_req
;;;95     }
000012  bd70              POP      {r4-r6,pc}
;;;96     
                          ENDP


                          AREA ||i.rt_sem_init||, CODE, READONLY, ALIGN=1

                  rt_sem_init PROC
;;;26     
;;;27     void rt_sem_init (OS_ID semaphore, U16 token_count) {
000000  460a              MOV      r2,r1
;;;28       /* Initialize a semaphore */
;;;29       P_SCB p_SCB = semaphore;
000002  4601              MOV      r1,r0
;;;30     
;;;31       p_SCB->cb_type = SCB;
000004  2302              MOVS     r3,#2
000006  700b              STRB     r3,[r1,#0]
;;;32       p_SCB->p_lnk  = NULL;
000008  2300              MOVS     r3,#0
00000a  604b              STR      r3,[r1,#4]
;;;33       p_SCB->tokens = token_count;
00000c  804a              STRH     r2,[r1,#2]
;;;34     }
00000e  4770              BX       lr
;;;35     
                          ENDP


                          AREA ||i.rt_sem_psh||, CODE, READONLY, ALIGN=2

                  rt_sem_psh PROC
;;;99     
;;;100    void rt_sem_psh (P_SCB p_CB) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;101      /* Check if task has to be waken up */
;;;102      P_TCB p_TCB;
;;;103    
;;;104      if (p_CB->p_lnk != NULL) {
000004  6868              LDR      r0,[r5,#4]
000006  b180              CBZ      r0,|L3.42|
;;;105        /* A task is waiting for token */
;;;106        p_TCB = rt_get_first ((P_XCB)p_CB);
000008  4628              MOV      r0,r5
00000a  f7fffffe          BL       rt_get_first
00000e  4604              MOV      r4,r0
;;;107        rt_rmv_dly (p_TCB);
000010  4620              MOV      r0,r4
000012  f7fffffe          BL       rt_rmv_dly
;;;108        p_TCB->state   = READY;
000016  2001              MOVS     r0,#1
000018  7060              STRB     r0,[r4,#1]
;;;109        p_TCB->ret_val = OS_R_SEM;
00001a  2003              MOVS     r0,#3
00001c  f8840025          STRB     r0,[r4,#0x25]
;;;110        rt_put_prio (&os_rdy, p_TCB);
000020  4621              MOV      r1,r4
000022  4804              LDR      r0,|L3.52|
000024  f7fffffe          BL       rt_put_prio
000028  e002              B        |L3.48|
                  |L3.42|
;;;111      }
;;;112      else {
;;;113        /* Store token */
;;;114        p_CB->tokens++;
00002a  8868              LDRH     r0,[r5,#2]
00002c  1c40              ADDS     r0,r0,#1
00002e  8068              STRH     r0,[r5,#2]
                  |L3.48|
;;;115      }
;;;116    }
000030  bd70              POP      {r4-r6,pc}
;;;117    
                          ENDP

000032  0000              DCW      0x0000
                  |L3.52|
                          DCD      os_rdy

                          AREA ||i.rt_sem_send||, CODE, READONLY, ALIGN=2

                  rt_sem_send PROC
;;;38     
;;;39     OS_RESULT rt_sem_send (OS_ID semaphore) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;40       /* Return a token to semaphore */
;;;41       P_SCB p_SCB = semaphore;
000004  462c              MOV      r4,r5
;;;42       P_TCB p_TCB;
;;;43     
;;;44       if (p_SCB->p_lnk != NULL) {
000006  6860              LDR      r0,[r4,#4]
000008  b190              CBZ      r0,|L4.48|
;;;45         /* A task is waiting for token */
;;;46         p_TCB = rt_get_first ((P_XCB)p_SCB);
00000a  4620              MOV      r0,r4
00000c  f7fffffe          BL       rt_get_first
000010  4606              MOV      r6,r0
;;;47         p_TCB->ret_val = OS_R_SEM;
000012  2003              MOVS     r0,#3
000014  f8860025          STRB     r0,[r6,#0x25]
;;;48         rt_rmv_dly (p_TCB);
000018  4630              MOV      r0,r6
00001a  f7fffffe          BL       rt_rmv_dly
;;;49         rt_dispatch (p_TCB);
00001e  4630              MOV      r0,r6
000020  f7fffffe          BL       rt_dispatch
;;;50         os_tsk.run->ret_val = OS_R_OK;
000024  2000              MOVS     r0,#0
000026  4905              LDR      r1,|L4.60|
000028  6809              LDR      r1,[r1,#0]  ; os_tsk
00002a  f8810025          STRB     r0,[r1,#0x25]
00002e  e002              B        |L4.54|
                  |L4.48|
;;;51       }
;;;52       else {
;;;53         /* Store token. */
;;;54         p_SCB->tokens++;
000030  8860              LDRH     r0,[r4,#2]
000032  1c40              ADDS     r0,r0,#1
000034  8060              STRH     r0,[r4,#2]
                  |L4.54|
;;;55       }
;;;56       return (OS_R_OK);
000036  2000              MOVS     r0,#0
;;;57     }
000038  bd70              POP      {r4-r6,pc}
;;;58     
                          ENDP

00003a  0000              DCW      0x0000
                  |L4.60|
                          DCD      os_tsk

                          AREA ||i.rt_sem_wait||, CODE, READONLY, ALIGN=2

                  rt_sem_wait PROC
;;;61     
;;;62     OS_RESULT rt_sem_wait (OS_ID semaphore, U16 timeout) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;63       /* Obtain a token; possibly wait for it */
;;;64       P_SCB p_SCB = semaphore;
000006  462c              MOV      r4,r5
;;;65     
;;;66       if (p_SCB->tokens) {
000008  8860              LDRH     r0,[r4,#2]
00000a  b120              CBZ      r0,|L5.22|
;;;67         p_SCB->tokens--;
00000c  8860              LDRH     r0,[r4,#2]
00000e  1e40              SUBS     r0,r0,#1
000010  8060              STRH     r0,[r4,#2]
;;;68         return (OS_R_OK);
000012  2000              MOVS     r0,#0
                  |L5.20|
;;;69       }
;;;70       /* No token available: wait for one */
;;;71       if (timeout == 0) {
;;;72         return (OS_R_TMO);
;;;73       }
;;;74       if (p_SCB->p_lnk != NULL) {
;;;75         rt_put_prio ((P_XCB)p_SCB, os_tsk.run);
;;;76       }
;;;77       else {
;;;78         p_SCB->p_lnk = os_tsk.run;
;;;79         os_tsk.run->p_lnk = NULL;
;;;80         os_tsk.run->p_rlnk = (P_TCB)p_SCB;
;;;81       }
;;;82       rt_block(timeout, WAIT_SEM);
;;;83       return (OS_R_TMO);
;;;84     }
000014  bd70              POP      {r4-r6,pc}
                  |L5.22|
000016  b90e              CBNZ     r6,|L5.28|
000018  2001              MOVS     r0,#1                 ;72
00001a  e7fb              B        |L5.20|
                  |L5.28|
00001c  6860              LDR      r0,[r4,#4]            ;74
00001e  b128              CBZ      r0,|L5.44|
000020  480a              LDR      r0,|L5.76|
000022  6801              LDR      r1,[r0,#0]            ;75  ; os_tsk
000024  4620              MOV      r0,r4                 ;75
000026  f7fffffe          BL       rt_put_prio
00002a  e009              B        |L5.64|
                  |L5.44|
00002c  4807              LDR      r0,|L5.76|
00002e  6800              LDR      r0,[r0,#0]            ;78  ; os_tsk
000030  6060              STR      r0,[r4,#4]            ;78
000032  2000              MOVS     r0,#0                 ;79
000034  4905              LDR      r1,|L5.76|
000036  6809              LDR      r1,[r1,#0]            ;79  ; os_tsk
000038  6048              STR      r0,[r1,#4]            ;79
00003a  4804              LDR      r0,|L5.76|
00003c  6800              LDR      r0,[r0,#0]            ;80  ; os_tsk
00003e  6084              STR      r4,[r0,#8]            ;80
                  |L5.64|
000040  2107              MOVS     r1,#7                 ;82
000042  4630              MOV      r0,r6                 ;82
000044  f7fffffe          BL       rt_block
000048  2001              MOVS     r0,#1                 ;83
00004a  e7e3              B        |L5.20|
;;;85     
                          ENDP

                  |L5.76|
                          DCD      os_tsk
