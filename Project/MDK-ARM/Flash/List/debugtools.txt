; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\debugtools.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\debugtools.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\debugtools.crf ..\..\MySrc\DebugTools.cpp]
                          THUMB

                          AREA ||i.function||, CODE, READONLY, ALIGN=2

                  function PROC
;;;46     
;;;47     unsigned char function(unsigned char * str)
000000  b570              PUSH     {r4-r6,lr}
;;;48     {
000002  b0e0              SUB      sp,sp,#0x180
000004  4604              MOV      r4,r0
;;;49     	unsigned char parm[MAX_PNUM][MAX_PNAME_LEN];//缓存数组
;;;50     	// unsigned char fnum;
;;;51     	unsigned char count = 0 , i = 0;
000006  2500              MOVS     r5,#0
000008  2600              MOVS     r6,#0
;;;52     	dev.pnum=0;
00000a  2000              MOVS     r0,#0
00000c  4931              LDR      r1,|L1.212|
00000e  7148              STRB     r0,[r1,#5]
;;;53     	for(count = 0;*str != '(';)//提取函数名
000010  bf00              NOP      
000012  e00e              B        |L1.50|
                  |L1.20|
;;;54     	{
;;;55     		if(*str != ' ')
000014  7820              LDRB     r0,[r4,#0]
000016  2820              CMP      r0,#0x20
000018  d005              BEQ      |L1.38|
;;;56     		{
;;;57     			dev.fname[count] = *str;
00001a  7821              LDRB     r1,[r4,#0]
00001c  482d              LDR      r0,|L1.212|
00001e  3038              ADDS     r0,r0,#0x38
000020  5541              STRB     r1,[r0,r5]
;;;58     			count++;
000022  1c68              ADDS     r0,r5,#1
000024  b2c5              UXTB     r5,r0
                  |L1.38|
;;;59     		}
;;;60     		str++;
000026  1c64              ADDS     r4,r4,#1
;;;61     		if(count>MAX_FNAME_LEN-1) return 1;//函数名字符数量溢出
000028  2d1f              CMP      r5,#0x1f
00002a  dd02              BLE      |L1.50|
00002c  2001              MOVS     r0,#1
                  |L1.46|
;;;62     	}
;;;63     	dev.fname[count] ='\0';//补充结尾
;;;64     	str++;//跳过(
;;;65     	while(*str != '\0')
;;;66     	{
;;;67     		for(count = 0;*str != ',' && *str != ')';)//分离提取参数
;;;68     		{
;;;69     			if(*str != ' ')//不考虑空格
;;;70     			{
;;;71     				parm[dev.pnum][count] = *str;
;;;72     				count++;//参数加一
;;;73     			}
;;;74     			str++;
;;;75     			if(count>MAX_PNAME_LEN-1) return 2;//参数字符数量溢出
;;;76     		}
;;;77     		parm[dev.pnum][count] = '\0';//补充结尾
;;;78     		dev.pnum++;//参数数量加一
;;;79     		if(dev.pnum>MAX_PNUM) return 3;//参数数量溢出
;;;80     		if(*str != ')')//检查是否出现）,代表函数检查完毕
;;;81     		{
;;;82     			str++;
;;;83     		}
;;;84     		else break;
;;;85     	}
;;;86     //	printf("pnum:%d\r\n",dev.pnum);
;;;87     	for(i =0 ; i<dev.pnum ; i++)
;;;88     	{
;;;89     		str2num(parm[i],&dev.Parm[i]);//str转化成数字
;;;90     //		printf("%d:%f\t",i,dev.Parm[i]);
;;;91     	}
;;;92     //	printf("\r\n");
;;;93     
;;;94     	return 0;
;;;95     }
00002e  b060              ADD      sp,sp,#0x180
000030  bd70              POP      {r4-r6,pc}
                  |L1.50|
000032  7820              LDRB     r0,[r4,#0]            ;53
000034  2828              CMP      r0,#0x28              ;53
000036  d1ed              BNE      |L1.20|
000038  2100              MOVS     r1,#0                 ;63
00003a  4826              LDR      r0,|L1.212|
00003c  3038              ADDS     r0,r0,#0x38           ;63
00003e  5541              STRB     r1,[r0,r5]            ;63
000040  1c64              ADDS     r4,r4,#1              ;64
000042  e030              B        |L1.166|
                  |L1.68|
000044  2500              MOVS     r5,#0                 ;67
000046  e010              B        |L1.106|
                  |L1.72|
000048  7820              LDRB     r0,[r4,#0]            ;69
00004a  2820              CMP      r0,#0x20              ;69
00004c  d008              BEQ      |L1.96|
00004e  7820              LDRB     r0,[r4,#0]            ;71
000050  4920              LDR      r1,|L1.212|
000052  7949              LDRB     r1,[r1,#5]            ;71  ; dev
000054  466a              MOV      r2,sp                 ;71
000056  eb021141          ADD      r1,r2,r1,LSL #5       ;71
00005a  5548              STRB     r0,[r1,r5]            ;71
00005c  1c68              ADDS     r0,r5,#1              ;72
00005e  b2c5              UXTB     r5,r0                 ;72
                  |L1.96|
000060  1c64              ADDS     r4,r4,#1              ;74
000062  2d1f              CMP      r5,#0x1f              ;75
000064  dd01              BLE      |L1.106|
000066  2002              MOVS     r0,#2                 ;75
000068  e7e1              B        |L1.46|
                  |L1.106|
00006a  7820              LDRB     r0,[r4,#0]            ;67
00006c  282c              CMP      r0,#0x2c              ;67
00006e  d002              BEQ      |L1.118|
000070  7820              LDRB     r0,[r4,#0]            ;67
000072  2829              CMP      r0,#0x29              ;67
000074  d1e8              BNE      |L1.72|
                  |L1.118|
000076  2000              MOVS     r0,#0                 ;77
000078  4916              LDR      r1,|L1.212|
00007a  7949              LDRB     r1,[r1,#5]            ;77  ; dev
00007c  466a              MOV      r2,sp                 ;77
00007e  eb021141          ADD      r1,r2,r1,LSL #5       ;77
000082  5548              STRB     r0,[r1,r5]            ;77
000084  4813              LDR      r0,|L1.212|
000086  7940              LDRB     r0,[r0,#5]            ;78  ; dev
000088  1c40              ADDS     r0,r0,#1              ;78
00008a  4912              LDR      r1,|L1.212|
00008c  7148              STRB     r0,[r1,#5]            ;78
00008e  4608              MOV      r0,r1                 ;79
000090  7940              LDRB     r0,[r0,#5]            ;79  ; dev
000092  280c              CMP      r0,#0xc               ;79
000094  dd01              BLE      |L1.154|
000096  2003              MOVS     r0,#3                 ;79
000098  e7c9              B        |L1.46|
                  |L1.154|
00009a  7820              LDRB     r0,[r4,#0]            ;80
00009c  2829              CMP      r0,#0x29              ;80
00009e  d001              BEQ      |L1.164|
0000a0  1c64              ADDS     r4,r4,#1              ;82
0000a2  e000              B        |L1.166|
                  |L1.164|
0000a4  e002              B        |L1.172|
                  |L1.166|
0000a6  7820              LDRB     r0,[r4,#0]            ;65
0000a8  2800              CMP      r0,#0                 ;65
0000aa  d1cb              BNE      |L1.68|
                  |L1.172|
0000ac  bf00              NOP                            ;84
0000ae  2600              MOVS     r6,#0                 ;87
0000b0  e00a              B        |L1.200|
                  |L1.178|
0000b2  4a08              LDR      r2,|L1.212|
0000b4  3208              ADDS     r2,r2,#8              ;89
0000b6  eb020186          ADD      r1,r2,r6,LSL #2       ;89
0000ba  466a              MOV      r2,sp                 ;89
0000bc  eb021046          ADD      r0,r2,r6,LSL #5       ;89
0000c0  f7fffffe          BL       str2num
0000c4  1c70              ADDS     r0,r6,#1              ;87
0000c6  b2c6              UXTB     r6,r0                 ;87
                  |L1.200|
0000c8  4802              LDR      r0,|L1.212|
0000ca  7940              LDRB     r0,[r0,#5]            ;87  ; dev
0000cc  42b0              CMP      r0,r6                 ;87
0000ce  dcf0              BGT      |L1.178|
0000d0  2000              MOVS     r0,#0                 ;94
0000d2  e7ac              B        |L1.46|
;;;96     
                          ENDP

                  |L1.212|
                          DCD      ||dev||

                          AREA ||i.getnum||, CODE, READONLY, ALIGN=1

                  getnum PROC
;;;116     */
;;;117    unsigned int getnum(unsigned char bnum ,unsigned char hexdec ,unsigned char* p)
000000  e92d41f0          PUSH     {r4-r8,lr}
;;;118    {
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4614              MOV      r4,r2
;;;119    	unsigned int t;
;;;120    
;;;121    	unsigned int res=0;
00000a  2700              MOVS     r7,#0
;;;122    	while(1)
00000c  e01e              B        |L2.76|
                  |L2.14|
;;;123    	{
;;;124    		if(bnum)bnum--;
00000e  b10d              CBZ      r5,|L2.20|
000010  1e68              SUBS     r0,r5,#1
000012  b2c5              UXTB     r5,r0
                  |L2.20|
;;;125    		if(*p<='9'&&*p>='0')t=*p-'0';	//得到数字的值
000014  7820              LDRB     r0,[r4,#0]
000016  2839              CMP      r0,#0x39
000018  dc06              BGT      |L2.40|
00001a  7820              LDRB     r0,[r4,#0]
00001c  2830              CMP      r0,#0x30
00001e  db03              BLT      |L2.40|
000020  7820              LDRB     r0,[r4,#0]
000022  f1a00830          SUB      r8,r0,#0x30
000026  e002              B        |L2.46|
                  |L2.40|
;;;126    		else t=*p-'A'+10;				//得到A~F对应的值
000028  7820              LDRB     r0,[r4,#0]
00002a  f1a00837          SUB      r8,r0,#0x37
                  |L2.46|
;;;127    		res+=t*mypow(hexdec,bnum);
00002e  4629              MOV      r1,r5
000030  4630              MOV      r0,r6
000032  f7fffffe          BL       mypow
000036  fb087700          MLA      r7,r8,r0,r7
;;;128    		p++;
00003a  1c64              ADDS     r4,r4,#1
;;;129    		if(*p=='\0' ||*p=='.')
00003c  7820              LDRB     r0,[r4,#0]
00003e  b110              CBZ      r0,|L2.70|
000040  7820              LDRB     r0,[r4,#0]
000042  282e              CMP      r0,#0x2e
000044  d102              BNE      |L2.76|
                  |L2.70|
;;;130    		{
;;;131    			return res;//数据都查完了.
000046  4638              MOV      r0,r7
;;;132    		}
;;;133    	}
;;;134    }
000048  e8bd81f0          POP      {r4-r8,pc}
                  |L2.76|
00004c  e7df              B        |L2.14|
;;;135    
                          ENDP


                          AREA ||i.mypow||, CODE, READONLY, ALIGN=1

                  mypow PROC
;;;102     */
;;;103    unsigned int mypow(unsigned char m,unsigned char n)
000000  b510              PUSH     {r4,lr}
;;;104    {
000002  4602              MOV      r2,r0
;;;105    	unsigned int result=1;
000004  2001              MOVS     r0,#1
;;;106    	while(n--)result*=m;
000006  e000              B        |L3.10|
                  |L3.8|
000008  4350              MULS     r0,r2,r0
                  |L3.10|
00000a  000b              MOVS     r3,r1
00000c  f1a10401          SUB      r4,r1,#1
000010  b2e1              UXTB     r1,r4
000012  d1f9              BNE      |L3.8|
;;;107    	return result;
;;;108    }
000014  bd10              POP      {r4,pc}
;;;109    
                          ENDP


                          AREA ||i.mystrcmp||, CODE, READONLY, ALIGN=1

                  mystrcmp PROC
;;;206    //////////////////////////////////////////////////////////////////////v
;;;207    unsigned char mystrcmp(unsigned char *str1,const  char *str2)
000000  4602              MOV      r2,r0
;;;208    {
;;;209    	while(1)
000002  e00a              B        |L4.26|
                  |L4.4|
;;;210    	{
;;;211    		if(*str1!=*str2)return 1;//不相等
000004  7810              LDRB     r0,[r2,#0]
000006  780b              LDRB     r3,[r1,#0]
000008  4298              CMP      r0,r3
00000a  d001              BEQ      |L4.16|
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;212    		if(*str1=='\0')break;//对比完成了.
;;;213    		str1++;
;;;214    		str2++;
;;;215    	}
;;;216    	return 0;//两个字符串相等
;;;217    }//////////////////////////////////////////////
00000e  4770              BX       lr
                  |L4.16|
000010  7810              LDRB     r0,[r2,#0]            ;212
000012  b900              CBNZ     r0,|L4.22|
000014  e002              B        |L4.28|
                  |L4.22|
000016  1c52              ADDS     r2,r2,#1              ;213
000018  1c49              ADDS     r1,r1,#1              ;214
                  |L4.26|
00001a  e7f3              B        |L4.4|
                  |L4.28|
00001c  bf00              NOP                            ;212
00001e  2000              MOVS     r0,#0                 ;216
000020  e7f5              B        |L4.14|
                          ENDP


                          AREA ||i.run||, CODE, READONLY, ALIGN=2

                  ||run|| PROC
;;;154    #endif
;;;2      unsigned char run(unsigned char * str)
000000  b570              PUSH     {r4-r6,lr}
;;;3      {
000002  4605              MOV      r5,r0
;;;4      	unsigned char i;
;;;5      
;;;6      	function(str);
000004  4628              MOV      r0,r5
000006  f7fffffe          BL       function
;;;7      	for(i= 0; i< dev.fnum ;i++)
00000a  2400              MOVS     r4,#0
00000c  e128              B        |L5.608|
                  |L5.14|
;;;8      	{
;;;9      		if(mystrcmp(dev.fname,dev.tab[i].name) == 0)
00000e  4898              LDR      r0,|L5.624|
000010  6800              LDR      r0,[r0,#0]  ; dev
000012  eb040244          ADD      r2,r4,r4,LSL #1
000016  eb000082          ADD      r0,r0,r2,LSL #2
00001a  6841              LDR      r1,[r0,#4]
00001c  4894              LDR      r0,|L5.624|
00001e  3038              ADDS     r0,r0,#0x38
000020  f7fffffe          BL       mystrcmp
000024  2800              CMP      r0,#0
000026  d17b              BNE      |L5.288|
;;;10     		{
;;;11     			switch(dev.pnum){
000028  4891              LDR      r0,|L5.624|
00002a  7940              LDRB     r0,[r0,#5]  ; dev
00002c  280a              CMP      r0,#0xa
00002e  d20d              BCS      |L5.76|
000030  e8dff000          TBB      [pc,r0]
000034  050d1a2b          DCB      0x05,0x0d,0x1a,0x2b
000038  40597798          DCB      0x40,0x59,0x77,0x98
00003c  bde6              DCB      0xbd,0xe6
;;;12     				case 0:(*(unsigned int(*)())dev.tab[i].func)();break;
00003e  498c              LDR      r1,|L5.624|
000040  6809              LDR      r1,[r1,#0]  ; dev
000042  eb040244          ADD      r2,r4,r4,LSL #1
000046  f8510022          LDR      r0,[r1,r2,LSL #2]
00004a  4780              BLX      r0
                  |L5.76|
00004c  e105              B        |L5.602|
;;;13     				case 1:(*(unsigned int(*)(float))dev.tab[i].func)(dev.Parm[0]);break;
00004e  4988              LDR      r1,|L5.624|
000050  6809              LDR      r1,[r1,#0]  ; dev
000052  eb040244          ADD      r2,r4,r4,LSL #1
000056  f8510022          LDR      r0,[r1,r2,LSL #2]
00005a  4985              LDR      r1,|L5.624|
00005c  edd10a02          VLDR     s1,[r1,#8]
000060  eeb00a60          VMOV.F32 s0,s1
000064  4780              BLX      r0
000066  e0f8              B        |L5.602|
;;;14     				case 2:(*(unsigned int(*)(float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1]);break;
000068  4981              LDR      r1,|L5.624|
00006a  6809              LDR      r1,[r1,#0]  ; dev
00006c  eb040244          ADD      r2,r4,r4,LSL #1
000070  f8510022          LDR      r0,[r1,r2,LSL #2]
000074  497e              LDR      r1,|L5.624|
000076  ed911a03          VLDR     s2,[r1,#0xc]
00007a  eef00a41          VMOV.F32 s1,s2
00007e  ed911a02          VLDR     s2,[r1,#8]
000082  eeb00a41          VMOV.F32 s0,s2
000086  4780              BLX      r0
000088  e0e7              B        |L5.602|
;;;15     				case 3:(*(unsigned int(*)(float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2]);break;
00008a  4979              LDR      r1,|L5.624|
00008c  6809              LDR      r1,[r1,#0]  ; dev
00008e  eb040244          ADD      r2,r4,r4,LSL #1
000092  f8510022          LDR      r0,[r1,r2,LSL #2]
000096  4976              LDR      r1,|L5.624|
000098  edd11a04          VLDR     s3,[r1,#0x10]
00009c  eeb01a61          VMOV.F32 s2,s3
0000a0  edd11a03          VLDR     s3,[r1,#0xc]
0000a4  eef00a61          VMOV.F32 s1,s3
0000a8  edd11a02          VLDR     s3,[r1,#8]
0000ac  eeb00a61          VMOV.F32 s0,s3
0000b0  4780              BLX      r0
0000b2  e0d2              B        |L5.602|
;;;16     				case 4:(*(unsigned int(*)(float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3]);break;
0000b4  496e              LDR      r1,|L5.624|
0000b6  6809              LDR      r1,[r1,#0]  ; dev
0000b8  eb040244          ADD      r2,r4,r4,LSL #1
0000bc  f8510022          LDR      r0,[r1,r2,LSL #2]
0000c0  496b              LDR      r1,|L5.624|
0000c2  ed912a05          VLDR     s4,[r1,#0x14]
0000c6  eef01a42          VMOV.F32 s3,s4
0000ca  ed912a04          VLDR     s4,[r1,#0x10]
0000ce  eeb01a42          VMOV.F32 s2,s4
0000d2  ed912a03          VLDR     s4,[r1,#0xc]
0000d6  eef00a42          VMOV.F32 s1,s4
0000da  ed912a02          VLDR     s4,[r1,#8]
0000de  eeb00a42          VMOV.F32 s0,s4
0000e2  4780              BLX      r0
0000e4  e0b9              B        |L5.602|
;;;17     				case 5:(*(unsigned int(*)(float,float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3],dev.Parm[4]);break;
0000e6  4962              LDR      r1,|L5.624|
0000e8  6809              LDR      r1,[r1,#0]  ; dev
0000ea  eb040244          ADD      r2,r4,r4,LSL #1
0000ee  f8510022          LDR      r0,[r1,r2,LSL #2]
0000f2  495f              LDR      r1,|L5.624|
0000f4  edd12a06          VLDR     s5,[r1,#0x18]
0000f8  eeb02a62          VMOV.F32 s4,s5
0000fc  edd12a05          VLDR     s5,[r1,#0x14]
000100  eef01a62          VMOV.F32 s3,s5
000104  edd12a04          VLDR     s5,[r1,#0x10]
000108  eeb01a62          VMOV.F32 s2,s5
00010c  edd12a03          VLDR     s5,[r1,#0xc]
000110  eef00a62          VMOV.F32 s1,s5
000114  edd12a02          VLDR     s5,[r1,#8]
000118  eeb00a62          VMOV.F32 s0,s5
00011c  4780              BLX      r0
00011e  e09c              B        |L5.602|
                  |L5.288|
000120  e09c              B        |L5.604|
;;;18     				case 6:(*(unsigned int(*)(float,float,float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3],dev.Parm[4],dev.Parm[5]);break;
000122  4953              LDR      r1,|L5.624|
000124  6809              LDR      r1,[r1,#0]  ; dev
000126  eb040244          ADD      r2,r4,r4,LSL #1
00012a  f8510022          LDR      r0,[r1,r2,LSL #2]
00012e  4950              LDR      r1,|L5.624|
000130  ed913a07          VLDR     s6,[r1,#0x1c]
000134  eef02a43          VMOV.F32 s5,s6
000138  ed913a06          VLDR     s6,[r1,#0x18]
00013c  eeb02a43          VMOV.F32 s4,s6
000140  ed913a05          VLDR     s6,[r1,#0x14]
000144  eef01a43          VMOV.F32 s3,s6
000148  ed913a04          VLDR     s6,[r1,#0x10]
00014c  eeb01a43          VMOV.F32 s2,s6
000150  ed913a03          VLDR     s6,[r1,#0xc]
000154  eef00a43          VMOV.F32 s1,s6
000158  ed913a02          VLDR     s6,[r1,#8]
00015c  eeb00a43          VMOV.F32 s0,s6
000160  4780              BLX      r0
000162  e07a              B        |L5.602|
;;;19     				case 7:(*(unsigned int(*)(float,float,float,float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3],dev.Parm[4],dev.Parm[5],dev.Parm[6]);break;
000164  4942              LDR      r1,|L5.624|
000166  6809              LDR      r1,[r1,#0]  ; dev
000168  eb040244          ADD      r2,r4,r4,LSL #1
00016c  f8510022          LDR      r0,[r1,r2,LSL #2]
000170  493f              LDR      r1,|L5.624|
000172  edd13a08          VLDR     s7,[r1,#0x20]
000176  eeb03a63          VMOV.F32 s6,s7
00017a  edd13a07          VLDR     s7,[r1,#0x1c]
00017e  eef02a63          VMOV.F32 s5,s7
000182  edd13a06          VLDR     s7,[r1,#0x18]
000186  eeb02a63          VMOV.F32 s4,s7
00018a  edd13a05          VLDR     s7,[r1,#0x14]
00018e  eef01a63          VMOV.F32 s3,s7
000192  edd13a04          VLDR     s7,[r1,#0x10]
000196  eeb01a63          VMOV.F32 s2,s7
00019a  edd13a03          VLDR     s7,[r1,#0xc]
00019e  eef00a63          VMOV.F32 s1,s7
0001a2  edd13a02          VLDR     s7,[r1,#8]
0001a6  eeb00a63          VMOV.F32 s0,s7
0001aa  4780              BLX      r0
0001ac  e055              B        |L5.602|
;;;20     				case 8:(*(unsigned int(*)(float,float,float,float,float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3],dev.Parm[4],dev.Parm[5],dev.Parm[6],dev.Parm[7]);break;
0001ae  4930              LDR      r1,|L5.624|
0001b0  6809              LDR      r1,[r1,#0]  ; dev
0001b2  eb040244          ADD      r2,r4,r4,LSL #1
0001b6  f8510022          LDR      r0,[r1,r2,LSL #2]
0001ba  492d              LDR      r1,|L5.624|
0001bc  ed914a09          VLDR     s8,[r1,#0x24]
0001c0  eef03a44          VMOV.F32 s7,s8
0001c4  ed914a08          VLDR     s8,[r1,#0x20]
0001c8  eeb03a44          VMOV.F32 s6,s8
0001cc  ed914a07          VLDR     s8,[r1,#0x1c]
0001d0  eef02a44          VMOV.F32 s5,s8
0001d4  ed914a06          VLDR     s8,[r1,#0x18]
0001d8  eeb02a44          VMOV.F32 s4,s8
0001dc  ed914a05          VLDR     s8,[r1,#0x14]
0001e0  eef01a44          VMOV.F32 s3,s8
0001e4  ed914a04          VLDR     s8,[r1,#0x10]
0001e8  eeb01a44          VMOV.F32 s2,s8
0001ec  ed914a03          VLDR     s8,[r1,#0xc]
0001f0  eef00a44          VMOV.F32 s1,s8
0001f4  ed914a02          VLDR     s8,[r1,#8]
0001f8  eeb00a44          VMOV.F32 s0,s8
0001fc  4780              BLX      r0
0001fe  e02c              B        |L5.602|
;;;21     				case 9:(*(unsigned int(*)(float,float,float,float,float,float,float,float,float))dev.tab[i].func)(dev.Parm[0],dev.Parm[1],dev.Parm[2],dev.Parm[3],dev.Parm[4],dev.Parm[5],dev.Parm[6],dev.Parm[7],dev.Parm[8]);break;
000200  491b              LDR      r1,|L5.624|
000202  6809              LDR      r1,[r1,#0]  ; dev
000204  eb040244          ADD      r2,r4,r4,LSL #1
000208  f8510022          LDR      r0,[r1,r2,LSL #2]
00020c  4918              LDR      r1,|L5.624|
00020e  edd14a0a          VLDR     s9,[r1,#0x28]
000212  eeb04a64          VMOV.F32 s8,s9
000216  edd14a09          VLDR     s9,[r1,#0x24]
00021a  eef03a64          VMOV.F32 s7,s9
00021e  edd14a08          VLDR     s9,[r1,#0x20]
000222  eeb03a64          VMOV.F32 s6,s9
000226  edd14a07          VLDR     s9,[r1,#0x1c]
00022a  eef02a64          VMOV.F32 s5,s9
00022e  edd14a06          VLDR     s9,[r1,#0x18]
000232  eeb02a64          VMOV.F32 s4,s9
000236  edd14a05          VLDR     s9,[r1,#0x14]
00023a  eef01a64          VMOV.F32 s3,s9
00023e  edd14a04          VLDR     s9,[r1,#0x10]
000242  eeb01a64          VMOV.F32 s2,s9
000246  edd14a03          VLDR     s9,[r1,#0xc]
00024a  eef00a64          VMOV.F32 s1,s9
00024e  edd14a02          VLDR     s9,[r1,#8]
000252  eeb00a64          VMOV.F32 s0,s9
000256  4780              BLX      r0
000258  bf00              NOP      
                  |L5.602|
00025a  bf00              NOP                            ;12
                  |L5.604|
00025c  1c60              ADDS     r0,r4,#1              ;7
00025e  b2c4              UXTB     r4,r0                 ;7
                  |L5.608|
000260  4803              LDR      r0,|L5.624|
000262  7900              LDRB     r0,[r0,#4]            ;7  ; dev
000264  42a0              CMP      r0,r4                 ;7
000266  f73faed2          BGT      |L5.14|
;;;22     			}
;;;23     		}
;;;24     	}
;;;25     	return 0;
00026a  2000              MOVS     r0,#0
;;;26     }
00026c  bd70              POP      {r4-r6,pc}
;;;27     
                          ENDP

00026e  0000              DCW      0x0000
                  |L5.624|
                          DCD      ||dev||

                          AREA ||i.str2num||, CODE, READONLY, ALIGN=2

                  str2num PROC
;;;147    
;;;148    unsigned char str2num(unsigned char*str,float *res)
000000  e92d4ff8          PUSH     {r3-r11,lr}
;;;149    {
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
;;;150    	unsigned char DotPreNum=0,DotNextNum=0;	//数字的位数
000008  2600              MOVS     r6,#0
00000a  46b0              MOV      r8,r6
;;;151    	unsigned char *P,*PP;
;;;152    	unsigned char hexdec=10;//默认为十进制数据
00000c  200a              MOVS     r0,#0xa
00000e  9000              STR      r0,[sp,#0]
;;;153    	unsigned char polarity=0;
000010  f04f0a00          MOV      r10,#0
;;;154    	unsigned char float_flag=0;
000014  f04f0b00          MOV      r11,#0
;;;155    	P=str;
000018  463c              MOV      r4,r7
;;;156    	*res=0;//清零.
00001a  ed9f0a4f          VLDR     s0,|L6.344|
00001e  ed850a00          VSTR     s0,[r5,#0]
;;;157    	while(1)
000022  e03e              B        |L6.162|
                  |L6.36|
;;;158    	{
;;;159    		if((*P=='.')||(*P=='-')||(*P<='9'&&*P>='0')||(*P<='F'&&*P>='A')||( (*P=='X' || *P=='x') &&DotPreNum==1))//参数合法
000024  7820              LDRB     r0,[r4,#0]
000026  282e              CMP      r0,#0x2e
000028  d016              BEQ      |L6.88|
00002a  7820              LDRB     r0,[r4,#0]
00002c  282d              CMP      r0,#0x2d
00002e  d013              BEQ      |L6.88|
000030  7820              LDRB     r0,[r4,#0]
000032  2839              CMP      r0,#0x39
000034  dc02              BGT      |L6.60|
000036  7820              LDRB     r0,[r4,#0]
000038  2830              CMP      r0,#0x30
00003a  da0d              BGE      |L6.88|
                  |L6.60|
00003c  7820              LDRB     r0,[r4,#0]
00003e  2846              CMP      r0,#0x46
000040  dc02              BGT      |L6.72|
000042  7820              LDRB     r0,[r4,#0]
000044  2841              CMP      r0,#0x41
000046  da07              BGE      |L6.88|
                  |L6.72|
000048  7820              LDRB     r0,[r4,#0]
00004a  2858              CMP      r0,#0x58
00004c  d002              BEQ      |L6.84|
00004e  7820              LDRB     r0,[r4,#0]
000050  2878              CMP      r0,#0x78
000052  d11f              BNE      |L6.148|
                  |L6.84|
000054  2e01              CMP      r6,#1
000056  d11d              BNE      |L6.148|
                  |L6.88|
;;;160    		{
;;;161    			if(*P>='A')hexdec=16;	//字符串中存在字母,为16进制格式.
000058  7820              LDRB     r0,[r4,#0]
00005a  2841              CMP      r0,#0x41
00005c  db01              BLT      |L6.98|
00005e  2010              MOVS     r0,#0x10
000060  9000              STR      r0,[sp,#0]
                  |L6.98|
;;;162    			if( *P=='-' )
000062  7820              LDRB     r0,[r4,#0]
000064  282d              CMP      r0,#0x2d
000066  d102              BNE      |L6.110|
;;;163    			{
;;;164    				polarity=1;
000068  f04f0a01          MOV      r10,#1
00006c  e018              B        |L6.160|
                  |L6.110|
;;;165    			}
;;;166    			else if(*P=='.')
00006e  7820              LDRB     r0,[r4,#0]
000070  282e              CMP      r0,#0x2e
000072  d104              BNE      |L6.126|
;;;167    			{
;;;168    				float_flag = 1;
000074  f04f0b01          MOV      r11,#1
;;;169    				// *P = '\0';//将.转换成'\0'
;;;170    				PP = P+1;
000078  f1040901          ADD      r9,r4,#1
00007c  e010              B        |L6.160|
                  |L6.126|
;;;171    			}
;;;172    			else
;;;173    			{
;;;174    				if(float_flag) DotNextNum++;
00007e  f1bb0f00          CMP      r11,#0
000082  d004              BEQ      |L6.142|
000084  f1080001          ADD      r0,r8,#1
000088  f00008ff          AND      r8,r0,#0xff
00008c  e008              B        |L6.160|
                  |L6.142|
;;;175    				else DotPreNum++;					//位数增加.
00008e  1c70              ADDS     r0,r6,#1
000090  b2c6              UXTB     r6,r0
000092  e005              B        |L6.160|
                  |L6.148|
;;;176    			}
;;;177    
;;;178    		}
;;;179    		else if(*P=='\0')break;	//碰到结束符,退出.
000094  7820              LDRB     r0,[r4,#0]
000096  b900              CBNZ     r0,|L6.154|
000098  e004              B        |L6.164|
                  |L6.154|
;;;180    		else return 1;				//不全是十进制或者16进制数据.
00009a  2001              MOVS     r0,#1
                  |L6.156|
;;;181    		P++;
;;;182    	}
;;;183    	if(polarity) P=str+1;
;;;184    	else P=str;			    //重新定位到字符串开始的地址.
;;;185    	if(hexdec==16)		//16进制数据
;;;186    	{
;;;187    		if(DotPreNum<3)return 2;			//位数小于3，直接退出.因为0X就占了2个,如果0X后面不跟数据,则该数据非法.
;;;188    		if(*P=='0' && ((*(P+1)=='X') || (*(P+1)=='x')) )//必须以'0X'开头.
;;;189    		{
;;;190    			P+=2;	//偏移到数据起始地址.
;;;191    			DotPreNum-=2;//减去偏移量
;;;192    		}else return 3;//起始头的格式不对
;;;193    	}else if(DotPreNum==0)return 4;//位数为0，直接退出.
;;;194    	 // printf("%d\t%d",DotPreNum,DotNextNum);
;;;195    	if(float_flag)
;;;196    		*res = (float)(getnum(DotPreNum,hexdec,P))+ (float)getnum(DotNextNum,hexdec,PP)/mypow(10,DotNextNum);
;;;197    		// *res =  (float)getnum(DotNextNum,hexdec,PP);
;;;198    	else
;;;199    		*res = (float)getnum(DotPreNum,hexdec,P);
;;;200    
;;;201    	if(polarity) *res = -*res;
;;;202    
;;;203    	return 0;//成功转换
;;;204    }
00009c  e8bd8ff8          POP      {r3-r11,pc}
                  |L6.160|
0000a0  1c64              ADDS     r4,r4,#1              ;181
                  |L6.162|
0000a2  e7bf              B        |L6.36|
                  |L6.164|
0000a4  bf00              NOP                            ;179
0000a6  f1ba0f00          CMP      r10,#0                ;183
0000aa  d001              BEQ      |L6.176|
0000ac  1c7c              ADDS     r4,r7,#1              ;183
0000ae  e000              B        |L6.178|
                  |L6.176|
0000b0  463c              MOV      r4,r7                 ;184
                  |L6.178|
0000b2  9800              LDR      r0,[sp,#0]            ;185
0000b4  2810              CMP      r0,#0x10              ;185
0000b6  d112              BNE      |L6.222|
0000b8  2e03              CMP      r6,#3                 ;187
0000ba  da01              BGE      |L6.192|
0000bc  2002              MOVS     r0,#2                 ;187
0000be  e7ed              B        |L6.156|
                  |L6.192|
0000c0  7820              LDRB     r0,[r4,#0]            ;188
0000c2  2830              CMP      r0,#0x30              ;188
0000c4  d109              BNE      |L6.218|
0000c6  7860              LDRB     r0,[r4,#1]            ;188
0000c8  2858              CMP      r0,#0x58              ;188
0000ca  d002              BEQ      |L6.210|
0000cc  7860              LDRB     r0,[r4,#1]            ;188
0000ce  2878              CMP      r0,#0x78              ;188
0000d0  d103              BNE      |L6.218|
                  |L6.210|
0000d2  1ca4              ADDS     r4,r4,#2              ;190
0000d4  1eb0              SUBS     r0,r6,#2              ;191
0000d6  b2c6              UXTB     r6,r0                 ;191
0000d8  e004              B        |L6.228|
                  |L6.218|
0000da  2003              MOVS     r0,#3                 ;192
0000dc  e7de              B        |L6.156|
                  |L6.222|
0000de  b90e              CBNZ     r6,|L6.228|
0000e0  2004              MOVS     r0,#4                 ;193
0000e2  e7db              B        |L6.156|
                  |L6.228|
0000e4  f1bb0f00          CMP      r11,#0                ;195
0000e8  d020              BEQ      |L6.300|
0000ea  4622              MOV      r2,r4                 ;196
0000ec  4630              MOV      r0,r6                 ;196
0000ee  9900              LDR      r1,[sp,#0]            ;196
0000f0  f7fffffe          BL       getnum
0000f4  ee000a10          VMOV     s0,r0                 ;196
0000f8  eef80a40          VCVT.F32.U32 s1,s0                 ;196
0000fc  464a              MOV      r2,r9                 ;196
0000fe  4640              MOV      r0,r8                 ;196
000100  9900              LDR      r1,[sp,#0]            ;196
000102  f7fffffe          BL       getnum
000106  ee000a10          VMOV     s0,r0                 ;196
00010a  eeb81a40          VCVT.F32.U32 s2,s0                 ;196
00010e  4641              MOV      r1,r8                 ;196
000110  200a              MOVS     r0,#0xa               ;196
000112  f7fffffe          BL       mypow
000116  ee000a10          VMOV     s0,r0                 ;196
00011a  eeb80a40          VCVT.F32.U32 s0,s0                 ;196
00011e  eec11a00          VDIV.F32 s3,s2,s0              ;196
000122  ee300aa1          VADD.F32 s0,s1,s3              ;196
000126  ed850a00          VSTR     s0,[r5,#0]            ;196
00012a  e00a              B        |L6.322|
                  |L6.300|
00012c  4622              MOV      r2,r4                 ;199
00012e  4630              MOV      r0,r6                 ;199
000130  9900              LDR      r1,[sp,#0]            ;199
000132  f7fffffe          BL       getnum
000136  ee000a10          VMOV     s0,r0                 ;199
00013a  eeb80a40          VCVT.F32.U32 s0,s0                 ;199
00013e  ed850a00          VSTR     s0,[r5,#0]            ;199
                  |L6.322|
000142  f1ba0f00          CMP      r10,#0                ;201
000146  d005              BEQ      |L6.340|
000148  ed950a00          VLDR     s0,[r5,#0]            ;201
00014c  eeb10a40          VNEG.F32 s0,s0                 ;201
000150  ed850a00          VSTR     s0,[r5,#0]            ;201
                  |L6.340|
000154  2000              MOVS     r0,#0                 ;203
000156  e7a1              B        |L6.156|
;;;205    
                          ENDP

                  |L6.344|
000158  00000000          DCFS     0x00000000 ; 0

                          AREA ||.ARM.exidx||, LINKORDER=||i.mystrcmp||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i.mystrcmp||
                          DCD      0x00000001

                          AREA ||area_number.8||, LINKORDER=||i.mypow||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.8||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.mypow||
                          DCD      0x00000001

                          AREA ||area_number.9||, LINKORDER=||i.getnum||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.9||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.getnum||
                          DCD      0x00000001

                          AREA ||area_number.10||, LINKORDER=||i.str2num||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.10||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.str2num||
                          DCD      0x00000001

                          AREA ||area_number.11||, LINKORDER=||i.function||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.11||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.function||
                          DCD      0x00000001

                          AREA ||area_number.12||, LINKORDER=||i.run||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.12||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.run||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\MySrc\\DebugTools.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___14_DebugTools_cpp_run___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___14_DebugTools_cpp_run___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___14_DebugTools_cpp_run___Z7__REVSHi|
#line 144
|__asm___14_DebugTools_cpp_run___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___14_DebugTools_cpp_run___Z5__RRXj|
#line 300
|__asm___14_DebugTools_cpp_run___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
