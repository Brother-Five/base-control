; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_membox.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_membox.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rt_membox.crf ..\..\RTX\src\rt_MemBox.c]
                          THUMB

                          AREA ||i._calloc_box||, CODE, READONLY, ALIGN=1

                  _calloc_box PROC
;;;96     
;;;97     void *_calloc_box (void *box_mem)  {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;98       /* Allocate a 0-initialized memory block and return start address. */
;;;99       void *free;
;;;100      U32 *p;
;;;101      U32 i;
;;;102    
;;;103      free = _alloc_box (box_mem);
000006  4638              MOV      r0,r7
000008  f7fffffe          BL       _alloc_box
00000c  4604              MOV      r4,r0
;;;104      if (free)  {
00000e  b144              CBZ      r4,|L1.34|
;;;105        p = free;
000010  4625              MOV      r5,r4
;;;106        for (i = ((P_BM) box_mem)->blk_size; i; i -= 4)  {
000012  68be              LDR      r6,[r7,#8]
000014  e003              B        |L1.30|
                  |L1.22|
;;;107          *p = 0;
000016  2000              MOVS     r0,#0
000018  6028              STR      r0,[r5,#0]
;;;108          p++;
00001a  1d2d              ADDS     r5,r5,#4
00001c  1f36              SUBS     r6,r6,#4              ;106
                  |L1.30|
00001e  2e00              CMP      r6,#0                 ;106
000020  d1f9              BNE      |L1.22|
                  |L1.34|
;;;109        }
;;;110      }
;;;111      return (free);
000022  4620              MOV      r0,r4
;;;112    }
000024  e8bd81f0          POP      {r4-r8,pc}
;;;113    
                          ENDP


                          AREA ||i._init_box||, CODE, READONLY, ALIGN=1

                  _init_box PROC
;;;24     
;;;25     int _init_box  (void *box_mem, U32 box_size, U32 blk_size) {
000000  b5f0              PUSH     {r4-r7,lr}
000002  4603              MOV      r3,r0
000004  460e              MOV      r6,r1
;;;26       /* Initialize memory block system, returns 0 if OK, 1 if fails. */
;;;27       void *end;
;;;28       void *blk;
;;;29       void *next;
;;;30       U32  sizeof_bm;
;;;31     
;;;32       /* Create memory structure. */
;;;33       if (blk_size & BOX_ALIGN_8) {
000006  f0024000          AND      r0,r2,#0x80000000
00000a  b130              CBZ      r0,|L2.26|
;;;34         /* Memory blocks 8-byte aligned. */ 
;;;35         blk_size = ((blk_size & ~BOX_ALIGN_8) + 7) & ~7;
00000c  f0224000          BIC      r0,r2,#0x80000000
000010  1dc0              ADDS     r0,r0,#7
000012  f0200207          BIC      r2,r0,#7
;;;36         sizeof_bm = (sizeof (struct OS_BM) + 7) & ~7;
000016  2510              MOVS     r5,#0x10
000018  e003              B        |L2.34|
                  |L2.26|
;;;37       }
;;;38       else {
;;;39         /* Memory blocks 4-byte aligned. */
;;;40         blk_size = (blk_size + 3) & ~3;
00001a  1cd0              ADDS     r0,r2,#3
00001c  f0200203          BIC      r2,r0,#3
;;;41         sizeof_bm = sizeof (struct OS_BM);
000020  250c              MOVS     r5,#0xc
                  |L2.34|
;;;42       }
;;;43       if (blk_size == 0) {
000022  b90a              CBNZ     r2,|L2.40|
;;;44         return (1);
000024  2001              MOVS     r0,#1
                  |L2.38|
;;;45       }
;;;46       if ((blk_size + sizeof_bm) > box_size) {
;;;47         return (1);
;;;48       }
;;;49       /* Create a Memory structure. */
;;;50       blk = ((U8 *) box_mem) + sizeof_bm;
;;;51       ((P_BM) box_mem)->free = blk;
;;;52       end = ((U8 *) box_mem) + box_size;
;;;53       ((P_BM) box_mem)->end      = end;
;;;54       ((P_BM) box_mem)->blk_size = blk_size;
;;;55     
;;;56       /* Link all free blocks using offsets. */
;;;57       end = ((U8 *) end) - blk_size;
;;;58       while (1)  {
;;;59         next = ((U8 *) blk) + blk_size;
;;;60         if (next > end)  break;
;;;61         *((void **)blk) = next;
;;;62         blk = next;
;;;63       }
;;;64       /* end marker */
;;;65       *((void **)blk) = 0;
;;;66       return (0);
;;;67     }
000026  bdf0              POP      {r4-r7,pc}
                  |L2.40|
000028  1950              ADDS     r0,r2,r5              ;46
00002a  42b0              CMP      r0,r6                 ;46
00002c  d901              BLS      |L2.50|
00002e  2001              MOVS     r0,#1                 ;47
000030  e7f9              B        |L2.38|
                  |L2.50|
000032  1959              ADDS     r1,r3,r5              ;50
000034  6019              STR      r1,[r3,#0]            ;51
000036  199f              ADDS     r7,r3,r6              ;52
000038  605f              STR      r7,[r3,#4]            ;53
00003a  609a              STR      r2,[r3,#8]            ;54
00003c  1abf              SUBS     r7,r7,r2              ;57
00003e  e005              B        |L2.76|
                  |L2.64|
000040  188c              ADDS     r4,r1,r2              ;59
000042  42bc              CMP      r4,r7                 ;60
000044  d900              BLS      |L2.72|
000046  e002              B        |L2.78|
                  |L2.72|
000048  600c              STR      r4,[r1,#0]            ;61
00004a  4621              MOV      r1,r4                 ;62
                  |L2.76|
00004c  e7f8              B        |L2.64|
                  |L2.78|
00004e  bf00              NOP                            ;60
000050  2000              MOVS     r0,#0                 ;65
000052  6008              STR      r0,[r1,#0]            ;65
000054  bf00              NOP                            ;66
000056  e7e6              B        |L2.38|
;;;68     
                          ENDP


                          AREA ||i.rt_alloc_box||, CODE, READONLY, ALIGN=1

                  rt_alloc_box PROC
;;;70     
;;;71     void *rt_alloc_box (void *box_mem) {
000000  4601              MOV      r1,r0
;;;72       /* Allocate a memory block and return start address. */
;;;73       void **free;
;;;74     #ifndef __USE_EXCLUSIVE_ACCESS
;;;75       int  irq_dis;
;;;76     
;;;77       irq_dis = __disable_irq ();
;;;78       free = ((P_BM) box_mem)->free;
;;;79       if (free) {
;;;80         ((P_BM) box_mem)->free = *free;
;;;81       }
;;;82       if (!irq_dis) __enable_irq ();
;;;83     #else
;;;84       do {
000002  bf00              NOP      
                  |L3.4|
;;;85         if ((free = (void **)__ldrex(&((P_BM) box_mem)->free)) == 0) {
000004  e8510f00          LDREX    r0,[r1,#0]
000008  b910              CBNZ     r0,|L3.16|
;;;86           __clrex();
00000a  f3bf8f2f          CLREX    
;;;87           break;
00000e  e004              B        |L3.26|
                  |L3.16|
;;;88         }
;;;89       } while (__strex((U32)*free, &((P_BM) box_mem)->free));
000010  6803              LDR      r3,[r0,#0]
000012  e8413200          STREX    r2,r3,[r1,#0]
000016  2a00              CMP      r2,#0
000018  d1f4              BNE      |L3.4|
                  |L3.26|
00001a  bf00              NOP                            ;87
;;;90     #endif
;;;91       return (free);
;;;92     }
00001c  4770              BX       lr
;;;93     
                          ENDP


                          AREA ||i.rt_free_box||, CODE, READONLY, ALIGN=1

                  rt_free_box PROC
;;;116    
;;;117    int rt_free_box (void *box_mem, void *box) {
000000  4602              MOV      r2,r0
;;;118      /* Free a memory block, returns 0 if OK, 1 if box does not belong to box_mem */
;;;119    #ifndef __USE_EXCLUSIVE_ACCESS
;;;120      int irq_dis;
;;;121    #endif
;;;122    
;;;123      if (box < box_mem || box >= ((P_BM) box_mem)->end) {
000002  4291              CMP      r1,r2
000004  d302              BCC      |L4.12|
000006  6850              LDR      r0,[r2,#4]
000008  4288              CMP      r0,r1
00000a  d801              BHI      |L4.16|
                  |L4.12|
;;;124        return (1);
00000c  2001              MOVS     r0,#1
                  |L4.14|
;;;125      }
;;;126    
;;;127    #ifndef __USE_EXCLUSIVE_ACCESS
;;;128      irq_dis = __disable_irq ();
;;;129      *((void **)box) = ((P_BM) box_mem)->free;
;;;130      ((P_BM) box_mem)->free = box;
;;;131      if (!irq_dis) __enable_irq ();
;;;132    #else
;;;133      do {
;;;134        *((void **)box) = (void *)__ldrex(&((P_BM) box_mem)->free);
;;;135      } while (__strex ((U32)box, &((P_BM) box_mem)->free));
;;;136    #endif
;;;137      return (0);
;;;138    }
00000e  4770              BX       lr
                  |L4.16|
000010  bf00              NOP                            ;133
                  |L4.18|
000012  e8520f00          LDREX    r0,[r2,#0]            ;134
000016  6008              STR      r0,[r1,#0]            ;134
000018  e8421000          STREX    r0,r1,[r2,#0]         ;135
00001c  2800              CMP      r0,#0                 ;135
00001e  d1f8              BNE      |L4.18|
000020  bf00              NOP                            ;137
000022  e7f4              B        |L4.14|
;;;139    
                          ENDP

