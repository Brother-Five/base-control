; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\bsp.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\bsp.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\bsp.crf ..\..\User\bsp_stm32f4xx\src\bsp.c]
                          THUMB

                          AREA ||i.bsp_Idle||, CODE, READONLY, ALIGN=1

                  bsp_Idle PROC
;;;104    */
;;;105    void bsp_Idle(void)
000000  4770              BX       lr
;;;106    {
;;;107    	/* --- 喂狗 */
;;;108    
;;;109    	/* --- 让CPU进入休眠，由Systick定时中断唤醒或者其他中断唤醒 */
;;;110    
;;;111    	/* 对于 emWin 图形库，可以插入图形库需要的轮询函数 */
;;;112    	//GUI_Exec();
;;;113    
;;;114    	/* 对于 uIP 协议实现，可以插入uip轮询函数 */
;;;115    }
                          ENDP


                          AREA ||i.bsp_Init||, CODE, READONLY, ALIGN=2

                  bsp_Init PROC
;;;11     */
;;;12     void bsp_Init(void)
000000  b510              PUSH     {r4,lr}
;;;13     {
;;;14     	
;;;15     	/*
;;;16     		由于ST固件库的启动文件已经执行了CPU系统时钟的初始化，所以不必再次重复配置系统时钟。
;;;17     		启动文件配置了CPU主时钟频率、内部Flash访问速度和可选的外部SRAM FSMC初始化。
;;;18     
;;;19     		系统时钟缺省配置为168MHz，如果需要更改，可以修改 system_stm32f4xx.c 文件
;;;20     	*/
;;;21     	UsasrFrameInit();
000002  f7fffffe          BL       UsasrFrameInit
;;;22     	bsp_InitUart();
000006  f7fffffe          BL       bsp_InitUart
;;;23     	bsp_InitLed();
00000a  f7fffffe          BL       bsp_InitLed
;;;24     	bsp_ParaInit();
00000e  f7fffffe          BL       bsp_ParaInit
;;;25     //	bsp_InitSoftTimer();
;;;26     	bsp_InitHardTimer();
000012  f7fffffe          BL       bsp_InitHardTimer
;;;27     //	bsp_InitUart(); 	/* 初始化串口 */
;;;28     //	bsp_InitKey();
;;;29     //	bsp_InitEXTI();
;;;30     	
;;;31     	Initial_System_Timer();
000016  f7fffffe          BL       Initial_System_Timer
;;;32     	/* 针对不同的应用程序，添加需要的底层驱动模块初始化函数 */
;;;33     	bsp_RC_Init();
00001a  f7fffffe          BL       bsp_RC_Init
;;;34     	
;;;35     	bsp_InitCAN();
00001e  f7fffffe          BL       bsp_InitCAN
;;;36     
;;;37     	TIM2_PWM_Configuration();
000022  f7fffffe          BL       TIM2_PWM_Configuration
;;;38     	TIM3_PWM_Configuration();
000026  f7fffffe          BL       TIM3_PWM_Configuration
;;;39     	Turn_PlateMotor_IO_Configuratuion();
00002a  f7fffffe          BL       Turn_PlateMotor_IO_Configuratuion
;;;40     	Turnplate_motor_cofiguration();
00002e  f7fffffe          BL       Turnplate_motor_cofiguration
;;;41     //	bsp_InitEXTI();
;;;42     //	ExtiGpioInit();
;;;43     	Hardware_Random_Init();
000032  f7fffffe          BL       Hardware_Random_Init
;;;44     //	UsartFrame_Init();
;;;45     	Model_Select_Initial();
000036  f7fffffe          BL       Model_Select_Initial
;;;46     	Run_Model=MODEL_BUTTON1*8+MODEL_BUTTON2*4+MODEL_BUTTON3*2+MODEL_BUTTON4;
00003a  4813              LDR      r0,|L2.136|
00003c  6800              LDR      r0,[r0,#0]
00003e  00c1              LSLS     r1,r0,#3
000040  4812              LDR      r0,|L2.140|
000042  f8d00204          LDR      r0,[r0,#0x204]
000046  eb010180          ADD      r1,r1,r0,LSL #2
00004a  4810              LDR      r0,|L2.140|
00004c  f8d00228          LDR      r0,[r0,#0x228]
000050  eb010040          ADD      r0,r1,r0,LSL #1
000054  490e              LDR      r1,|L2.144|
000056  6809              LDR      r1,[r1,#0]
000058  4408              ADD      r0,r0,r1
00005a  490e              LDR      r1,|L2.148|
00005c  7008              STRB     r0,[r1,#0]
;;;47     	STILL_BUTTON=0;
00005e  2000              MOVS     r0,#0
000060  490d              LDR      r1,|L2.152|
000062  7008              STRB     r0,[r1,#0]
;;;48     	OVERPOWER_BUTTON=1;
000064  2001              MOVS     r0,#1
000066  490d              LDR      r1,|L2.156|
000068  7008              STRB     r0,[r1,#0]
;;;49     	ADDBULLET_BUTTON=0;
00006a  2000              MOVS     r0,#0
00006c  490c              LDR      r1,|L2.160|
00006e  7008              STRB     r0,[r1,#0]
;;;50     	STARTBYHURT_BUTTON=1;
000070  2001              MOVS     r0,#1
000072  490c              LDR      r1,|L2.164|
000074  7008              STRB     r0,[r1,#0]
;;;51     	
;;;52     	while(MPU_Init())
000076  e002              B        |L2.126|
                  |L2.120|
;;;53     	{
;;;54     		u1_printf("MPU Init Error\r\n");
000078  a00b              ADR      r0,|L2.168|
00007a  f7fffffe          BL       u1_printf
                  |L2.126|
00007e  f7fffffe          BL       MPU_Init
000082  2800              CMP      r0,#0                 ;52
000084  d1f8              BNE      |L2.120|
;;;55     	}
;;;56     //	while(1)
;;;57     //	{
;;;58     //		{
;;;59     //		short gx,gy,gz;
;;;60     //		MPU_Get_Gyroscope(&gx,&gy,&gz);
;;;61     //		u1_printf("%d\t%d\t%d\r\n",gx,gy,gz);
;;;62     //		}
;;;63     //		
;;;64     //	}
;;;65     
;;;66     }
000086  bd10              POP      {r4,pc}
;;;67     
                          ENDP

                  |L2.136|
                          DCD      0x42408200
                  |L2.140|
                          DCD      0x42408000
                  |L2.144|
                          DCD      0x4241022c
                  |L2.148|
                          DCD      Run_Model
                  |L2.152|
                          DCD      STILL_BUTTON
                  |L2.156|
                          DCD      OVERPOWER_BUTTON
                  |L2.160|
                          DCD      ADDBULLET_BUTTON
                  |L2.164|
                          DCD      STARTBYHURT_BUTTON
                  |L2.168|
0000a8  4d505520          DCB      "MPU Init Error\r\n",0
0000ac  496e6974
0000b0  20457272
0000b4  6f720d0a
0000b8  00      
0000b9  00                DCB      0
0000ba  00                DCB      0
0000bb  00                DCB      0

                          AREA ||i.bsp_RunPer10ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer10ms PROC
;;;76     */
;;;77     void bsp_RunPer10ms(void)
000000  4770              BX       lr
;;;78     {
;;;79     	// bsp_KeyScan();
;;;80     }
;;;81     
                          ENDP


                          AREA ||i.bsp_RunPer1ms||, CODE, READONLY, ALIGN=1

                  bsp_RunPer1ms PROC
;;;90     */
;;;91     void bsp_RunPer1ms(void)
000000  4770              BX       lr
;;;92     {
;;;93     	//TOUCH_Scan();	/* 触摸扫描 */
;;;94     }
;;;95     
                          ENDP


;*** Start embedded assembler ***

#line 1 "..\\..\\User\\bsp_stm32f4xx\\src\\bsp.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___5_bsp_c_bsp_Init____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____REVSH|
#line 144
|__asm___5_bsp_c_bsp_Init____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___5_bsp_c_bsp_Init____RRX|
#line 300
|__asm___5_bsp_c_bsp_Init____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
