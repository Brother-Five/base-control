; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_task.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_task.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rt_task.crf ..\..\RTX\src\rt_Task.c]
                          THUMB

                          AREA ||i.rt_block||, CODE, READONLY, ALIGN=2

                  rt_block PROC
;;;114    
;;;115    void rt_block (U16 timeout, U8 block_state) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
;;;116      /* Block running task and choose next ready task.                         */
;;;117      /* "timeout" sets a time-out value or is 0xffff (=no time-out).           */
;;;118      /* "block_state" defines the appropriate task state */
;;;119      P_TCB next_TCB;
;;;120    
;;;121      if (timeout) {
000006  b194              CBZ      r4,|L1.46|
;;;122        if (timeout < 0xffff) {
000008  f64f70ff          MOV      r0,#0xffff
00000c  4284              CMP      r4,r0
00000e  da04              BGE      |L1.26|
;;;123          rt_put_dly (os_tsk.run, timeout);
000010  4907              LDR      r1,|L1.48|
000012  6808              LDR      r0,[r1,#0]  ; os_tsk
000014  4621              MOV      r1,r4
000016  f7fffffe          BL       rt_put_dly
                  |L1.26|
;;;124        }
;;;125        os_tsk.run->state = block_state;
00001a  4805              LDR      r0,|L1.48|
00001c  6800              LDR      r0,[r0,#0]  ; os_tsk
00001e  7045              STRB     r5,[r0,#1]
;;;126        next_TCB = rt_get_first (&os_rdy);
000020  4804              LDR      r0,|L1.52|
000022  f7fffffe          BL       rt_get_first
000026  4606              MOV      r6,r0
;;;127        rt_switch_req (next_TCB);
000028  4630              MOV      r0,r6
00002a  f7fffffe          BL       rt_switch_req
                  |L1.46|
;;;128      }
;;;129    }
00002e  bd70              POP      {r4-r6,pc}
;;;130    
                          ENDP

                  |L1.48|
                          DCD      os_tsk
                  |L1.52|
                          DCD      os_rdy

                          AREA ||i.rt_dispatch||, CODE, READONLY, ALIGN=2

                  rt_dispatch PROC
;;;87     
;;;88     void rt_dispatch (P_TCB next_TCB) {
000000  b510              PUSH     {r4,lr}
000002  4604              MOV      r4,r0
;;;89       /* Dispatch next task if any identified or dispatch highest ready task    */
;;;90       /* "next_TCB" identifies a task to run or has value NULL (=no next task)  */
;;;91       if (next_TCB == NULL) {
000004  b93c              CBNZ     r4,|L2.22|
;;;92         /* Running task was blocked: continue with highest ready task */
;;;93         next_TCB = rt_get_first (&os_rdy);
000006  4810              LDR      r0,|L2.72|
000008  f7fffffe          BL       rt_get_first
00000c  4604              MOV      r4,r0
;;;94         rt_switch_req (next_TCB);
00000e  4620              MOV      r0,r4
000010  f7fffffe          BL       rt_switch_req
000014  e017              B        |L2.70|
                  |L2.22|
;;;95       }
;;;96       else {
;;;97         /* Check which task continues */
;;;98         if (next_TCB->prio > os_tsk.run->prio) {
000016  78a0              LDRB     r0,[r4,#2]
000018  490c              LDR      r1,|L2.76|
00001a  6809              LDR      r1,[r1,#0]  ; os_tsk
00001c  7889              LDRB     r1,[r1,#2]
00001e  4288              CMP      r0,r1
000020  dd0b              BLE      |L2.58|
;;;99           /* preempt running task */
;;;100          rt_put_rdy_first (os_tsk.run);
000022  490a              LDR      r1,|L2.76|
000024  6808              LDR      r0,[r1,#0]  ; os_tsk
000026  f7fffffe          BL       rt_put_rdy_first
;;;101          os_tsk.run->state = READY;
00002a  2001              MOVS     r0,#1
00002c  4907              LDR      r1,|L2.76|
00002e  6809              LDR      r1,[r1,#0]  ; os_tsk
000030  7048              STRB     r0,[r1,#1]
;;;102          rt_switch_req (next_TCB);
000032  4620              MOV      r0,r4
000034  f7fffffe          BL       rt_switch_req
000038  e005              B        |L2.70|
                  |L2.58|
;;;103        }
;;;104        else {
;;;105          /* put next task into ready list, no task switch takes place */
;;;106          next_TCB->state = READY;
00003a  2001              MOVS     r0,#1
00003c  7060              STRB     r0,[r4,#1]
;;;107          rt_put_prio (&os_rdy, next_TCB);
00003e  4621              MOV      r1,r4
000040  4801              LDR      r0,|L2.72|
000042  f7fffffe          BL       rt_put_prio
                  |L2.70|
;;;108        }
;;;109      }
;;;110    }
000046  bd10              POP      {r4,pc}
;;;111    
                          ENDP

                  |L2.72|
                          DCD      os_rdy
                  |L2.76|
                          DCD      os_tsk

                          AREA ||i.rt_get_TID||, CODE, READONLY, ALIGN=2

                  rt_get_TID PROC
;;;35     
;;;36     static OS_TID rt_get_TID (void) {
000000  2101              MOVS     r1,#1
;;;37       U32 tid;
;;;38     
;;;39       for (tid = 1; tid <= os_maxtaskrun; tid++) {
000002  e007              B        |L3.20|
                  |L3.4|
;;;40         if (os_active_TCB[tid-1] == NULL) {
000004  1e48              SUBS     r0,r1,#1
000006  4a06              LDR      r2,|L3.32|
000008  f8520020          LDR      r0,[r2,r0,LSL #2]
00000c  b908              CBNZ     r0,|L3.18|
;;;41           return ((OS_TID)tid);
00000e  4608              MOV      r0,r1
                  |L3.16|
;;;42         }
;;;43       }
;;;44       return (0);
;;;45     }
000010  4770              BX       lr
                  |L3.18|
000012  1c49              ADDS     r1,r1,#1              ;39
                  |L3.20|
000014  4803              LDR      r0,|L3.36|
000016  8800              LDRH     r0,[r0,#0]            ;39  ; os_maxtaskrun
000018  4281              CMP      r1,r0                 ;39
00001a  d9f3              BLS      |L3.4|
00001c  2000              MOVS     r0,#0                 ;44
00001e  e7f7              B        |L3.16|
;;;46     
                          ENDP

                  |L3.32|
                          DCD      os_active_TCB
                  |L3.36|
                          DCD      os_maxtaskrun

                          AREA ||i.rt_init_context||, CODE, READONLY, ALIGN=2

                  rt_init_context PROC
;;;49     
;;;50     static void rt_init_context (P_TCB p_TCB, U8 priority, FUNCP task_body) {
000000  b570              PUSH     {r4-r6,lr}
000002  4604              MOV      r4,r0
000004  460d              MOV      r5,r1
000006  4616              MOV      r6,r2
;;;51       /* Initialize general part of the Task Control Block. */
;;;52       p_TCB->cb_type   = TCB;
000008  2000              MOVS     r0,#0
00000a  7020              STRB     r0,[r4,#0]
;;;53       p_TCB->state     = READY;
00000c  2001              MOVS     r0,#1
00000e  7060              STRB     r0,[r4,#1]
;;;54       p_TCB->prio      = priority;
000010  70a5              STRB     r5,[r4,#2]
;;;55       p_TCB->prio_base = priority;
000012  f8845024          STRB     r5,[r4,#0x24]
;;;56       p_TCB->p_lnk     = NULL;
000016  2000              MOVS     r0,#0
000018  6060              STR      r0,[r4,#4]
;;;57       p_TCB->p_rlnk    = NULL;
00001a  60a0              STR      r0,[r4,#8]
;;;58       p_TCB->p_dlnk    = NULL;
00001c  60e0              STR      r0,[r4,#0xc]
;;;59       p_TCB->p_blnk    = NULL;
00001e  6120              STR      r0,[r4,#0x10]
;;;60       p_TCB->p_mlnk    = NULL;
000020  6220              STR      r0,[r4,#0x20]
;;;61       p_TCB->delta_time    = 0;
000022  82a0              STRH     r0,[r4,#0x14]
;;;62       p_TCB->interval_time = 0;
000024  82e0              STRH     r0,[r4,#0x16]
;;;63       p_TCB->events    = 0;
000026  8320              STRH     r0,[r4,#0x18]
;;;64       p_TCB->waits     = 0;
000028  8360              STRH     r0,[r4,#0x1a]
;;;65       p_TCB->ret_val   = OS_R_OK;
00002a  f8840025          STRB     r0,[r4,#0x25]
;;;66       p_TCB->ret_upd   = 0;
00002e  f8840026          STRB     r0,[r4,#0x26]
;;;67     
;;;68       if (p_TCB->priv_stack == 0) {
000032  8d20              LDRH     r0,[r4,#0x28]
000034  b918              CBNZ     r0,|L4.62|
;;;69         /* Allocate the memory space for the stack. */
;;;70         p_TCB->stack = rt_alloc_box (mp_stk);
000036  4804              LDR      r0,|L4.72|
000038  f7fffffe          BL       rt_alloc_box
00003c  6320              STR      r0,[r4,#0x30]
                  |L4.62|
;;;71       }
;;;72       rt_init_stack (p_TCB, task_body);
00003e  4631              MOV      r1,r6
000040  4620              MOV      r0,r4
000042  f7fffffe          BL       rt_init_stack
;;;73     }
000046  bd70              POP      {r4-r6,pc}
;;;74     
                          ENDP

                  |L4.72|
                          DCD      mp_stk

                          AREA ||i.rt_switch_req||, CODE, READONLY, ALIGN=2

                  rt_switch_req PROC
;;;77     
;;;78     void rt_switch_req (P_TCB p_new) {
000000  4902              LDR      r1,|L5.12|
;;;79       /* Switch to next task (identified by "p_new"). */
;;;80       os_tsk.new   = p_new;
000002  6048              STR      r0,[r1,#4]  ; os_tsk
;;;81       p_new->state = RUNNING;
000004  2102              MOVS     r1,#2
000006  7041              STRB     r1,[r0,#1]
;;;82       DBG_TASK_SWITCH(p_new->task_id);
;;;83     }
000008  4770              BX       lr
;;;84     
                          ENDP

00000a  0000              DCW      0x0000
                  |L5.12|
                          DCD      os_tsk

                          AREA ||i.rt_sys_init||, CODE, READONLY, ALIGN=2

                  rt_sys_init PROC
;;;325    
;;;326    void rt_sys_init (FUNCP first_task, U32 prio_stksz, void *stk) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4605              MOV      r5,r0
000006  460e              MOV      r6,r1
000008  4617              MOV      r7,r2
;;;327      /* Initialize system and start up task declared with "first_task". */
;;;328      U32 i;
;;;329    
;;;330      DBG_INIT();
;;;331    
;;;332      /* Initialize dynamic memory and task TCB pointers to NULL. */
;;;333      for (i = 0; i < os_maxtaskrun; i++) {
00000a  2400              MOVS     r4,#0
00000c  e004              B        |L6.24|
                  |L6.14|
;;;334        os_active_TCB[i] = NULL;
00000e  2000              MOVS     r0,#0
000010  494a              LDR      r1,|L6.316|
000012  f8410024          STR      r0,[r1,r4,LSL #2]
000016  1c64              ADDS     r4,r4,#1              ;333
                  |L6.24|
000018  4849              LDR      r0,|L6.320|
00001a  8800              LDRH     r0,[r0,#0]            ;333  ; os_maxtaskrun
00001c  4284              CMP      r4,r0                 ;333
00001e  d3f6              BCC      |L6.14|
;;;335      }
;;;336      rt_init_box (&mp_tcb, mp_tcb_size, sizeof(struct OS_TCB));
000020  2238              MOVS     r2,#0x38
000022  4848              LDR      r0,|L6.324|
000024  8801              LDRH     r1,[r0,#0]  ; mp_tcb_size
000026  4848              LDR      r0,|L6.328|
000028  f7fffffe          BL       _init_box
;;;337      rt_init_box (&mp_stk, mp_stk_size, BOX_ALIGN_8 | (U16)(os_stackinfo));
00002c  4847              LDR      r0,|L6.332|
00002e  8800              LDRH     r0,[r0,#0]  ; os_stackinfo
000030  b280              UXTH     r0,r0
000032  f0404200          ORR      r2,r0,#0x80000000
000036  4846              LDR      r0,|L6.336|
000038  6801              LDR      r1,[r0,#0]  ; mp_stk_size
00003a  4846              LDR      r0,|L6.340|
00003c  f7fffffe          BL       _init_box
;;;338      rt_init_box ((U32 *)m_tmr, mp_tmr_size, sizeof(struct OS_TMR));
000040  2208              MOVS     r2,#8
000042  4845              LDR      r0,|L6.344|
000044  8801              LDRH     r1,[r0,#0]  ; mp_tmr_size
000046  4845              LDR      r0,|L6.348|
000048  6800              LDR      r0,[r0,#0]  ; m_tmr
00004a  f7fffffe          BL       _init_box
;;;339    
;;;340      /* Set up TCB of idle demon */
;;;341      os_idle_TCB.task_id    = 255;
00004e  20ff              MOVS     r0,#0xff
000050  4943              LDR      r1,|L6.352|
000052  70c8              STRB     r0,[r1,#3]
;;;342      os_idle_TCB.priv_stack = 0;
000054  2000              MOVS     r0,#0
000056  8508              STRH     r0,[r1,#0x28]
;;;343      rt_init_context (&os_idle_TCB, 0, os_idle_demon);
000058  4a42              LDR      r2,|L6.356|
00005a  2100              MOVS     r1,#0
00005c  4840              LDR      r0,|L6.352|
00005e  f7fffffe          BL       rt_init_context
;;;344    
;;;345      /* Set up ready list: initially empty */
;;;346      os_rdy.cb_type = HCB;
000062  2004              MOVS     r0,#4
000064  4940              LDR      r1,|L6.360|
000066  7008              STRB     r0,[r1,#0]
;;;347      os_rdy.p_lnk   = NULL;
000068  2000              MOVS     r0,#0
00006a  6048              STR      r0,[r1,#4]  ; os_rdy
;;;348      /* Set up delay list: initially empty */
;;;349      os_dly.cb_type = HCB;
00006c  2004              MOVS     r0,#4
00006e  493f              LDR      r1,|L6.364|
000070  7008              STRB     r0,[r1,#0]
;;;350      os_dly.p_dlnk  = NULL;
000072  2000              MOVS     r0,#0
000074  60c8              STR      r0,[r1,#0xc]  ; os_dly
;;;351      os_dly.p_blnk  = NULL;
000076  6108              STR      r0,[r1,#0x10]  ; os_dly
;;;352      os_dly.delta_time = 0;
000078  8288              STRH     r0,[r1,#0x14]
;;;353    
;;;354      /* Fix SP and systemvariables to assume idle task is running  */
;;;355      /* Transform main program into idle task by assuming idle TCB */
;;;356      rt_set_PSP (os_idle_TCB.tsk_stack+32);
00007a  4939              LDR      r1,|L6.352|
00007c  6ac9              LDR      r1,[r1,#0x2c]  ; os_idle_TCB
00007e  f1010020          ADD      r0,r1,#0x20
000082  f7fffffe          BL       rt_set_PSP
;;;357      os_tsk.run = &os_idle_TCB;
000086  4836              LDR      r0,|L6.352|
000088  4939              LDR      r1,|L6.368|
00008a  6008              STR      r0,[r1,#0]  ; os_tsk
;;;358      os_tsk.run->state = RUNNING;
00008c  2002              MOVS     r0,#2
00008e  6809              LDR      r1,[r1,#0]  ; os_tsk
000090  7048              STRB     r0,[r1,#1]
;;;359    
;;;360      /* Initialize ps queue */
;;;361      os_psq->first = 0;
000092  2000              MOVS     r0,#0
000094  4937              LDR      r1,|L6.372|
000096  7008              STRB     r0,[r1,#0]
;;;362      os_psq->last  = 0;
000098  7048              STRB     r0,[r1,#1]
;;;363      os_psq->size  = os_fifo_size;
00009a  4837              LDR      r0,|L6.376|
00009c  7800              LDRB     r0,[r0,#0]  ; os_fifo_size
00009e  70c8              STRB     r0,[r1,#3]
;;;364    
;;;365      rt_init_robin ();
0000a0  f7fffffe          BL       rt_init_robin
;;;366    
;;;367      /* Intitialize SVC and PendSV */
;;;368      rt_svc_init ();
0000a4  bf00              NOP      
0000a6  4a35              LDR      r2,|L6.380|
0000a8  6812              LDR      r2,[r2,#0]
0000aa  f442027f          ORR      r2,r2,#0xff0000
0000ae  4b33              LDR      r3,|L6.380|
0000b0  601a              STR      r2,[r3,#0]
0000b2  461a              MOV      r2,r3
0000b4  6812              LDR      r2,[r2,#0]
0000b6  f04f437f          MOV      r3,#0xff000000
0000ba  ea032202          AND      r2,r3,r2,LSL #8
0000be  43d2              MVNS     r2,r2
0000c0  fab2f282          CLZ      r2,r2
0000c4  f1c20008          RSB      r0,r2,#8
0000c8  4a2c              LDR      r2,|L6.380|
0000ca  3a14              SUBS     r2,r2,#0x14
0000cc  6812              LDR      r2,[r2,#0]
0000ce  f3c22102          UBFX     r1,r2,#8,#3
0000d2  4281              CMP      r1,r0
0000d4  db00              BLT      |L6.216|
0000d6  1c48              ADDS     r0,r1,#1
                  |L6.216|
0000d8  4a28              LDR      r2,|L6.380|
0000da  1f12              SUBS     r2,r2,#4
0000dc  6813              LDR      r3,[r2,#0]
0000de  f06f7280          MVN      r2,#0x1000000
0000e2  4082              LSLS     r2,r2,r0
0000e4  f3630217          BFI      r2,r3,#0,#24
0000e8  4b24              LDR      r3,|L6.380|
0000ea  1f1b              SUBS     r3,r3,#4
0000ec  601a              STR      r2,[r3,#0]
0000ee  bf00              NOP      
;;;369    
;;;370      /* Intitialize system clock timer */
;;;371      os_tick_irqn = os_tick_init ();
0000f0  f7fffffe          BL       os_tick_init
0000f4  4922              LDR      r1,|L6.384|
0000f6  6008              STR      r0,[r1,#0]  ; os_tick_irqn
;;;372      if (os_tick_irqn >= 0) {
0000f8  4608              MOV      r0,r1
0000fa  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
0000fc  2800              CMP      r0,#0
0000fe  db14              BLT      |L6.298|
;;;373        OS_X_INIT(os_tick_irqn);
000100  21ff              MOVS     r1,#0xff
000102  481f              LDR      r0,|L6.384|
000104  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
000106  f10020e0          ADD      r0,r0,#0xe000e000
00010a  f8801400          STRB     r1,[r0,#0x400]
00010e  481c              LDR      r0,|L6.384|
000110  7800              LDRB     r0,[r0,#0]  ; os_tick_irqn
000112  f000011f          AND      r1,r0,#0x1f
000116  2001              MOVS     r0,#1
000118  4088              LSLS     r0,r0,r1
00011a  4919              LDR      r1,|L6.384|
00011c  6809              LDR      r1,[r1,#0]  ; os_tick_irqn
00011e  1149              ASRS     r1,r1,#5
000120  0089              LSLS     r1,r1,#2
000122  f10121e0          ADD      r1,r1,#0xe000e000
000126  f8c10100          STR      r0,[r1,#0x100]
                  |L6.298|
;;;374      }
;;;375    
;;;376      /* Start up first user task before entering the endless loop */
;;;377      rt_tsk_create (first_task, prio_stksz, stk, NULL);
00012a  2300              MOVS     r3,#0
00012c  463a              MOV      r2,r7
00012e  4631              MOV      r1,r6
000130  4628              MOV      r0,r5
000132  f7fffffe          BL       rt_tsk_create
;;;378    }
000136  e8bd81f0          POP      {r4-r8,pc}
;;;379    
                          ENDP

00013a  0000              DCW      0x0000
                  |L6.316|
                          DCD      os_active_TCB
                  |L6.320|
                          DCD      os_maxtaskrun
                  |L6.324|
                          DCD      mp_tcb_size
                  |L6.328|
                          DCD      mp_tcb
                  |L6.332|
                          DCD      os_stackinfo
                  |L6.336|
                          DCD      mp_stk_size
                  |L6.340|
                          DCD      mp_stk
                  |L6.344|
                          DCD      mp_tmr_size
                  |L6.348|
                          DCD      m_tmr
                  |L6.352|
                          DCD      os_idle_TCB
                  |L6.356|
                          DCD      os_idle_demon
                  |L6.360|
                          DCD      os_rdy
                  |L6.364|
                          DCD      os_dly
                  |L6.368|
                          DCD      os_tsk
                  |L6.372|
                          DCD      os_fifo
                  |L6.376|
                          DCD      os_fifo_size
                  |L6.380|
                          DCD      0xe000ed20
                  |L6.384|
                          DCD      os_tick_irqn

                          AREA ||i.rt_tsk_create||, CODE, READONLY, ALIGN=2

                  rt_tsk_create PROC
;;;200    
;;;201    OS_TID rt_tsk_create (FUNCP task, U32 prio_stksz, void *stk, void *argv) {
000000  e92d47f0          PUSH     {r4-r10,lr}
000004  4607              MOV      r7,r0
000006  460d              MOV      r5,r1
000008  4690              MOV      r8,r2
00000a  4699              MOV      r9,r3
;;;202      /* Start a new task declared with "task". */
;;;203      P_TCB task_context;
;;;204      U32 i;
;;;205    
;;;206      /* Priority 0 is reserved for idle task! */
;;;207      if ((prio_stksz & 0xFF) == 0) {
00000c  b2e8              UXTB     r0,r5
00000e  b900              CBNZ     r0,|L7.18|
;;;208        prio_stksz += 1;
000010  1c6d              ADDS     r5,r5,#1
                  |L7.18|
;;;209      }
;;;210      task_context = rt_alloc_box (mp_tcb);
000012  4812              LDR      r0,|L7.92|
000014  f7fffffe          BL       rt_alloc_box
000018  4604              MOV      r4,r0
;;;211      if (task_context == NULL) {
00001a  b914              CBNZ     r4,|L7.34|
;;;212        return (0);
00001c  2000              MOVS     r0,#0
                  |L7.30|
;;;213      }
;;;214      /* If "size != 0" use a private user provided stack. */
;;;215      task_context->stack      = stk;
;;;216      task_context->priv_stack = prio_stksz >> 8;
;;;217      /* Pass parameter 'argv' to 'rt_init_context' */
;;;218      task_context->msg = argv;
;;;219      /* For 'size == 0' system allocates the user stack from the memory pool. */
;;;220      rt_init_context (task_context, prio_stksz & 0xFF, task);
;;;221    
;;;222      /* Find a free entry in 'os_active_TCB' table. */
;;;223      i = rt_get_TID ();
;;;224      os_active_TCB[i-1] = task_context;
;;;225      task_context->task_id = i;
;;;226      DBG_TASK_NOTIFY(task_context, __TRUE);
;;;227      rt_dispatch (task_context);
;;;228      os_tsk.run->ret_val = i;
;;;229      return ((OS_TID)i);
;;;230    }
00001e  e8bd87f0          POP      {r4-r10,pc}
                  |L7.34|
000022  f8c48030          STR      r8,[r4,#0x30]         ;215
000026  f3c5200f          UBFX     r0,r5,#8,#16          ;216
00002a  8520              STRH     r0,[r4,#0x28]         ;216
00002c  f8c4901c          STR      r9,[r4,#0x1c]         ;218
000030  b2e9              UXTB     r1,r5                 ;220
000032  463a              MOV      r2,r7                 ;220
000034  4620              MOV      r0,r4                 ;220
000036  f7fffffe          BL       rt_init_context
00003a  f7fffffe          BL       rt_get_TID
00003e  4606              MOV      r6,r0                 ;223
000040  1e70              SUBS     r0,r6,#1              ;224
000042  4907              LDR      r1,|L7.96|
000044  f8414020          STR      r4,[r1,r0,LSL #2]     ;224
000048  70e6              STRB     r6,[r4,#3]            ;225
00004a  4620              MOV      r0,r4                 ;227
00004c  f7fffffe          BL       rt_dispatch
000050  4904              LDR      r1,|L7.100|
000052  6809              LDR      r1,[r1,#0]            ;228  ; os_tsk
000054  f8816025          STRB     r6,[r1,#0x25]         ;228
000058  4630              MOV      r0,r6                 ;229
00005a  e7e0              B        |L7.30|
;;;231    
                          ENDP

                  |L7.92|
                          DCD      mp_tcb
                  |L7.96|
                          DCD      os_active_TCB
                  |L7.100|
                          DCD      os_tsk

                          AREA ||i.rt_tsk_delete||, CODE, READONLY, ALIGN=2

                  rt_tsk_delete PROC
;;;234    
;;;235    OS_RESULT rt_tsk_delete (OS_TID task_id) {
000000  e92d41f0          PUSH     {r4-r8,lr}
000004  4607              MOV      r7,r0
;;;236      /* Terminate the task identified with "task_id". */
;;;237      P_TCB  task_context;
;;;238      P_TCB  p_TCB;
;;;239      P_MUCB p_MCB, p_MCB0;
;;;240    
;;;241      if (task_id == 0 || task_id == os_tsk.run->task_id) {
000006  b127              CBZ      r7,|L8.18|
000008  4857              LDR      r0,|L8.360|
00000a  6800              LDR      r0,[r0,#0]  ; os_tsk
00000c  78c0              LDRB     r0,[r0,#3]
00000e  42b8              CMP      r0,r7
000010  d14a              BNE      |L8.168|
                  |L8.18|
;;;242        /* Terminate itself. */
;;;243        os_tsk.run->state     = INACTIVE;
000012  2000              MOVS     r0,#0
000014  4954              LDR      r1,|L8.360|
000016  6809              LDR      r1,[r1,#0]  ; os_tsk
000018  7048              STRB     r0,[r1,#1]
;;;244        os_tsk.run->tsk_stack = rt_get_PSP ();
00001a  f7fffffe          BL       rt_get_PSP
00001e  4952              LDR      r1,|L8.360|
000020  6809              LDR      r1,[r1,#0]  ; os_tsk
000022  62c8              STR      r0,[r1,#0x2c]
;;;245        rt_stk_check ();
000024  f7fffffe          BL       rt_stk_check
;;;246        p_MCB = os_tsk.run->p_mlnk;
000028  484f              LDR      r0,|L8.360|
00002a  6800              LDR      r0,[r0,#0]  ; os_tsk
00002c  6a04              LDR      r4,[r0,#0x20]
;;;247        while (p_MCB) {
00002e  e01c              B        |L8.106|
                  |L8.48|
;;;248          /* Release mutexes owned by this task */
;;;249          if (p_MCB->p_lnk) {
000030  6860              LDR      r0,[r4,#4]
000032  b1c8              CBZ      r0,|L8.104|
;;;250            /* A task is waiting for mutex. */
;;;251            p_TCB = rt_get_first ((P_XCB)p_MCB);
000034  4620              MOV      r0,r4
000036  f7fffffe          BL       rt_get_first
00003a  4605              MOV      r5,r0
;;;252            p_TCB->ret_val = OS_R_MUT;
00003c  2005              MOVS     r0,#5
00003e  f8850025          STRB     r0,[r5,#0x25]
;;;253            rt_rmv_dly (p_TCB);
000042  4628              MOV      r0,r5
000044  f7fffffe          BL       rt_rmv_dly
;;;254            p_TCB->state = READY;
000048  2001              MOVS     r0,#1
00004a  7068              STRB     r0,[r5,#1]
;;;255            rt_put_prio (&os_rdy, p_TCB);
00004c  4629              MOV      r1,r5
00004e  4847              LDR      r0,|L8.364|
000050  f7fffffe          BL       rt_put_prio
;;;256            /* A waiting task becomes the owner of this mutex. */
;;;257            p_MCB0 = p_MCB;
000054  4626              MOV      r6,r4
;;;258            p_MCB->level  = 1;
000056  2001              MOVS     r0,#1
000058  8060              STRH     r0,[r4,#2]
;;;259            p_MCB->owner  = p_TCB;
00005a  60a5              STR      r5,[r4,#8]
;;;260            p_MCB->p_mlnk = p_TCB->p_mlnk;
00005c  6a28              LDR      r0,[r5,#0x20]
00005e  60e0              STR      r0,[r4,#0xc]
;;;261            p_TCB->p_mlnk = p_MCB; 
000060  622c              STR      r4,[r5,#0x20]
;;;262            p_MCB = p_MCB0->p_mlnk;
000062  68f0              LDR      r0,[r6,#0xc]
000064  4604              MOV      r4,r0
000066  e000              B        |L8.106|
                  |L8.104|
;;;263          }
;;;264          else {
;;;265            p_MCB = p_MCB->p_mlnk;
000068  68e4              LDR      r4,[r4,#0xc]
                  |L8.106|
00006a  2c00              CMP      r4,#0                 ;247
00006c  d1e0              BNE      |L8.48|
;;;266          }
;;;267        }
;;;268        os_active_TCB[os_tsk.run->task_id-1] = NULL;
00006e  2100              MOVS     r1,#0
000070  483d              LDR      r0,|L8.360|
000072  6800              LDR      r0,[r0,#0]  ; os_tsk
000074  78c0              LDRB     r0,[r0,#3]
000076  1e40              SUBS     r0,r0,#1
000078  4a3d              LDR      r2,|L8.368|
00007a  f8421020          STR      r1,[r2,r0,LSL #2]
;;;269        rt_free_box (mp_stk, os_tsk.run->stack);
00007e  483a              LDR      r0,|L8.360|
000080  6800              LDR      r0,[r0,#0]  ; os_tsk
000082  6b01              LDR      r1,[r0,#0x30]
000084  483b              LDR      r0,|L8.372|
000086  f7fffffe          BL       rt_free_box
;;;270        os_tsk.run->stack = NULL;
00008a  2000              MOVS     r0,#0
00008c  4936              LDR      r1,|L8.360|
00008e  6809              LDR      r1,[r1,#0]  ; os_tsk
000090  6308              STR      r0,[r1,#0x30]
;;;271        DBG_TASK_NOTIFY(os_tsk.run, __FALSE);
;;;272        rt_free_box (mp_tcb, os_tsk.run);
000092  4835              LDR      r0,|L8.360|
000094  6801              LDR      r1,[r0,#0]  ; os_tsk
000096  4838              LDR      r0,|L8.376|
000098  f7fffffe          BL       rt_free_box
;;;273        os_tsk.run = NULL;
00009c  2000              MOVS     r0,#0
00009e  4932              LDR      r1,|L8.360|
0000a0  6008              STR      r0,[r1,#0]  ; os_tsk
;;;274        rt_dispatch (NULL);
0000a2  f7fffffe          BL       rt_dispatch
0000a6  e05c              B        |L8.354|
                  |L8.168|
;;;275        /* The program should never come to this point. */
;;;276      }
;;;277      else {
;;;278        /* Find the task in the "os_active_TCB" array. */
;;;279        if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
0000a8  4834              LDR      r0,|L8.380|
0000aa  8800              LDRH     r0,[r0,#0]  ; os_maxtaskrun
0000ac  4287              CMP      r7,r0
0000ae  d804              BHI      |L8.186|
0000b0  1e78              SUBS     r0,r7,#1
0000b2  492f              LDR      r1,|L8.368|
0000b4  f8510020          LDR      r0,[r1,r0,LSL #2]
0000b8  b910              CBNZ     r0,|L8.192|
                  |L8.186|
;;;280          /* Task with "task_id" not found or not started. */
;;;281          return (OS_R_NOK);
0000ba  20ff              MOVS     r0,#0xff
                  |L8.188|
;;;282        }
;;;283        task_context = os_active_TCB[task_id-1];
;;;284        rt_rmv_list (task_context);
;;;285        rt_rmv_dly (task_context);
;;;286        p_MCB = task_context->p_mlnk;
;;;287        while (p_MCB) {
;;;288          /* Release mutexes owned by this task */
;;;289          if (p_MCB->p_lnk) {
;;;290            /* A task is waiting for mutex. */
;;;291            p_TCB = rt_get_first ((P_XCB)p_MCB);
;;;292            p_TCB->ret_val = OS_R_MUT;
;;;293            rt_rmv_dly (p_TCB);
;;;294            p_TCB->state = READY;
;;;295            rt_put_prio (&os_rdy, p_TCB);
;;;296            /* A waiting task becomes the owner of this mutex. */
;;;297            p_MCB0 = p_MCB;
;;;298            p_MCB->level  = 1;
;;;299            p_MCB->owner  = p_TCB;
;;;300            p_MCB->p_mlnk = p_TCB->p_mlnk;
;;;301            p_TCB->p_mlnk = p_MCB; 
;;;302            p_MCB = p_MCB0->p_mlnk;
;;;303          }
;;;304          else {
;;;305            p_MCB = p_MCB->p_mlnk;
;;;306          }
;;;307        }
;;;308        os_active_TCB[task_id-1] = NULL;
;;;309        rt_free_box (mp_stk, task_context->stack);
;;;310        task_context->stack = NULL;
;;;311        DBG_TASK_NOTIFY(task_context, __FALSE);
;;;312        rt_free_box (mp_tcb, task_context);
;;;313        if (rt_rdy_prio() > os_tsk.run->prio) {
;;;314          /* Ready task has higher priority than running task. */
;;;315          os_tsk.run->state = READY;
;;;316          rt_put_prio (&os_rdy, os_tsk.run);
;;;317          rt_dispatch (NULL);
;;;318        }
;;;319      }
;;;320      return (OS_R_OK);
;;;321    }
0000bc  e8bd81f0          POP      {r4-r8,pc}
                  |L8.192|
0000c0  1e78              SUBS     r0,r7,#1              ;283
0000c2  492b              LDR      r1,|L8.368|
0000c4  f8518020          LDR      r8,[r1,r0,LSL #2]     ;283
0000c8  4640              MOV      r0,r8                 ;284
0000ca  f7fffffe          BL       rt_rmv_list
0000ce  4640              MOV      r0,r8                 ;285
0000d0  f7fffffe          BL       rt_rmv_dly
0000d4  f8d84020          LDR      r4,[r8,#0x20]         ;286
0000d8  e01c              B        |L8.276|
                  |L8.218|
0000da  6860              LDR      r0,[r4,#4]            ;289
0000dc  b1c8              CBZ      r0,|L8.274|
0000de  4620              MOV      r0,r4                 ;291
0000e0  f7fffffe          BL       rt_get_first
0000e4  4605              MOV      r5,r0                 ;291
0000e6  2005              MOVS     r0,#5                 ;292
0000e8  f8850025          STRB     r0,[r5,#0x25]         ;292
0000ec  4628              MOV      r0,r5                 ;293
0000ee  f7fffffe          BL       rt_rmv_dly
0000f2  2001              MOVS     r0,#1                 ;294
0000f4  7068              STRB     r0,[r5,#1]            ;294
0000f6  4629              MOV      r1,r5                 ;295
0000f8  481c              LDR      r0,|L8.364|
0000fa  f7fffffe          BL       rt_put_prio
0000fe  4626              MOV      r6,r4                 ;297
000100  2001              MOVS     r0,#1                 ;298
000102  8060              STRH     r0,[r4,#2]            ;298
000104  60a5              STR      r5,[r4,#8]            ;299
000106  6a28              LDR      r0,[r5,#0x20]         ;300
000108  60e0              STR      r0,[r4,#0xc]          ;300
00010a  622c              STR      r4,[r5,#0x20]         ;301
00010c  68f0              LDR      r0,[r6,#0xc]          ;302
00010e  4604              MOV      r4,r0                 ;302
000110  e000              B        |L8.276|
                  |L8.274|
000112  68e4              LDR      r4,[r4,#0xc]          ;305
                  |L8.276|
000114  2c00              CMP      r4,#0                 ;287
000116  d1e0              BNE      |L8.218|
000118  2100              MOVS     r1,#0                 ;308
00011a  1e78              SUBS     r0,r7,#1              ;308
00011c  4a14              LDR      r2,|L8.368|
00011e  f8421020          STR      r1,[r2,r0,LSL #2]     ;308
000122  4814              LDR      r0,|L8.372|
000124  f8d81030          LDR      r1,[r8,#0x30]         ;309
000128  f7fffffe          BL       rt_free_box
00012c  2000              MOVS     r0,#0                 ;310
00012e  f8c80030          STR      r0,[r8,#0x30]         ;310
000132  4641              MOV      r1,r8                 ;312
000134  4810              LDR      r0,|L8.376|
000136  f7fffffe          BL       rt_free_box
00013a  480c              LDR      r0,|L8.364|
00013c  6840              LDR      r0,[r0,#4]            ;313  ; os_rdy
00013e  7880              LDRB     r0,[r0,#2]            ;313
000140  4909              LDR      r1,|L8.360|
000142  6809              LDR      r1,[r1,#0]            ;313  ; os_tsk
000144  7889              LDRB     r1,[r1,#2]            ;313
000146  4288              CMP      r0,r1                 ;313
000148  dd0b              BLE      |L8.354|
00014a  2001              MOVS     r0,#1                 ;315
00014c  4906              LDR      r1,|L8.360|
00014e  6809              LDR      r1,[r1,#0]            ;315  ; os_tsk
000150  7048              STRB     r0,[r1,#1]            ;315
000152  4805              LDR      r0,|L8.360|
000154  6801              LDR      r1,[r0,#0]            ;316  ; os_tsk
000156  4805              LDR      r0,|L8.364|
000158  f7fffffe          BL       rt_put_prio
00015c  2000              MOVS     r0,#0                 ;317
00015e  f7fffffe          BL       rt_dispatch
                  |L8.354|
000162  2000              MOVS     r0,#0                 ;320
000164  e7aa              B        |L8.188|
;;;322    
                          ENDP

000166  0000              DCW      0x0000
                  |L8.360|
                          DCD      os_tsk
                  |L8.364|
                          DCD      os_rdy
                  |L8.368|
                          DCD      os_active_TCB
                  |L8.372|
                          DCD      mp_stk
                  |L8.376|
                          DCD      mp_tcb
                  |L8.380|
                          DCD      os_maxtaskrun

                          AREA ||i.rt_tsk_pass||, CODE, READONLY, ALIGN=2

                  rt_tsk_pass PROC
;;;133    
;;;134    void rt_tsk_pass (void) {
000000  b510              PUSH     {r4,lr}
;;;135      /* Allow tasks of same priority level to run cooperatively.*/
;;;136      P_TCB p_new;
;;;137    
;;;138      p_new = rt_get_same_rdy_prio();
000002  f7fffffe          BL       rt_get_same_rdy_prio
000006  4604              MOV      r4,r0
;;;139      if (p_new != NULL) {
000008  b15c              CBZ      r4,|L9.34|
;;;140        rt_put_prio ((P_XCB)&os_rdy, os_tsk.run);
00000a  4806              LDR      r0,|L9.36|
00000c  6801              LDR      r1,[r0,#0]  ; os_tsk
00000e  4806              LDR      r0,|L9.40|
000010  f7fffffe          BL       rt_put_prio
;;;141        os_tsk.run->state = READY;
000014  2001              MOVS     r0,#1
000016  4903              LDR      r1,|L9.36|
000018  6809              LDR      r1,[r1,#0]  ; os_tsk
00001a  7048              STRB     r0,[r1,#1]
;;;142        rt_switch_req (p_new);
00001c  4620              MOV      r0,r4
00001e  f7fffffe          BL       rt_switch_req
                  |L9.34|
;;;143      }
;;;144    }
000022  bd10              POP      {r4,pc}
;;;145    
                          ENDP

                  |L9.36|
                          DCD      os_tsk
                  |L9.40|
                          DCD      os_rdy

                          AREA ||i.rt_tsk_prio||, CODE, READONLY, ALIGN=2

                  rt_tsk_prio PROC
;;;159    
;;;160    OS_RESULT rt_tsk_prio (OS_TID task_id, U8 new_prio) {
000000  b570              PUSH     {r4-r6,lr}
000002  4606              MOV      r6,r0
000004  460c              MOV      r4,r1
;;;161      /* Change execution priority of a task to "new_prio". */
;;;162      P_TCB p_task;
;;;163    
;;;164      if (task_id == 0) {
000006  b9f6              CBNZ     r6,|L10.70|
;;;165        /* Change execution priority of calling task. */
;;;166        os_tsk.run->prio      = new_prio;
000008  4824              LDR      r0,|L10.156|
00000a  6800              LDR      r0,[r0,#0]  ; os_tsk
00000c  7084              STRB     r4,[r0,#2]
;;;167        os_tsk.run->prio_base = new_prio;
00000e  4823              LDR      r0,|L10.156|
000010  6800              LDR      r0,[r0,#0]  ; os_tsk
000012  f8804024          STRB     r4,[r0,#0x24]
;;;168    run:if (rt_rdy_prio() > new_prio) {
000016  bf00              NOP      
                  |L10.24|
000018  4821              LDR      r0,|L10.160|
00001a  6840              LDR      r0,[r0,#4]  ; os_rdy
00001c  7880              LDRB     r0,[r0,#2]
00001e  42a0              CMP      r0,r4
000020  dd0f              BLE      |L10.66|
;;;169          rt_put_prio (&os_rdy, os_tsk.run);
000022  481e              LDR      r0,|L10.156|
000024  6801              LDR      r1,[r0,#0]  ; os_tsk
000026  481e              LDR      r0,|L10.160|
000028  f7fffffe          BL       rt_put_prio
;;;170          os_tsk.run->state   = READY;
00002c  2001              MOVS     r0,#1
00002e  491b              LDR      r1,|L10.156|
000030  6809              LDR      r1,[r1,#0]  ; os_tsk
000032  7048              STRB     r0,[r1,#1]
;;;171          os_tsk.run->ret_val = OS_R_OK;
000034  2000              MOVS     r0,#0
000036  4919              LDR      r1,|L10.156|
000038  6809              LDR      r1,[r1,#0]  ; os_tsk
00003a  f8810025          STRB     r0,[r1,#0x25]
;;;172          rt_dispatch (NULL);
00003e  f7fffffe          BL       rt_dispatch
                  |L10.66|
;;;173        }
;;;174        return (OS_R_OK);
000042  2000              MOVS     r0,#0
                  |L10.68|
;;;175      }
;;;176    
;;;177      /* Find the task in the "os_active_TCB" array. */
;;;178      if (task_id > os_maxtaskrun || os_active_TCB[task_id-1] == NULL) {
;;;179        /* Task with "task_id" not found or not started. */
;;;180        return (OS_R_NOK);
;;;181      }
;;;182      p_task = os_active_TCB[task_id-1];
;;;183      p_task->prio      = new_prio;
;;;184      p_task->prio_base = new_prio;
;;;185      if (p_task == os_tsk.run) {
;;;186        goto run;
;;;187      }
;;;188      rt_resort_prio (p_task);
;;;189      if (p_task->state == READY) {
;;;190        /* Task enqueued in a ready list. */
;;;191        p_task = rt_get_first (&os_rdy);
;;;192        os_tsk.run->ret_val = OS_R_OK;
;;;193        rt_dispatch (p_task);
;;;194      }
;;;195      return (OS_R_OK);
;;;196    }
000044  bd70              POP      {r4-r6,pc}
                  |L10.70|
000046  4817              LDR      r0,|L10.164|
000048  8800              LDRH     r0,[r0,#0]            ;178  ; os_maxtaskrun
00004a  4286              CMP      r6,r0                 ;178
00004c  d804              BHI      |L10.88|
00004e  1e70              SUBS     r0,r6,#1              ;178
000050  4915              LDR      r1,|L10.168|
000052  f8510020          LDR      r0,[r1,r0,LSL #2]     ;178
000056  b908              CBNZ     r0,|L10.92|
                  |L10.88|
000058  20ff              MOVS     r0,#0xff              ;180
00005a  e7f3              B        |L10.68|
                  |L10.92|
00005c  1e70              SUBS     r0,r6,#1              ;182
00005e  4912              LDR      r1,|L10.168|
000060  f8515020          LDR      r5,[r1,r0,LSL #2]     ;182
000064  70ac              STRB     r4,[r5,#2]            ;183
000066  f8854024          STRB     r4,[r5,#0x24]         ;184
00006a  480c              LDR      r0,|L10.156|
00006c  6800              LDR      r0,[r0,#0]            ;185  ; os_tsk
00006e  42a8              CMP      r0,r5                 ;185
000070  d100              BNE      |L10.116|
000072  e7d1              B        |L10.24|
                  |L10.116|
000074  4628              MOV      r0,r5                 ;188
000076  f7fffffe          BL       rt_resort_prio
00007a  7868              LDRB     r0,[r5,#1]            ;189
00007c  2801              CMP      r0,#1                 ;189
00007e  d10b              BNE      |L10.152|
000080  4807              LDR      r0,|L10.160|
000082  f7fffffe          BL       rt_get_first
000086  4605              MOV      r5,r0                 ;191
000088  2000              MOVS     r0,#0                 ;192
00008a  4904              LDR      r1,|L10.156|
00008c  6809              LDR      r1,[r1,#0]            ;192  ; os_tsk
00008e  f8810025          STRB     r0,[r1,#0x25]         ;192
000092  4628              MOV      r0,r5                 ;193
000094  f7fffffe          BL       rt_dispatch
                  |L10.152|
000098  2000              MOVS     r0,#0                 ;195
00009a  e7d3              B        |L10.68|
;;;197    
                          ENDP

                  |L10.156|
                          DCD      os_tsk
                  |L10.160|
                          DCD      os_rdy
                  |L10.164|
                          DCD      os_maxtaskrun
                  |L10.168|
                          DCD      os_active_TCB

                          AREA ||i.rt_tsk_self||, CODE, READONLY, ALIGN=2

                  rt_tsk_self PROC
;;;148    
;;;149    OS_TID rt_tsk_self (void) {
000000  4804              LDR      r0,|L11.20|
;;;150      /* Return own task identifier value. */
;;;151      if (os_tsk.run == NULL) {
000002  6800              LDR      r0,[r0,#0]  ; os_tsk
000004  b908              CBNZ     r0,|L11.10|
;;;152        return (0);
000006  2000              MOVS     r0,#0
                  |L11.8|
;;;153      }
;;;154      return (os_tsk.run->task_id);
;;;155    }
000008  4770              BX       lr
                  |L11.10|
00000a  4802              LDR      r0,|L11.20|
00000c  6800              LDR      r0,[r0,#0]            ;154  ; os_tsk
00000e  78c0              LDRB     r0,[r0,#3]            ;154
000010  e7fa              B        |L11.8|
;;;156    
                          ENDP

000012  0000              DCW      0x0000
                  |L11.20|
                          DCD      os_tsk

                          AREA ||.bss||, DATA, NOINIT, ALIGN=2

                  os_idle_TCB
                          %        56

                          AREA ||.data||, DATA, ALIGN=2

                  os_tsk
                          %        8
