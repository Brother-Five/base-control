; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--cpp --list --split_sections --debug -c --asm --interleave -o.\flash\obj\main.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\main.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\main.crf ..\..\User\main.cpp]
                          THUMB

                          AREA ||i._Z10DEBUG_DATAv||, CODE, READONLY, ALIGN=2

                  _Z10DEBUG_DATAv PROC ; DEBUG_DATA()
;;;135    extern MotorEncoderStruct MotorEncoder;
;;;136    __task void DEBUG_DATA(void)
000000  e00d              B        |L1.30|
                  |L1.2|
;;;137    {
;;;138    //	delay_ms(5000);
;;;139    	while(1)
;;;140    	{
;;;141    //		{
;;;142    //			CVStruct temp;
;;;143    //			temp.ID = 0xfa;
;;;144    //			temp.Flag = 0x55;
;;;145    //			temp.CV_X = 0x1111;
;;;146    //			temp.CV_Y = 0x2222;
;;;147    //			temp.RES =  0x3333;
;;;148    //			CV_ToPC(&temp);
;;;149    //		}
;;;150    		u1_printf("X%d\t\tY%d\t\tRES%d\r\n",cvstruct.CV_X,cvstruct.CV_Y,cvstruct.RES);	
000002  4807              LDR      r0,|L1.32|
000004  f9b03006          LDRSH    r3,[r0,#6]  ; cvstruct
000008  f9b02004          LDRSH    r2,[r0,#4]  ; cvstruct
00000c  f9b01002          LDRSH    r1,[r0,#2]  ; cvstruct
000010  a004              ADR      r0,|L1.36|
000012  f7fffffe          BL       u1_printf
;;;151    //   u1_printf("1234\r\n");
;;;152    //	u1_printf("%d\t%d\t%d\t%d\r\n",runstart_flag,distance2,distance3,distance4);
;;;153    //		u1_printf("%f\r\n",Parameter_Operater.data.PITCH_Encoder_Mid);
;;;154    //		u1_printf("%d\r\n",(short)yaw_angle);
;;;155    		os_dly_wait (50);
000016  2032              MOVS     r0,#0x32
000018  f8dfc01c          LDR      r12,|L1.56|
00001c  df00              SVC      #0x0
                  |L1.30|
00001e  e7f0              B        |L1.2|
;;;156    	}
;;;157    }
;;;158    
                          ENDP

                  |L1.32|
                          DCD      cvstruct
                  |L1.36|
000024  58256409          DCB      "X%d\t\tY%d\t\tRES%d\r\n",0
000028  09592564
00002c  09095245
000030  5325640d
000034  0a00    
000036  00                DCB      0
000037  00                DCB      0
                  |L1.56|
                          DCD      rt_dly_wait

                          AREA ||i._Z12AppObjCreatev||, CODE, READONLY, ALIGN=2

                  _Z12AppObjCreatev PROC ; AppObjCreate()
;;;1026    */
;;;1027   static void AppObjCreate (void)
000000  b510              PUSH     {r4,lr}
;;;1028   {
;;;1029   	/* 创建消息邮箱 */
;;;1030   	DR16_mailbox_init();//DR16邮箱初始化
000002  f7fffffe          BL       DR16_mailbox_init
;;;1031   	CAN_mailbox_init(1);//CAN1邮箱等初始化
000006  2001              MOVS     r0,#1
000008  f7fffffe          BL       CAN_mailbox_init
;;;1032   	CAN_mailbox_init(2);//CAN2邮箱等初始化
00000c  2002              MOVS     r0,#2
00000e  f7fffffe          BL       CAN_mailbox_init
;;;1033   
;;;1034   
;;;1035   	/* 相关初始化 */
;;;1036   	delay_ms(100);
000012  2064              MOVS     r0,#0x64
000014  f8dfc004          LDR      r12,|L2.28|
000018  df00              SVC      #0x0
;;;1037   //	Motor_Init(0xf1,0);
;;;1038   
;;;1039   }
00001a  bd10              POP      {r4,pc}
;;;1040   
                          ENDP

                  |L2.28|
                          DCD      rt_dly_wait

                          AREA ||i._Z12DR16_SxValuev||, CODE, READONLY, ALIGN=2

                  _Z12DR16_SxValuev PROC ; DR16_SxValue()
;;;776    OS_ID  tmr1;
;;;777    __task void DR16_SxValue(void)
000000  f7fffffe          BL       ESC_STOP
;;;778    {
;;;779    	OS_RESULT xResult;
;;;780    
;;;781    //	delay_ms(2000);
;;;782    //	ESC_Init();
;;;783    	ESC_STOP();
;;;784    //	os_itv_set(1000);	/* 设置延迟周期 */
;;;785    	while(1)
000004  e05a              B        |L3.188|
                  |L3.6|
;;;786    	{
;;;787    		if (os_evt_wait_or (BIT_ALL, 200) == OS_R_EVT)
000006  2200              MOVS     r2,#0
000008  21c8              MOVS     r1,#0xc8
00000a  f64f70ff          MOV      r0,#0xffff
00000e  f8dfc0b0          LDR      r12,|L3.192|
000012  df00              SVC      #0x0
000014  2802              CMP      r0,#2
000016  d151              BNE      |L3.188|
;;;788    		{
;;;789    			xResult = os_evt_get ();
000018  f8dfc0a8          LDR      r12,|L3.196|
00001c  df00              SVC      #0x0
00001e  4604              MOV      r4,r0
;;;790    			switch (xResult)
000020  2c10              CMP      r4,#0x10
000022  d03b              BEQ      |L3.156|
000024  dc06              BGT      |L3.52|
000026  2c01              CMP      r4,#1
000028  d009              BEQ      |L3.62|
00002a  2c02              CMP      r4,#2
00002c  d00a              BEQ      |L3.68|
00002e  2c04              CMP      r4,#4
000030  d142              BNE      |L3.184|
000032  e00e              B        |L3.82|
                  |L3.52|
000034  2c20              CMP      r4,#0x20
000036  d038              BEQ      |L3.170|
000038  2c40              CMP      r4,#0x40
00003a  d13d              BNE      |L3.184|
00003c  e039              B        |L3.178|
                  |L3.62|
;;;791    			{
;;;792    				case BIT_0:	ESC_Toggle();break;//无刷电机
00003e  f7fffffe          BL       ESC_Toggle
000042  e03a              B        |L3.186|
                  |L3.68|
;;;793    				case BIT_1:	if(Get_ESC_Flag()) //Turnplate_motor_ONCE();
000044  f7fffffe          BL       Get_ESC_Flag
000048  b110              CBZ      r0,|L3.80|
;;;794    							shootonce = 1;
00004a  2001              MOVS     r0,#1
00004c  491e              LDR      r1,|L3.200|
00004e  7008              STRB     r0,[r1,#0]
                  |L3.80|
;;;795    //							if(timer200msflag == 0)
;;;796    //							{
;;;797    //								positionreachflag = 0;
;;;798    //								shootedflag = 0;
;;;799    //								tmr1 = os_tmr_create (200,1);
;;;800    //								 if (tmr1 != NULL)
;;;801    //								 {
;;;802    //									 timer200msflag = 1;
;;;803    //									 TurnplatePID.SetTarget(TurnplatePID.Target + 833.33f);
;;;804    //								 }
;;;805    //							 }
;;;806    //							else if(positionreachflag == 1)
;;;807    //							{
;;;808    //								if(shootedflag == 0)
;;;809    //									cnt ++;
;;;810    //								else
;;;811    //									cnt =0;
;;;812    //								if(cnt == 10)
;;;813    //								{
;;;814    //									positionreachflag = 0;
;;;815    //									TurnplatePID.SetTarget(TurnplatePID.Target + 833.33f);
;;;816    //								}
;;;817    //							}
;;;818    							break;//拨盘电机（单次）
000050  e033              B        |L3.186|
                  |L3.82|
;;;819    				case BIT_2://bumark=!bumark;
;;;820    
;;;821    
;;;822    #if CV_MODE
;;;823    						if(StrategicMode != 4)
000052  481e              LDR      r0,|L3.204|
000054  ed900a00          VLDR     s0,[r0,#0]
000058  eef10a00          VMOV.F32 s1,#4.00000000
00005c  eeb40a60          VCMP.F32 s0,s1
000060  eef1fa10          VMRS     APSR_nzcv,FPSCR
000064  d003              BEQ      |L3.110|
;;;824    							StrategicMode = 4;
000066  eeb10a00          VMOV.F32 s0,#4.00000000
00006a  ed800a00          VSTR     s0,[r0,#0]
                  |L3.110|
;;;825    						Set_cv_flag(!Get_cv_flag());
00006e  f7fffffe          BL       Get_cv_flag
000072  b908              CBNZ     r0,|L3.120|
000074  2001              MOVS     r0,#1
000076  e000              B        |L3.122|
                  |L3.120|
000078  2000              MOVS     r0,#0
                  |L3.122|
00007a  4605              MOV      r5,r0
00007c  f7fffffe          BL       Set_cv_flag
;;;826    						if(Get_cv_flag() == 0)
000080  f7fffffe          BL       Get_cv_flag
000084  b948              CBNZ     r0,|L3.154|
;;;827    						{
;;;828    							YawPID.Target = YawPID.Current;
000086  4812              LDR      r0,|L3.208|
000088  ed900a02          VLDR     s0,[r0,#8]
00008c  ed800a01          VSTR     s0,[r0,#4]
;;;829    							StrategicMode = 0;
000090  ed9f0a10          VLDR     s0,|L3.212|
000094  480d              LDR      r0,|L3.204|
000096  ed800a00          VSTR     s0,[r0,#0]
                  |L3.154|
;;;830    						}
;;;831    #else
;;;832    						if(FollowMode==0)
;;;833    							FollowMode = 1;
;;;834    						else if(FollowMode==1)
;;;835    							FollowMode = 0;
;;;836    						Duoji_Toggle();//舵机
;;;837    #endif
;;;838    
;;;839    						break;
00009a  e00e              B        |L3.186|
                  |L3.156|
;;;840    				case BIT_4:if(Get_ESC_Flag()) //Turnplate_motor_CONSTANTLY();
00009c  f7fffffe          BL       Get_ESC_Flag
0000a0  b110              CBZ      r0,|L3.168|
;;;841    					shootcons = 1;
0000a2  2001              MOVS     r0,#1
0000a4  490c              LDR      r1,|L3.216|
0000a6  7008              STRB     r0,[r1,#0]
                  |L3.168|
;;;842    					break;//拨盘电机（连续）
0000a8  e007              B        |L3.186|
                  |L3.170|
;;;843    				case BIT_5://if(Get_ESC_Flag()) Turnplate_motor_STOP();
;;;844    					shootcons = 0;
0000aa  2000              MOVS     r0,#0
0000ac  490a              LDR      r1,|L3.216|
0000ae  7008              STRB     r0,[r1,#0]
;;;845    					break;//拨盘电机（停止）
0000b0  e003              B        |L3.186|
                  |L3.178|
;;;846    				case BIT_6:ESC_STOP();break;
0000b2  f7fffffe          BL       ESC_STOP
0000b6  e000              B        |L3.186|
                  |L3.184|
;;;847    				default:break;
0000b8  bf00              NOP      
                  |L3.186|
0000ba  bf00              NOP                            ;792
                  |L3.188|
0000bc  e7a3              B        |L3.6|
;;;848    			}
;;;849    //			 printf("Events %04x received.\r\n",xResult);
;;;850    		}
;;;851    
;;;852    	}
;;;853    }
;;;854    
                          ENDP

0000be  0000              DCW      0x0000
                  |L3.192|
                          DCD      rt_evt_wait
                  |L3.196|
                          DCD      rt_evt_get
                  |L3.200|
                          DCD      shootonce
                  |L3.204|
                          DCD      PitchPID
                  |L3.208|
                          DCD      YawPID
                  |L3.212|
0000d4  00000000          DCFS     0x00000000 ; 0
                  |L3.216|
                          DCD      shootcons

                          AREA ||i._Z13AppTaskCreatev||, CODE, READONLY, ALIGN=2

                  _Z13AppTaskCreatev PROC ; AppTaskCreate()
;;;958     */
;;;959    static void AppTaskCreate (void)
000000  2300              MOVS     r3,#0
;;;960    {
;;;961    
;;;962    	HandleDisconnectCheck = os_tsk_create_user(DisconnectCheck,             /* 任务函数 */
000002  4a40              LDR      r2,|L4.260|
000004  4940              LDR      r1,|L4.264|
000006  4841              LDR      r0,|L4.268|
000008  f8dfc104          LDR      r12,|L4.272|
00000c  df00              SVC      #0x0
00000e  4941              LDR      r1,|L4.276|
000010  6008              STR      r0,[r1,#0]  ; HandleDisconnectCheck
;;;963    	                                      1,                         /* 任务优先级 */
;;;964    	                                      &DisconnectCheckStk,         /* 任务栈 */
;;;965    	                                      sizeof(DisconnectCheckStk)); /* 任务栈大小，单位字节数 */
;;;966    
;;;967    	HandleEXTITask = os_tsk_create_user(EXTITask,             /* 任务函数 */
000012  2300              MOVS     r3,#0
000014  4a40              LDR      r2,|L4.280|
000016  493c              LDR      r1,|L4.264|
000018  1c89              ADDS     r1,r1,#2
00001a  4840              LDR      r0,|L4.284|
00001c  f8dfc0f0          LDR      r12,|L4.272|
000020  df00              SVC      #0x0
000022  493f              LDR      r1,|L4.288|
000024  6008              STR      r0,[r1,#0]  ; HandleEXTITask
;;;968    	                                      3,                         /* 任务优先级 */
;;;969    	                                      &EXTITaskStk,         /* 任务栈 */
;;;970    	                                      sizeof(EXTITaskStk)); /* 任务栈大小，单位字节数 */
;;;971    
;;;972    	HandleDEBUG_DATA = os_tsk_create_user(DEBUG_DATA,             /* 任务函数 */
000026  2300              MOVS     r3,#0
000028  4a3e              LDR      r2,|L4.292|
00002a  f04f1102          MOV      r1,#0x20002
00002e  483e              LDR      r0,|L4.296|
000030  f8dfc0dc          LDR      r12,|L4.272|
000034  df00              SVC      #0x0
000036  493d              LDR      r1,|L4.300|
000038  6008              STR      r0,[r1,#0]  ; HandleDEBUG_DATA
;;;973    	                                      2,                         /* 任务优先级 */
;;;974    	                                      &DEBUG_DATAStk,         /* 任务栈 */
;;;975    	                                      sizeof(DEBUG_DATAStk)); /* 任务栈大小，单位字节数 */
;;;976    
;;;977    	HandleDR16_DATA_Rec = os_tsk_create_user(DR16_DATA_Rec,              /* 任务函数 */
00003a  2300              MOVS     r3,#0
00003c  4a3c              LDR      r2,|L4.304|
00003e  4932              LDR      r1,|L4.264|
000040  1d09              ADDS     r1,r1,#4
000042  483c              LDR      r0,|L4.308|
000044  f8dfc0c8          LDR      r12,|L4.272|
000048  df00              SVC      #0x0
00004a  493b              LDR      r1,|L4.312|
00004c  6008              STR      r0,[r1,#0]  ; HandleDR16_DATA_Rec
;;;978    	                                   5,                       /* 任务优先级 */
;;;979    	                                   &DR16_DATA_RecStk,          /* 任务栈 */
;;;980    	                                   sizeof(DR16_DATA_RecStk));  /* 任务栈大小，单位字节数 */
;;;981    
;;;982    	HandleCAN2_DATA0_Rec = os_tsk_create_user(CAN2_DATA0_Rec,             /* 任务函数 */
00004e  2300              MOVS     r3,#0
000050  4a3a              LDR      r2,|L4.316|
000052  492d              LDR      r1,|L4.264|
000054  1cc9              ADDS     r1,r1,#3
000056  483a              LDR      r0,|L4.320|
000058  f8dfc0b4          LDR      r12,|L4.272|
00005c  df00              SVC      #0x0
00005e  4939              LDR      r1,|L4.324|
000060  6008              STR      r0,[r1,#0]  ; HandleCAN2_DATA0_Rec
;;;983    	                                      4,                         /* 任务优先级 */
;;;984    	                                      &CAN2_DATA0_RecStk,         /* 任务栈 */
;;;985    	                                      sizeof(CAN2_DATA0_RecStk)); /* 任务栈大小，单位字节数 */
;;;986    	HandleCAN2_DATA1_Rec = os_tsk_create_user(CAN2_DATA1_Rec,             /* 任务函数 */
000062  2300              MOVS     r3,#0
000064  4a38              LDR      r2,|L4.328|
000066  4928              LDR      r1,|L4.264|
000068  1cc9              ADDS     r1,r1,#3
00006a  4838              LDR      r0,|L4.332|
00006c  f8dfc0a0          LDR      r12,|L4.272|
000070  df00              SVC      #0x0
000072  4937              LDR      r1,|L4.336|
000074  6008              STR      r0,[r1,#0]  ; HandleCAN2_DATA1_Rec
;;;987    	                                      4,                         /* 任务优先级 */
;;;988    	                                      &CAN2_DATA1_RecStk,         /* 任务栈 */
;;;989    	                                      sizeof(CAN2_DATA1_RecStk)); /* 任务栈大小，单位字节数 */
;;;990    	HandleCAN1_DATA0_Rec = os_tsk_create_user(CAN1_DATA0_Rec,             /* 任务函数 */
000076  2300              MOVS     r3,#0
000078  4a36              LDR      r2,|L4.340|
00007a  4923              LDR      r1,|L4.264|
00007c  1d09              ADDS     r1,r1,#4
00007e  4836              LDR      r0,|L4.344|
000080  f8dfc08c          LDR      r12,|L4.272|
000084  df00              SVC      #0x0
000086  4935              LDR      r1,|L4.348|
000088  6008              STR      r0,[r1,#0]  ; HandleCAN1_DATA0_Rec
;;;991    	                                      5,                         /* 任务优先级 */
;;;992    	                                      &CAN1_DATA0_RecStk,         /* 任务栈 */
;;;993    	                                      sizeof(CAN1_DATA0_RecStk)); /* 任务栈大小，单位字节数 */
;;;994    
;;;995    	HandlePitchYaw_Aguest = os_tsk_create_user(PitchYaw_Aguest,              /* 任务函数 */
00008a  2300              MOVS     r3,#0
00008c  4a34              LDR      r2,|L4.352|
00008e  491e              LDR      r1,|L4.264|
000090  1c89              ADDS     r1,r1,#2
000092  4834              LDR      r0,|L4.356|
000094  f8dfc078          LDR      r12,|L4.272|
000098  df00              SVC      #0x0
00009a  4933              LDR      r1,|L4.360|
00009c  6008              STR      r0,[r1,#0]  ; HandlePitchYaw_Aguest
;;;996    	                                   3,                       /* 任务优先级 */
;;;997    	                                   &PitchYaw_AguestStk,          /* 任务栈 */
;;;998    	                                   sizeof(PitchYaw_AguestStk));  /* 任务栈大小，单位字节数 */
;;;999    
;;;1000   	HandleCarFrame_Aguest = os_tsk_create_user(CarFrame_Aguest,              /* 任务函数 */
00009e  2300              MOVS     r3,#0
0000a0  4a32              LDR      r2,|L4.364|
0000a2  4919              LDR      r1,|L4.264|
0000a4  1d49              ADDS     r1,r1,#5
0000a6  4832              LDR      r0,|L4.368|
0000a8  f8dfc064          LDR      r12,|L4.272|
0000ac  df00              SVC      #0x0
0000ae  4931              LDR      r1,|L4.372|
0000b0  6008              STR      r0,[r1,#0]  ; HandleCarFrame_Aguest
;;;1001   	                                   6,                       /* 任务优先级 */
;;;1002   	                                   &CarFrame_AguestStk,          /* 任务栈 */
;;;1003   	                                   sizeof(CarFrame_AguestStk));  /* 任务栈大小，单位字节数 */
;;;1004   	HandlePCData_Aguest = os_tsk_create_user(PCData_Aguest,              /* 任务函数 */
0000b2  2300              MOVS     r3,#0
0000b4  4a30              LDR      r2,|L4.376|
0000b6  4914              LDR      r1,|L4.264|
0000b8  1d49              ADDS     r1,r1,#5
0000ba  4830              LDR      r0,|L4.380|
0000bc  f8dfc050          LDR      r12,|L4.272|
0000c0  df00              SVC      #0x0
0000c2  492f              LDR      r1,|L4.384|
0000c4  6008              STR      r0,[r1,#0]  ; HandlePCData_Aguest
;;;1005   	                                   6,                       /* 任务优先级 */
;;;1006   	                                   &PCData_AguestStk,          /* 任务栈 */
;;;1007   	                                   sizeof(PCData_AguestStk));  /* 任务栈大小，单位字节数 */
;;;1008   
;;;1009   	HandleTurnplate_Aguest = os_tsk_create_user(Turnplate_Aguest,              /* 任务函数 */
0000c6  2300              MOVS     r3,#0
0000c8  4a2e              LDR      r2,|L4.388|
0000ca  490f              LDR      r1,|L4.264|
0000cc  1d49              ADDS     r1,r1,#5
0000ce  482e              LDR      r0,|L4.392|
0000d0  f8dfc03c          LDR      r12,|L4.272|
0000d4  df00              SVC      #0x0
0000d6  492d              LDR      r1,|L4.396|
0000d8  6008              STR      r0,[r1,#0]  ; HandleTurnplate_Aguest
;;;1010   	                                   6,                       /* 任务优先级 */
;;;1011   	                                   &Turnplate_AguestStk,          /* 任务栈 */
;;;1012   	                                   sizeof(Turnplate_AguestStk));  /* 任务栈大小，单位字节数 */
;;;1013   
;;;1014   	HandleDR16_SxValue = os_tsk_create_user(DR16_SxValue,             /* 任务函数 */
0000da  2300              MOVS     r3,#0
0000dc  4a2c              LDR      r2,|L4.400|
0000de  490a              LDR      r1,|L4.264|
0000e0  1d49              ADDS     r1,r1,#5
0000e2  482c              LDR      r0,|L4.404|
0000e4  f8dfc028          LDR      r12,|L4.272|
0000e8  df00              SVC      #0x0
0000ea  492b              LDR      r1,|L4.408|
0000ec  6008              STR      r0,[r1,#0]  ; HandleDR16_SxValue
;;;1015   	                                      6,                         /* 任务优先级 */
;;;1016   	                                      &DR16_SxValueStk,         /* 任务栈 */
;;;1017   	                                      sizeof(DR16_SxValueStk)); /* 任务栈大小，单位字节数 */
;;;1018   	HandleBoot_Sequence = os_tsk_create_user(Boot_Sequence,             /* 任务函数 */
0000ee  2300              MOVS     r3,#0
0000f0  4a2a              LDR      r2,|L4.412|
0000f2  f04f1102          MOV      r1,#0x20002
0000f6  482a              LDR      r0,|L4.416|
0000f8  f8dfc014          LDR      r12,|L4.272|
0000fc  df00              SVC      #0x0
0000fe  4929              LDR      r1,|L4.420|
000100  6008              STR      r0,[r1,#0]  ; HandleBoot_Sequence
;;;1019                                         2,                         /* 任务优先级 */
;;;1020                                         &Boot_SequenceStk,         /* 任务栈 */
;;;1021                                         sizeof(Boot_SequenceStk)); /* 任务栈大小，单位字节数 */
;;;1022   }
000102  4770              BX       lr
;;;1023   
                          ENDP

                  |L4.260|
                          DCD      DisconnectCheckStk
                  |L4.264|
                          DCD      0x00020001
                  |L4.268|
                          DCD      _Z15DisconnectCheckv ; DisconnectCheck()
                  |L4.272|
                          DCD      rt_tsk_create
                  |L4.276|
                          DCD      HandleDisconnectCheck
                  |L4.280|
                          DCD      EXTITaskStk
                  |L4.284|
                          DCD      _Z8EXTITaskv ; EXTITask()
                  |L4.288|
                          DCD      HandleEXTITask
                  |L4.292|
                          DCD      DEBUG_DATAStk
                  |L4.296|
                          DCD      _Z10DEBUG_DATAv ; DEBUG_DATA()
                  |L4.300|
                          DCD      HandleDEBUG_DATA
                  |L4.304|
                          DCD      DR16_DATA_RecStk
                  |L4.308|
                          DCD      _Z13DR16_DATA_Recv ; DR16_DATA_Rec()
                  |L4.312|
                          DCD      HandleDR16_DATA_Rec
                  |L4.316|
                          DCD      CAN2_DATA0_RecStk
                  |L4.320|
                          DCD      _Z14CAN2_DATA0_Recv ; CAN2_DATA0_Rec()
                  |L4.324|
                          DCD      HandleCAN2_DATA0_Rec
                  |L4.328|
                          DCD      CAN2_DATA1_RecStk
                  |L4.332|
                          DCD      _Z14CAN2_DATA1_Recv ; CAN2_DATA1_Rec()
                  |L4.336|
                          DCD      HandleCAN2_DATA1_Rec
                  |L4.340|
                          DCD      CAN1_DATA0_RecStk
                  |L4.344|
                          DCD      _Z14CAN1_DATA0_Recv ; CAN1_DATA0_Rec()
                  |L4.348|
                          DCD      HandleCAN1_DATA0_Rec
                  |L4.352|
                          DCD      PitchYaw_AguestStk
                  |L4.356|
                          DCD      _Z15PitchYaw_Aguestv ; PitchYaw_Aguest()
                  |L4.360|
                          DCD      HandlePitchYaw_Aguest
                  |L4.364|
                          DCD      CarFrame_AguestStk
                  |L4.368|
                          DCD      _Z15CarFrame_Aguestv ; CarFrame_Aguest()
                  |L4.372|
                          DCD      HandleCarFrame_Aguest
                  |L4.376|
                          DCD      PCData_AguestStk
                  |L4.380|
                          DCD      _Z13PCData_Aguestv ; PCData_Aguest()
                  |L4.384|
                          DCD      HandlePCData_Aguest
                  |L4.388|
                          DCD      Turnplate_AguestStk
                  |L4.392|
                          DCD      _Z16Turnplate_Aguestv ; Turnplate_Aguest()
                  |L4.396|
                          DCD      HandleTurnplate_Aguest
                  |L4.400|
                          DCD      DR16_SxValueStk
                  |L4.404|
                          DCD      _Z12DR16_SxValuev ; DR16_SxValue()
                  |L4.408|
                          DCD      HandleDR16_SxValue
                  |L4.412|
                          DCD      Boot_SequenceStk
                  |L4.416|
                          DCD      _Z13Boot_Sequencev ; Boot_Sequence()
                  |L4.420|
                          DCD      HandleBoot_Sequence

                          AREA ||i._Z13Boot_Sequencev||, CODE, READONLY, ALIGN=2

                  _Z13Boot_Sequencev PROC ; Boot_Sequence()
;;;858    tGameInfo GameInfo;
;;;859    __task void Boot_Sequence(void)
000000  f64010c4          MOV      r0,#0x9c4
;;;860    {
;;;861    	static u8 cnt;
;;;862    //	kalman_struct AngleKalman;
;;;863    //	kalman_init(&AngleKalman,0, 5,0.1,30000);
;;;864    	delay_ms(2500);
000004  f8dfc0bc          LDR      r12,|L5.196|
000008  df00              SVC      #0x0
;;;865    	FollowMode = 1;
00000a  eeb70a00          VMOV.F32 s0,#1.00000000
00000e  482e              LDR      r0,|L5.200|
000010  ed800a00          VSTR     s0,[r0,#0]
;;;866    	PIDBegin_CAN = 1;
000014  2001              MOVS     r0,#1
000016  492d              LDR      r1,|L5.204|
000018  7008              STRB     r0,[r1,#0]
;;;867    	delay_ms(800);
00001a  f44f7048          MOV      r0,#0x320
00001e  f8dfc0a4          LDR      r12,|L5.196|
000022  df00              SVC      #0x0
;;;868    	FollowMode = 0;
000024  ed9f0a2a          VLDR     s0,|L5.208|
000028  4827              LDR      r0,|L5.200|
00002a  ed800a00          VSTR     s0,[r0,#0]
;;;869    //	os_tsk_delete_self();
;;;870    	while(1)
00002e  e047              B        |L5.192|
                  |L5.48|
;;;871    	{
;;;872    		//shootedflag = 1;
;;;873    		if(shootonce == 1 || shootcons == 1)
000030  4828              LDR      r0,|L5.212|
000032  7800              LDRB     r0,[r0,#0]  ; shootonce
000034  2801              CMP      r0,#1
000036  d003              BEQ      |L5.64|
000038  4827              LDR      r0,|L5.216|
00003a  7800              LDRB     r0,[r0,#0]  ; shootcons
00003c  2801              CMP      r0,#1
00003e  d13b              BNE      |L5.184|
                  |L5.64|
;;;874    		{
;;;875    
;;;876    			if(timer200msflag == 0)
000040  4826              LDR      r0,|L5.220|
000042  7800              LDRB     r0,[r0,#0]  ; timer200msflag
000044  bb18              CBNZ     r0,|L5.142|
;;;877    			{
;;;878    				positionreachflag = 0;
000046  2000              MOVS     r0,#0
000048  4925              LDR      r1,|L5.224|
00004a  7008              STRB     r0,[r1,#0]
;;;879    				shootedflag = 0;
00004c  4925              LDR      r1,|L5.228|
00004e  7008              STRB     r0,[r1,#0]
;;;880    				cnt = 0;
000050  4925              LDR      r1,|L5.232|
000052  7008              STRB     r0,[r1,#0]
;;;881    				tmr1 = os_tmr_create (167,1);
000054  2101              MOVS     r1,#1
000056  20a7              MOVS     r0,#0xa7
000058  f8dfc090          LDR      r12,|L5.236|
00005c  df00              SVC      #0x0
00005e  4924              LDR      r1,|L5.240|
000060  6008              STR      r0,[r1,#0]  ; tmr1
;;;882    				 if (tmr1 != NULL)
000062  4608              MOV      r0,r1
000064  6800              LDR      r0,[r0,#0]  ; tmr1
000066  b338              CBZ      r0,|L5.184|
;;;883    				 {
;;;884    					 timer200msflag = 1;
000068  2001              MOVS     r0,#1
00006a  491c              LDR      r1,|L5.220|
00006c  7008              STRB     r0,[r1,#0]
;;;885    					 TurnplatePID.SetTarget(TurnplatePID.Target + 843.0f  +300);// + 300.0f);
00006e  4821              LDR      r0,|L5.244|
000070  edd00a01          VLDR     s1,[r0,#4]
000074  ed9f1a20          VLDR     s2,|L5.248|
000078  ee700a81          VADD.F32 s1,s1,s2
00007c  ed9f1a1f          VLDR     s2,|L5.252|
000080  ee700a81          VADD.F32 s1,s1,s2
000084  eeb00a60          VMOV.F32 s0,s1
000088  f7fffffe          BL       _ZN7PIDBase9SetTargetEf ; PIDBase::SetTarget(float)
00008c  e014              B        |L5.184|
                  |L5.142|
;;;886    				 }
;;;887    			 }
;;;888    			else if(positionreachflag == 1 && cnt == 0)
00008e  4814              LDR      r0,|L5.224|
000090  7800              LDRB     r0,[r0,#0]  ; positionreachflag
000092  2801              CMP      r0,#1
000094  d110              BNE      |L5.184|
000096  4814              LDR      r0,|L5.232|
000098  7800              LDRB     r0,[r0,#0]  ; cnt
00009a  b968              CBNZ     r0,|L5.184|
;;;889    			{
;;;890    				cnt = 1;
00009c  2001              MOVS     r0,#1
00009e  4912              LDR      r1,|L5.232|
0000a0  7008              STRB     r0,[r1,#0]
;;;891    				TurnplatePID.SetTarget(TurnplatePID.Target - 300.0f);
0000a2  4814              LDR      r0,|L5.244|
0000a4  edd00a01          VLDR     s1,[r0,#4]
0000a8  ed9f1a14          VLDR     s2,|L5.252|
0000ac  ee700ac1          VSUB.F32 s1,s1,s2
0000b0  eeb00a60          VMOV.F32 s0,s1
0000b4  f7fffffe          BL       _ZN7PIDBase9SetTargetEf ; PIDBase::SetTarget(float)
                  |L5.184|
;;;892    			}
;;;893    //			else if(positionreachflag == 1)
;;;894    //			{
;;;895    //				if(shootedflag == 0)
;;;896    //					cnt ++;
;;;897    //				else
;;;898    //					cnt =0;
;;;899    //				if(cnt >= 100)
;;;900    //				{
;;;901    //					positionreachflag = 0;
;;;902    //					TurnplatePID.SetTarget(TurnplatePID.Target + 833.333333f);
;;;903    //				}
;;;904    //			}
;;;905    		}
;;;906    //		if(timer200msflag!=_timer200msflag || positionreachflag!=_positionreachflag || shootedflag!=_shootedflag || shootonce!=_shootonce)
;;;907    //			u1_printf("%d\t%d\t%d\t%d\r\n",timer200msflag,positionreachflag,shootedflag,shootonce);
;;;908    //		_timer200msflag=timer200msflag;
;;;909    //		_positionreachflag=positionreachflag;
;;;910    //		_shootedflag=shootedflag;
;;;911    //		_shootonce=shootonce;
;;;912    
;;;913    		delay_ms(1);
0000b8  2001              MOVS     r0,#1
0000ba  f8dfc008          LDR      r12,|L5.196|
0000be  df00              SVC      #0x0
                  |L5.192|
0000c0  e7b6              B        |L5.48|
;;;914    	}
;;;915    //	while(1)
;;;916    //	{
;;;917    ////		u1_printf("V:%d\tI:%d\tP:%d\r\n",(int)(djm.volate*100),(int)(djm.current*100),(int)(djm.current*djm.volate*100));
;;;918    ////		Motor_Power( (u16)(80 - 2.5)/djm.volate*248.2 );
;;;919    //		if(GameInfo.realChassisOutV != 0)
;;;920    //		{
;;;921    ////			u1_printf("%d\r\n",(u16)((80 - 2.5)/djm.volate*248.2));
;;;922    //			Motor_Power((u16)((85.2 - 2.5)/GameInfo.realChassisOutV*248.2));
;;;923    
;;;924    ////			u1_printf("%d\t%d\t\r\n",GameInfo.remainTime,GameInfo.remainLifeValue);
;;;925    ////			ANO_Data2_Send(0xf1,GameInfo.realChassisOutV*GameInfo.realChassisOutA*100,GameInfo.realChassisOutV*100);
;;;926    //		}
;;;927    //		else
;;;928    //			Motor_Power((u16)((85.2 - 2.5)/24*248.2));
;;;929    
;;;930    //		delay_ms(100);
;;;931    //	}
;;;932    
;;;933    	// os_tsk_delete_self();
;;;934    //	while(1)
;;;935    //	{
;;;936    //		{
;;;937    //			static float tem;
;;;938    //			static PIDTimer Anglecor;
;;;939    //			static float Omega1,Omega2,Omega3;
;;;940    //			if(Anglecor.UpdataTimeStamp()) return;
;;;941    //			Omega1 = AngleCorrect.w1;
;;;942    //			tem = kalman_filter(&AngleKalman,Omega1 - YawPID.Omega_Offset);
;;;943    //			Omega2 = (AngleCorrect.w2 - AngleCorrect._w2);//Anglecor.dt
;;;944    //			AngleCorrect._w2 = AngleCorrect.w2;
;;;945    //			Omega3 = (AngleCorrect.w3 - AngleCorrect._w3)/CodedDiscToAngle/Anglecor.dt;//Anglecor.dt
;;;946    //			AngleCorrect._w3 = AngleCorrect.w3;
;;;947    //
;;;948    //			u1_printf("%d\t%d\t%d\r\n",(int)((Omega1 - YawPID.Omega_Offset)*Anglecor.dt *100),(int)(AngleCorrect.w2*100),(int)(tem*Anglecor.dt *100));
;;;949    ////			u1_printf("%d\t%d\t%d\r\n",(int)(Omega1*100),(int)(AngleCorrect.w2*100),(int)(tem*Anglecor.dt));
;;;950    //		}
;;;951    //		delay_ms(4);
;;;952    //	}
;;;953    
;;;954    }
;;;955    
                          ENDP

0000c2  0000              DCW      0x0000
                  |L5.196|
                          DCD      rt_dly_wait
                  |L5.200|
                          DCD      YawPID
                  |L5.204|
                          DCD      PIDBegin_CAN
                  |L5.208|
0000d0  00000000          DCFS     0x00000000 ; 0
                  |L5.212|
                          DCD      shootonce
                  |L5.216|
                          DCD      shootcons
                  |L5.220|
                          DCD      timer200msflag
                  |L5.224|
                          DCD      positionreachflag
                  |L5.228|
                          DCD      shootedflag
                  |L5.232|
                          DCD      ||cnt||
                  |L5.236|
                          DCD      rt_tmr_create
                  |L5.240|
                          DCD      tmr1
                  |L5.244|
                          DCD      TurnplatePID
                  |L5.248|
0000f8  4452c000          DCFS     0x4452c000 ; 843
                  |L5.252|
0000fc  43960000          DCFS     0x43960000 ; 300

                          AREA ||i._Z13DR16_DATA_Recv||, CODE, READONLY, ALIGN=2

                  _Z13DR16_DATA_Recv PROC ; DR16_DATA_Rec()
;;;258     */
;;;259     __task void DR16_DATA_Rec(void)
000000  b508              PUSH     {r3,lr}
;;;260     {
;;;261     	RC_Value *ptrmsg;
;;;262     	while(1)
000002  e00e              B        |L6.34|
                  |L6.4|
;;;263     	{
;;;264    
;;;265     		// if(os_mbx_wait(dr16_mailbox, (void **)&ptrmsg,200) != OS_R_TMO)//接收到遥控器数据
;;;266     		if(DR16_receive(&ptrmsg, 200) != OS_R_TMO )
000004  21c8              MOVS     r1,#0xc8
000006  4668              MOV      r0,sp
000008  f7fffffe          BL       DR16_receive
00000c  2801              CMP      r0,#1
00000e  d008              BEQ      |L6.34|
;;;267     		{
;;;268     			os_evt_set (BIT_0, HandleDisconnectCheck);//断线保护
000010  4804              LDR      r0,|L6.36|
000012  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
000014  2001              MOVS     r0,#1
000016  f8dfc010          LDR      r12,|L6.40|
00001a  df00              SVC      #0x0
;;;269     			os_dr16(ptrmsg);
00001c  9800              LDR      r0,[sp,#0]
00001e  f7fffffe          BL       os_dr16
                  |L6.34|
000022  e7ef              B        |L6.4|
;;;270     		}
;;;271    
;;;272     	}
;;;273     }
;;;274    
                          ENDP

                  |L6.36|
                          DCD      HandleDisconnectCheck
                  |L6.40|
                          DCD      rt_evt_set

                          AREA ||i._Z13PCData_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z13PCData_Aguestv PROC ; PCData_Aguest()
;;;611    extern short AxicX,AxicY,AxicZ;
;;;612    __task void PCData_Aguest(void)
000000  2500              MOVS     r5,#0
;;;613    {
;;;614       u16 X,Y,Z; 
;;;615    	u8 lastAAFlag=0,AArec_time=0;
000002  2400              MOVS     r4,#0
;;;616    //	delay_ms(2000);
;;;617    	os_itv_set(1);	/* 设置延迟周期 */
000004  2001              MOVS     r0,#1
000006  f8dfc0a8          LDR      r12,|L7.176|
00000a  df00              SVC      #0x0
;;;618    	while(1)
00000c  e04f              B        |L7.174|
                  |L7.14|
;;;619    	{
;;;620    //		StrategicMode = 2;
;;;621    //		FollowMode = 1;
;;;622    //		if(PIDBegin_DR16 && PIDBegin_CAN  && !GetParaFlag()
;;;623    		FollowMode = 1;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
000012  4828              LDR      r0,|L7.180|
000014  ed800a00          VSTR     s0,[r0,#0]
;;;624    		
;;;625    		if( PIDBegin_DR16&&PIDBegin_CAN &&  !GetParaFlag() && CAN1_Ultrasonic && CAN1_Angle && bumark==0 && !STILL_BUTTON)
000018  4827              LDR      r0,|L7.184|
00001a  7800              LDRB     r0,[r0,#0]  ; PIDBegin_DR16
00001c  2800              CMP      r0,#0
00001e  d043              BEQ      |L7.168|
000020  4826              LDR      r0,|L7.188|
000022  7800              LDRB     r0,[r0,#0]  ; PIDBegin_CAN
000024  2800              CMP      r0,#0
000026  d03f              BEQ      |L7.168|
000028  f7fffffe          BL       GetParaFlag
00002c  2800              CMP      r0,#0
00002e  d13b              BNE      |L7.168|
000030  4823              LDR      r0,|L7.192|
000032  7800              LDRB     r0,[r0,#0]  ; CAN1_Ultrasonic
000034  2800              CMP      r0,#0
000036  d037              BEQ      |L7.168|
000038  4822              LDR      r0,|L7.196|
00003a  7800              LDRB     r0,[r0,#0]  ; CAN1_Angle
00003c  b368              CBZ      r0,|L7.154|
00003e  4822              LDR      r0,|L7.200|
000040  7800              LDRB     r0,[r0,#0]  ; bumark
000042  bb50              CBNZ     r0,|L7.154|
000044  4821              LDR      r0,|L7.204|
000046  7800              LDRB     r0,[r0,#0]  ; STILL_BUTTON
000048  bb38              CBNZ     r0,|L7.154|
;;;626    		{
;;;627    			if(lastAAFlag!=auto_attack_flag){AArec_time++;}
00004a  4821              LDR      r0,|L7.208|
00004c  7800              LDRB     r0,[r0,#0]  ; auto_attack_flag
00004e  4285              CMP      r5,r0
000050  d001              BEQ      |L7.86|
000052  1c60              ADDS     r0,r4,#1
000054  b2c4              UXTB     r4,r0
                  |L7.86|
;;;628    				 if(AArec_time>2)
000056  2c02              CMP      r4,#2
000058  dd06              BLE      |L7.104|
;;;629    				 {
;;;630    					 AArec_time=0;
00005a  2400              MOVS     r4,#0
;;;631    				   lastAAFlag=auto_attack_flag;
00005c  481c              LDR      r0,|L7.208|
00005e  7805              LDRB     r5,[r0,#0]  ; auto_attack_flag
;;;632    					 ESC_Toggle();
000060  f7fffffe          BL       ESC_Toggle
;;;633    					 Turnplate_motor_Toggle();
000064  f7fffffe          BL       Turnplate_motor_Toggle
                  |L7.104|
;;;634    				 }
;;;635    			/**************/
;;;636    
;;;637    			//jijijijijijijijjjij	 
;;;638    			//YawPID.SetTarget(YawPID.Current + 45*CodedDiscToAngle);
;;;639    			//PitchPID.SetTarget(PitchPID.Current + 30	 *CodedDiscToAngle);
;;;640    			//	 PitchPID.SetTarget(PitchPID.Current+0.0005*cvstruct.CV_Y*CodedDiscToAngle);//
;;;641    		//改这个代码，小心烧云台电机。烧程序时，注意关电源。
;;;642    				 
;;;643    				 
;;;644    				 
;;;645    			/**************/
;;;646          if((Run_Start())&&auto_attack_flag)
000068  f7fffffe          BL       Run_Start
00006c  b1a8              CBZ      r0,|L7.154|
00006e  4818              LDR      r0,|L7.208|
000070  7800              LDRB     r0,[r0,#0]  ; auto_attack_flag
000072  b190              CBZ      r0,|L7.154|
;;;647    			{
;;;648    				//开电调
;;;649    			 
;;;650    				
;;;651    						if((distance3>450)&&(distance2>550))
000074  4817              LDR      r0,|L7.212|
000076  f9b00000          LDRSH    r0,[r0,#0]  ; distance3
00007a  f5b07fe1          CMP      r0,#0x1c2
00007e  dd0d              BLE      |L7.156|
000080  4815              LDR      r0,|L7.216|
000082  f9b00000          LDRSH    r0,[r0,#0]  ; distance2
000086  f2402126          MOV      r1,#0x226
00008a  4288              CMP      r0,r1
00008c  dd06              BLE      |L7.156|
;;;652    						{
;;;653    							AxicX = 600;
00008e  f44f7016          MOV      r0,#0x258
000092  4912              LDR      r1,|L7.220|
000094  8008              STRH     r0,[r1,#0]
;;;654    						  AxicY = 600;
000096  4912              LDR      r1,|L7.224|
000098  8008              STRH     r0,[r1,#0]
                  |L7.154|
00009a  e005              B        |L7.168|
                  |L7.156|
;;;655    						}
;;;656    						else
;;;657    						{
;;;658    							AxicX = 1024;
00009c  f44f6080          MOV      r0,#0x400
0000a0  490e              LDR      r1,|L7.220|
0000a2  8008              STRH     r0,[r1,#0]
;;;659    							AxicY = 1024;
0000a4  490e              LDR      r1,|L7.224|
0000a6  8008              STRH     r0,[r1,#0]
                  |L7.168|
;;;660    						}
;;;661    //  					if(	(PitchPID.Current - cvstruct.CV_Y*0.001*CodedDiscToAngle)
;;;662    //							PitchPID.SetTarget(PitchPID.Current - cvstruct.CV_Y*0.00628571);//(660/(1750*60))=0.00628571
;;;663    						
;;;664    					
;;;665    //						else if(cvstruct.CV_Y>350)
;;;666    //							PitchPID.SetTarget(PitchPID.Current + 30	 *CodedDiscToAngle);
;;;667    			}
;;;668    		}
;;;669    		os_itv_wait ();
0000a8  f8dfc038          LDR      r12,|L7.228|
0000ac  df00              SVC      #0x0
                  |L7.174|
0000ae  e7ae              B        |L7.14|
;;;670    	}
;;;671    }
;;;672    
                          ENDP

                  |L7.176|
                          DCD      rt_itv_set
                  |L7.180|
                          DCD      YawPID
                  |L7.184|
                          DCD      PIDBegin_DR16
                  |L7.188|
                          DCD      PIDBegin_CAN
                  |L7.192|
                          DCD      CAN1_Ultrasonic
                  |L7.196|
                          DCD      CAN1_Angle
                  |L7.200|
                          DCD      bumark
                  |L7.204|
                          DCD      STILL_BUTTON
                  |L7.208|
                          DCD      auto_attack_flag
                  |L7.212|
                          DCD      distance3
                  |L7.216|
                          DCD      distance2
                  |L7.220|
                          DCD      AxicX
                  |L7.224|
                          DCD      AxicY
                  |L7.228|
                          DCD      rt_itv_wait

                          AREA ||i._Z14CAN1_DATA0_Recv||, CODE, READONLY, ALIGN=2

                  _Z14CAN1_DATA0_Recv PROC ; CAN1_DATA0_Rec()
;;;346     */
;;;347    __task void CAN1_DATA0_Rec(void)
000000  b508              PUSH     {r3,lr}
;;;348    {
;;;349    	u8 shootcnt = 0;
000002  2400              MOVS     r4,#0
;;;350    	CanRxMsg *msg_rece;
;;;351    //	can_filter_Mask_config(CanFilter_5|CanFifo_0|Can_STDID|Can_DataType,0x110,0x3ff);
;;;352    	can_filter_Mask_config(CanFilter_7|CanFifo_0|Can_STDID|Can_DataType,0x502,0x3ff);
000004  f24032ff          MOV      r2,#0x3ff
000008  f2405102          MOV      r1,#0x502
00000c  2038              MOVS     r0,#0x38
00000e  f7fffffe          BL       can_filter_Mask_config
;;;353    	can_filter_Mask_config(CanFilter_1|CanFifo_0|Can_STDID|Can_DataType,0x402,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
000012  f24032ff          MOV      r2,#0x3ff
000016  1cd1              ADDS     r1,r2,#3
000018  2008              MOVS     r0,#8
00001a  f7fffffe          BL       can_filter_Mask_config
;;;354    	can_filter_Mask_config(CanFilter_2|CanFifo_0|Can_STDID|Can_DataType,0x88,0x3ff);
00001e  f24032ff          MOV      r2,#0x3ff
000022  2188              MOVS     r1,#0x88
000024  2010              MOVS     r0,#0x10
000026  f7fffffe          BL       can_filter_Mask_config
;;;355    	can_filter_Mask_config(CanFilter_3|CanFifo_0|Can_STDID|Can_DataType,0x503,0x3ff);
00002a  f24032ff          MOV      r2,#0x3ff
00002e  f2405103          MOV      r1,#0x503
000032  2018              MOVS     r0,#0x18
000034  f7fffffe          BL       can_filter_Mask_config
;;;356    	can_filter_Mask_config(CanFilter_4|CanFifo_0|Can_STDID|Can_DataType,0x504,0x3ff);
000038  f24032ff          MOV      r2,#0x3ff
00003c  f2405104          MOV      r1,#0x504
000040  2020              MOVS     r0,#0x20
000042  f7fffffe          BL       can_filter_Mask_config
;;;357    	can_filter_Mask_config(CanFilter_5|CanFifo_0|Can_STDID|Can_DataType,0x501,0x3ff);
000046  f24032ff          MOV      r2,#0x3ff
00004a  f2405101          MOV      r1,#0x501
00004e  2028              MOVS     r0,#0x28
000050  f7fffffe          BL       can_filter_Mask_config
;;;358    	can_nvic_config(CAN1_R0);
000054  2014              MOVS     r0,#0x14
000056  f7fffffe          BL       can_nvic_config
;;;359    	while(1)
00005a  e074              B        |L8.326|
                  |L8.92|
;;;360    	{
;;;361    		if (CAN_receive (1, 0,&msg_rece,200) != OS_R_TMO)//接收到CAN数据
00005c  23c8              MOVS     r3,#0xc8
00005e  466a              MOV      r2,sp
000060  2100              MOVS     r1,#0
000062  2001              MOVS     r0,#1
000064  f7fffffe          BL       CAN_receive
000068  2801              CMP      r0,#1
00006a  d06c              BEQ      |L8.326|
;;;362    		{
;;;363    //			u1_printf("1234");	
;;;364    			if(msg_rece->StdId == 0x502)
00006c  9800              LDR      r0,[sp,#0]
00006e  6800              LDR      r0,[r0,#0]
000070  f2405102          MOV      r1,#0x502
000074  4288              CMP      r0,r1
000076  d107              BNE      |L8.136|
;;;365    			{
;;;366    				if(timer200msflag == 1)
000078  4833              LDR      r0,|L8.328|
00007a  7800              LDRB     r0,[r0,#0]  ; timer200msflag
00007c  2801              CMP      r0,#1
00007e  d101              BNE      |L8.132|
;;;367    				{
;;;368    						shootedflag = 1;
000080  4932              LDR      r1,|L8.332|
000082  7008              STRB     r0,[r1,#0]
                  |L8.132|
;;;369    				}
;;;370    				shootcnt++;
000084  1c60              ADDS     r0,r4,#1
000086  b2c4              UXTB     r4,r0
                  |L8.136|
;;;371    //				u1_printf("%d\t%d\t%d\r\n",shootcnt,(int)(((tRealShootDataBase*)(msg_rece->Data))->realShootSpeed*100),(int)(((tRealShootDataBase*)(msg_rece->Data))->realShootFreq)*100);
;;;372    
;;;373    //				u1_printf("%d\t%d\r\n",(int)((tRealShootData*)(msg_rece))->realBulletShootSpeed,(int)((tRealShootData*)(msg_rece))->realBulletShootFreq);
;;;374    //				add_bullet(msg_rece);
;;;375    			}
;;;376    				if(msg_rece->StdId == 0x402)
000088  9800              LDR      r0,[sp,#0]
00008a  6800              LDR      r0,[r0,#0]
00008c  f2404102          MOV      r1,#0x402
000090  4288              CMP      r0,r1
000092  d108              BNE      |L8.166|
;;;377    			{
;;;378    				os_evt_set (BIT_2, HandleDisconnectCheck);
000094  482e              LDR      r0,|L8.336|
000096  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
000098  2004              MOVS     r0,#4
00009a  f8dfc0b8          LDR      r12,|L8.340|
00009e  df00              SVC      #0x0
;;;379    //				if(spin_flag)                  Run_Spin(msg_rece);
;;;380    //				else                           Run_Correct(msg_rece);
;;;381    				Run_Spin(msg_rece);
0000a0  9800              LDR      r0,[sp,#0]
0000a2  f7fffffe          BL       Run_Spin
                  |L8.166|
;;;382    //				yaw_angle
;;;383    //			 os_evt_set (BIT_2, HandleDisconnectCheck);//断线保护
;;;384    //        u1_printf("a");      
;;;385    //				Run_Correct(msg_rece);
;;;386    			}
;;;387    			if(msg_rece->StdId == 0x88)
0000a6  9800              LDR      r0,[sp,#0]
0000a8  6800              LDR      r0,[r0,#0]
0000aa  2888              CMP      r0,#0x88
0000ac  d108              BNE      |L8.192|
;;;388    			{
;;;389           os_evt_set (BIT_6, HandleDisconnectCheck);	
0000ae  4828              LDR      r0,|L8.336|
0000b0  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
0000b2  2040              MOVS     r0,#0x40
0000b4  f8dfc09c          LDR      r12,|L8.340|
0000b8  df00              SVC      #0x0
;;;390            Moving_Gyo(msg_rece);				
0000ba  9800              LDR      r0,[sp,#0]
0000bc  f7fffffe          BL       Moving_Gyo
                  |L8.192|
;;;391    //      if(ADDBULLET_BUTTON){Run_Random_v2(msg_rece);}
;;;392    //			else
;;;393    //			{
;;;394    //			 if((!spin_flag))
;;;395    //			 {
;;;396    //				Run_Random_v2(msg_rece);
;;;397    //				Run_Protect();				
;;;398    //			 } 
;;;399    //			 if((rand_flag==9)&&(across_times>4)) {spin_flag=1;across_times=0;last_yawangle=yaw_angle;}
;;;400    //		  }
;;;401    //				Run_By_Surround(msg_rece);
;;;402    //				Moving_Gyo(msg_rece);
;;;403    //			 u1_printf("b");         
;;;404    //			 Run_Protect();
;;;405    	    }	
;;;406         	if(msg_rece->StdId == 0x503)
0000c0  9800              LDR      r0,[sp,#0]
0000c2  6800              LDR      r0,[r0,#0]
0000c4  f2405103          MOV      r1,#0x503
0000c8  4288              CMP      r0,r1
0000ca  d10a              BNE      |L8.226|
;;;407    			{
;;;408    				 os_evt_set(BIT_8, HandleDisconnectCheck);
0000cc  4820              LDR      r0,|L8.336|
0000ce  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
0000d0  f44f7080          MOV      r0,#0x100
0000d4  f8dfc07c          LDR      r12,|L8.340|
0000d8  df00              SVC      #0x0
;;;409    //         if(msg_rece->Data[1]==0x0){runstart_flag=1;ADDBULLET_BUTTON=0;}
;;;410    //				  u1_printf("%d\r\n",msg_rece->Data[1]);
;;;411    //				 hurt_origin=msg_rece->Data[1];
;;;412    		         runstart_flag=msg_rece->Data[0];
0000da  9800              LDR      r0,[sp,#0]
0000dc  7ac0              LDRB     r0,[r0,#0xb]
0000de  491e              LDR      r1,|L8.344|
0000e0  7008              STRB     r0,[r1,#0]
                  |L8.226|
;;;413    //				 u1_printf("12334hurt_origin:%d\t%d\r\n",runstart_flag,hurt_origin);
;;;414    //				 if(msg_rece->Data[1]==0x01)Utc_Answer=1;
;;;415    			}
;;;416    			if(msg_rece->StdId == 0x504)
0000e2  9800              LDR      r0,[sp,#0]
0000e4  6800              LDR      r0,[r0,#0]
0000e6  f2405104          MOV      r1,#0x504
0000ea  4288              CMP      r0,r1
0000ec  d105              BNE      |L8.250|
;;;417    			{
;;;418             os_evt_set(BIT_5, HandleDisconnectCheck);
0000ee  4818              LDR      r0,|L8.336|
0000f0  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
0000f2  2020              MOVS     r0,#0x20
0000f4  f8dfc05c          LDR      r12,|L8.340|
0000f8  df00              SVC      #0x0
                  |L8.250|
;;;419    //				 u1_printf("%d\r\n",msg_rece->Data[1]);
;;;420    //			if(msg_rece->Data[1]==0x00)    OVERPOWER_BUTTON=1;
;;;421    //			else (msg_rece->Data[1]==0x01) OVERPOWER_BUTTON=0;
;;;422    //				 if(msg_rece->Data[0]==0x01)
;;;423    			}
;;;424    			if(msg_rece->StdId == 0x501)
0000fa  9800              LDR      r0,[sp,#0]
0000fc  6800              LDR      r0,[r0,#0]
0000fe  f2405101          MOV      r1,#0x501
000102  4288              CMP      r0,r1
000104  d11f              BNE      |L8.326|
;;;425    			{
;;;426    //        cvstruct.ID=(int8_t)msg_rece->Data[0];
;;;427    				cvstruct.Flag=(int8_t)msg_rece->Data[1];
000106  9800              LDR      r0,[sp,#0]
000108  7b00              LDRB     r0,[r0,#0xc]
00010a  b240              SXTB     r0,r0
00010c  4913              LDR      r1,|L8.348|
00010e  7048              STRB     r0,[r1,#1]
;;;428    				cvstruct.CV_X=(int16_t)msg_rece->Data[3]<<8|msg_rece->Data[2];
000110  9800              LDR      r0,[sp,#0]
000112  7b41              LDRB     r1,[r0,#0xd]
000114  7b80              LDRB     r0,[r0,#0xe]
000116  ea412000          ORR      r0,r1,r0,LSL #8
00011a  b200              SXTH     r0,r0
00011c  490f              LDR      r1,|L8.348|
00011e  8048              STRH     r0,[r1,#2]
;;;429    				cvstruct.CV_Y=(int16_t)msg_rece->Data[5]<<8|msg_rece->Data[4];
000120  9800              LDR      r0,[sp,#0]
000122  7bc1              LDRB     r1,[r0,#0xf]
000124  7c00              LDRB     r0,[r0,#0x10]
000126  ea412000          ORR      r0,r1,r0,LSL #8
00012a  b200              SXTH     r0,r0
00012c  490b              LDR      r1,|L8.348|
00012e  8088              STRH     r0,[r1,#4]
;;;430    				cvstruct.RES=(int16_t)msg_rece->Data[7]<<8|msg_rece->Data[6];
000130  9800              LDR      r0,[sp,#0]
000132  7c41              LDRB     r1,[r0,#0x11]
000134  7c80              LDRB     r0,[r0,#0x12]
000136  ea412000          ORR      r0,r1,r0,LSL #8
00013a  b200              SXTH     r0,r0
00013c  4907              LDR      r1,|L8.348|
00013e  80c8              STRH     r0,[r1,#6]
;;;431    				Base_AutoAttack(&cvstruct);
000140  4608              MOV      r0,r1
000142  f7fffffe          BL       Base_AutoAttack
                  |L8.326|
000146  e789              B        |L8.92|
;;;432    //				u1_printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\r\n",cvstruct.ID,cvstruct.Flag,cvstruct.CV_X,cvstruct.CV_Y,cvstruct.RES);							
;;;433    			}
;;;434    		}
;;;435    	}
;;;436    
;;;437    }
;;;438    
                          ENDP

                  |L8.328|
                          DCD      timer200msflag
                  |L8.332|
                          DCD      shootedflag
                  |L8.336|
                          DCD      HandleDisconnectCheck
                  |L8.340|
                          DCD      rt_evt_set
                  |L8.344|
                          DCD      runstart_flag
                  |L8.348|
                          DCD      cvstruct

                          AREA ||i._Z14CAN2_DATA0_Recv||, CODE, READONLY, ALIGN=2

                  _Z14CAN2_DATA0_Recv PROC ; CAN2_DATA0_Rec()
;;;441     */
;;;442    __task void CAN2_DATA0_Rec(void)
000000  b508              PUSH     {r3,lr}
;;;443    {
;;;444    	CanRxMsg *msg_rece;
;;;445    	can_filter_Mask_config(CanFilter_14|CanFifo_0|Can_STDID|Can_DataType,0x205,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
000002  f24032ff          MOV      r2,#0x3ff
000006  f2402105          MOV      r1,#0x205
00000a  2070              MOVS     r0,#0x70
00000c  f7fffffe          BL       can_filter_Mask_config
;;;446    	can_filter_Mask_config(CanFilter_15|CanFifo_0|Can_STDID|Can_DataType,0x206,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
000010  f24032ff          MOV      r2,#0x3ff
000014  f2402106          MOV      r1,#0x206
000018  2078              MOVS     r0,#0x78
00001a  f7fffffe          BL       can_filter_Mask_config
;;;447    	can_nvic_config(CAN2_R0);
00001e  2040              MOVS     r0,#0x40
000020  f7fffffe          BL       can_nvic_config
;;;448    	while(1)
000024  e025              B        |L9.114|
                  |L9.38|
;;;449    	{
;;;450    		if (CAN_receive (2, 0,&msg_rece,200) != OS_R_TMO)//接收到CAN数据
000026  23c8              MOVS     r3,#0xc8
000028  466a              MOV      r2,sp
00002a  2100              MOVS     r1,#0
00002c  2002              MOVS     r0,#2
00002e  f7fffffe          BL       CAN_receive
000032  2801              CMP      r0,#1
000034  d01d              BEQ      |L9.114|
;;;451    		{
;;;452    //			u1_printf("%a");
;;;453    			if(msg_rece->StdId == 0x206){
000036  9800              LDR      r0,[sp,#0]
000038  6800              LDR      r0,[r0,#0]
00003a  f2402106          MOV      r1,#0x206
00003e  4288              CMP      r0,r1
000040  d108              BNE      |L9.84|
;;;454    				os_evt_set (BIT_3, HandleDisconnectCheck);//断线保护
000042  480c              LDR      r0,|L9.116|
000044  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
000046  2008              MOVS     r0,#8
000048  f8dfc02c          LDR      r12,|L9.120|
00004c  df00              SVC      #0x0
;;;455    				PitchMotor(msg_rece);
00004e  9800              LDR      r0,[sp,#0]
000050  f7fffffe          BL       PitchMotor
                  |L9.84|
;;;456    			}
;;;457    			if(msg_rece->StdId == 0x205){
000054  9800              LDR      r0,[sp,#0]
000056  6800              LDR      r0,[r0,#0]
000058  f2402105          MOV      r1,#0x205
00005c  4288              CMP      r0,r1
00005e  d108              BNE      |L9.114|
;;;458    				os_evt_set (BIT_4, HandleDisconnectCheck);//断线保护
000060  4804              LDR      r0,|L9.116|
000062  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
000064  2010              MOVS     r0,#0x10
000066  f8dfc010          LDR      r12,|L9.120|
00006a  df00              SVC      #0x0
;;;459    				YawMotor(msg_rece);
00006c  9800              LDR      r0,[sp,#0]
00006e  f7fffffe          BL       YawMotor
                  |L9.114|
000072  e7d8              B        |L9.38|
;;;460    			}
;;;461    		}
;;;462    	}
;;;463    }
;;;464    
                          ENDP

                  |L9.116|
                          DCD      HandleDisconnectCheck
                  |L9.120|
                          DCD      rt_evt_set

                          AREA ||i._Z14CAN2_DATA1_Recv||, CODE, READONLY, ALIGN=2

                  _Z14CAN2_DATA1_Recv PROC ; CAN2_DATA1_Rec()
;;;468     */
;;;469    __task void CAN2_DATA1_Rec(void)
000000  b508              PUSH     {r3,lr}
;;;470    {
;;;471    	CanRxMsg *msg_rece;
;;;472    	can_filter_Mask_config(CanFilter_16|CanFifo_1|Can_STDID|Can_DataType,0x401,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
000002  f24032ff          MOV      r2,#0x3ff
000006  1c91              ADDS     r1,r2,#2
000008  2084              MOVS     r0,#0x84
00000a  f7fffffe          BL       can_filter_Mask_config
;;;473    	can_filter_Mask_config(CanFilter_17|CanFifo_1|Can_STDID|Can_DataType,0x402,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
00000e  f24032ff          MOV      r2,#0x3ff
000012  1cd1              ADDS     r1,r2,#3
000014  208c              MOVS     r0,#0x8c
000016  f7fffffe          BL       can_filter_Mask_config
;;;474    	can_filter_Mask_config(CanFilter_18|CanFifo_1|Can_STDID|Can_DataType,0x403,0x3ff);//筛选器:|编号|FIFOx|ID类型|帧类型|ID|屏蔽位(0x3ff,0x1FFFFFFF)|
00001a  f24032ff          MOV      r2,#0x3ff
00001e  1d11              ADDS     r1,r2,#4
000020  2094              MOVS     r0,#0x94
000022  f7fffffe          BL       can_filter_Mask_config
;;;475    	can_filter_Mask_config(CanFilter_19|CanFifo_1|Can_STDID|Can_DataType,0x501,0x3ff);
000026  f24032ff          MOV      r2,#0x3ff
00002a  f2405101          MOV      r1,#0x501
00002e  209c              MOVS     r0,#0x9c
000030  f7fffffe          BL       can_filter_Mask_config
;;;476    	can_nvic_config(CAN2_R1);
000034  2041              MOVS     r0,#0x41
000036  f7fffffe          BL       can_nvic_config
;;;477    	while(1)
00003a  e031              B        |L10.160|
                  |L10.60|
;;;478    	{
;;;479    		if (CAN_receive (2, 1,&msg_rece,200) != OS_R_TMO)//接收到CAN数据
00003c  23c8              MOVS     r3,#0xc8
00003e  466a              MOV      r2,sp
000040  2101              MOVS     r1,#1
000042  2002              MOVS     r0,#2
000044  f7fffffe          BL       CAN_receive
000048  2801              CMP      r0,#1
00004a  d029              BEQ      |L10.160|
;;;480    		{
;;;481    			if(msg_rece->StdId == 0x401){
00004c  9800              LDR      r0,[sp,#0]
00004e  6800              LDR      r0,[r0,#0]
000050  f2404101          MOV      r1,#0x401
000054  4288              CMP      r0,r1
000056  d102              BNE      |L10.94|
;;;482    
;;;483    //				os_evt_set (BIT_2, HandleDisconnectCheck);//断线保护
;;;484    				YawAngle(msg_rece);
000058  9800              LDR      r0,[sp,#0]
00005a  f7fffffe          BL       YawAngle
                  |L10.94|
;;;485    			}
;;;486    			if(msg_rece->StdId == 0x402){
00005e  9800              LDR      r0,[sp,#0]
000060  6800              LDR      r0,[r0,#0]
000062  f2404102          MOV      r1,#0x402
000066  4288              CMP      r0,r1
000068  d102              BNE      |L10.112|
;;;487    //				os_evt_set (BIT_2, HandleDisconnectCheck);//断线保护
;;;488    				YawAngle_6050(msg_rece);
00006a  9800              LDR      r0,[sp,#0]
00006c  f7fffffe          BL       YawAngle_6050
                  |L10.112|
;;;489    			}
;;;490    			if(msg_rece->StdId == 0x403){
000070  9800              LDR      r0,[sp,#0]
000072  6800              LDR      r0,[r0,#0]
000074  f2404103          MOV      r1,#0x403
000078  4288              CMP      r0,r1
00007a  d102              BNE      |L10.130|
;;;491    //				os_evt_set (BIT_2, HandleDisconnectCheck);//断线保护
;;;492    				YawAngle_ADXRS622(msg_rece);
00007c  9800              LDR      r0,[sp,#0]
00007e  f7fffffe          BL       YawAngle_ADXRS622
                  |L10.130|
;;;493    			}
;;;494    			if(msg_rece->StdId == 0x501){
000082  9800              LDR      r0,[sp,#0]
000084  6800              LDR      r0,[r0,#0]
000086  f2405101          MOV      r1,#0x501
00008a  4288              CMP      r0,r1
00008c  d108              BNE      |L10.160|
;;;495    				os_evt_set (BIT_7, HandleDisconnectCheck);//断线保护
00008e  4805              LDR      r0,|L10.164|
000090  6801              LDR      r1,[r0,#0]  ; HandleDisconnectCheck
000092  2080              MOVS     r0,#0x80
000094  f8dfc010          LDR      r12,|L10.168|
000098  df00              SVC      #0x0
;;;496            New_Board(msg_rece);
00009a  9800              LDR      r0,[sp,#0]
00009c  f7fffffe          BL       New_Board
                  |L10.160|
0000a0  e7cc              B        |L10.60|
;;;497    			}
;;;498    		}
;;;499    	}
;;;500    }
;;;501    
                          ENDP

0000a2  0000              DCW      0x0000
                  |L10.164|
                          DCD      HandleDisconnectCheck
                  |L10.168|
                          DCD      rt_evt_set

                          AREA ||i._Z15CarFrame_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z15CarFrame_Aguestv PROC ; CarFrame_Aguest()
;;;564    extern float speed;
;;;565    __task void CarFrame_Aguest(void)
000000  ed2d8b02          VPUSH    {d8}
;;;566    {
;;;567       u16 X,Y,Z; 
;;;568    //	delay_ms(2000);
;;;569    	os_itv_set(1);	/* 设置延迟周期 */
000004  2001              MOVS     r0,#1
000006  f8dfc138          LDR      r12,|L11.320|
00000a  df00              SVC      #0x0
;;;570    	while(1)
00000c  e096              B        |L11.316|
                  |L11.14|
;;;571    	{
;;;572    //		StrategicMode = 2;
;;;573    //		FollowMode = 1;
;;;574    //		if(PIDBegin_DR16 && PIDBegin_CAN  && !GetParaFlag()
;;;575    		FollowMode = 1;
00000e  eeb70a00          VMOV.F32 s0,#1.00000000
000012  484c              LDR      r0,|L11.324|
000014  ed800a00          VSTR     s0,[r0,#0]
;;;576    //		if(PIDBegin_DR16 && PIDBegin_CAN && CAN2_YawAngle && CAN2_YawMotor && CAN2_PitchMotor && !GetParaFlag()
;;;577    //			&& bumark==0)
;;;578    		
;;;579    		if( PIDBegin_DR16&&PIDBegin_CAN &&  !GetParaFlag() && CAN1_Ultrasonic && CAN1_Angle && bumark==0 && !STILL_BUTTON)
000018  484b              LDR      r0,|L11.328|
00001a  7800              LDRB     r0,[r0,#0]  ; PIDBegin_DR16
00001c  2800              CMP      r0,#0
00001e  d07b              BEQ      |L11.280|
000020  484a              LDR      r0,|L11.332|
000022  7800              LDRB     r0,[r0,#0]  ; PIDBegin_CAN
000024  2800              CMP      r0,#0
000026  d077              BEQ      |L11.280|
000028  f7fffffe          BL       GetParaFlag
00002c  2800              CMP      r0,#0
00002e  d173              BNE      |L11.280|
000030  4847              LDR      r0,|L11.336|
000032  7800              LDRB     r0,[r0,#0]  ; CAN1_Ultrasonic
000034  2800              CMP      r0,#0
000036  d06f              BEQ      |L11.280|
000038  4846              LDR      r0,|L11.340|
00003a  7800              LDRB     r0,[r0,#0]  ; CAN1_Angle
00003c  2800              CMP      r0,#0
00003e  d06b              BEQ      |L11.280|
000040  4845              LDR      r0,|L11.344|
000042  7800              LDRB     r0,[r0,#0]  ; bumark
000044  2800              CMP      r0,#0
000046  d167              BNE      |L11.280|
000048  4844              LDR      r0,|L11.348|
00004a  7800              LDRB     r0,[r0,#0]  ; STILL_BUTTON
00004c  2800              CMP      r0,#0
00004e  d163              BNE      |L11.280|
;;;580    		{
;;;581    //			CarFramePID.SetPID(3.5,0.0,0.0);
;;;582    //			CarFramePID.AdjustPID();  
;;;583    			if((Run_Start())&&(runstart_flag))
000050  f7fffffe          BL       Run_Start
000054  b148              CBZ      r0,|L11.106|
000056  4842              LDR      r0,|L11.352|
000058  7800              LDRB     r0,[r0,#0]  ; runstart_flag
00005a  b130              CBZ      r0,|L11.106|
;;;584    			{Motor_Aguest_Random(hurt_origin,hurt_id);}
00005c  4841              LDR      r0,|L11.356|
00005e  7801              LDRB     r1,[r0,#0]  ; hurt_id
000060  4841              LDR      r0,|L11.360|
000062  7800              LDRB     r0,[r0,#0]  ; hurt_origin
000064  f7fffffe          BL       Motor_Aguest_Random
000068  e065              B        |L11.310|
                  |L11.106|
;;;585    			else if((Run_Start())&&auto_attack_flag)
00006a  f7fffffe          BL       Run_Start
00006e  b3b8              CBZ      r0,|L11.224|
000070  483e              LDR      r0,|L11.364|
000072  7800              LDRB     r0,[r0,#0]  ; auto_attack_flag
000074  b3a0              CBZ      r0,|L11.224|
;;;586    			{
;;;587    //				Motor_Aguest(Get_AxicX(),Get_AxicY(),-speed,0);
;;;588    				Motor_Aguest(1024,1024,-speed,0);//位置对准
000076  eddf0a3e          VLDR     s1,|L11.368|
00007a  483e              LDR      r0,|L11.372|
00007c  ed900a00          VLDR     s0,[r0,#0]
000080  eeb10a40          VNEG.F32 s0,s0
000084  f44f6180          MOV      r1,#0x400
000088  4608              MOV      r0,r1
00008a  f7fffffe          BL       Motor_Aguest
;;;589    				if(myabs(speed)<100)
00008e  4839              LDR      r0,|L11.372|
000090  ed900a00          VLDR     s0,[r0,#0]
000094  eeb50ac0          VCMPE.F32 s0,#0.0
000098  eef1fa10          VMRS     APSR_nzcv,FPSCR
00009c  dd02              BLE      |L11.164|
00009e  ed900a00          VLDR     s0,[r0,#0]
0000a2  e004              B        |L11.174|
                  |L11.164|
0000a4  4833              LDR      r0,|L11.372|
0000a6  ed900a00          VLDR     s0,[r0,#0]
0000aa  eeb10a40          VNEG.F32 s0,s0
                  |L11.174|
0000ae  eddf0a32          VLDR     s1,|L11.376|
0000b2  eeb40ae0          VCMPE.F32 s0,s1
0000b6  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000ba  d23c              BCS      |L11.310|
;;;590    					Motor_Aguest(Get_AxicX(),Get_AxicY(),-speed,0);//位置靠近
0000bc  f7fffffe          BL       Get_AxicY
0000c0  b284              UXTH     r4,r0
0000c2  f7fffffe          BL       Get_AxicX
0000c6  b285              UXTH     r5,r0
0000c8  eddf0a29          VLDR     s1,|L11.368|
0000cc  4829              LDR      r0,|L11.372|
0000ce  ed900a00          VLDR     s0,[r0,#0]
0000d2  eeb10a40          VNEG.F32 s0,s0
0000d6  4621              MOV      r1,r4
0000d8  4628              MOV      r0,r5
0000da  f7fffffe          BL       Motor_Aguest
0000de  e02a              B        |L11.310|
                  |L11.224|
0000e0  e7ff              B        |L11.226|
                  |L11.226|
;;;591    				 
;;;592    			//	PitchPID.SetTarget(PitchPID.Current - 0*CodedDiscToAngle);
;;;593    
;;;594    //	else  Motor_Aguest(1024,1024,-1000,0);			
;;;595    			}
;;;596    			else if(!(Run_Start())) 
0000e2  f7fffffe          BL       Run_Start
0000e6  bb30              CBNZ     r0,|L11.310|
;;;597    			{
;;;598    			   Motor_Aguest(Get_AxicX(),Get_AxicY(),Get_AxicZ(),0);
0000e8  f7fffffe          BL       Get_AxicZ
0000ec  ee000a10          VMOV     s0,r0
0000f0  eeb80ac0          VCVT.F32.S32 s0,s0
0000f4  eeb08a40          VMOV.F32 s16,s0
0000f8  f7fffffe          BL       Get_AxicY
0000fc  b284              UXTH     r4,r0
0000fe  f7fffffe          BL       Get_AxicX
000102  b285              UXTH     r5,r0
000104  eddf0a1a          VLDR     s1,|L11.368|
000108  eeb00a48          VMOV.F32 s0,s16
00010c  4621              MOV      r1,r4
00010e  4628              MOV      r0,r5
000110  f7fffffe          BL       Motor_Aguest
000114  e00f              B        |L11.310|
000116  e7ff              B        |L11.280|
                  |L11.280|
;;;599    			}	
;;;600    		}
;;;601    		else if(PIDBegin_CAN && bumark==0)//PIDBegin_CAN=1时才能Stop,不然买的RMDS-103驱动器会因为发送停止信号而初始化不成功
000118  480c              LDR      r0,|L11.332|
00011a  7800              LDRB     r0,[r0,#0]  ; PIDBegin_CAN
00011c  b158              CBZ      r0,|L11.310|
00011e  480e              LDR      r0,|L11.344|
000120  7800              LDRB     r0,[r0,#0]  ; bumark
000122  b940              CBNZ     r0,|L11.310|
;;;602    		{
;;;603    			Motor_Aguest(1024,1024,0,0);
000124  eddf0a12          VLDR     s1,|L11.368|
000128  ed9f0a11          VLDR     s0,|L11.368|
00012c  f44f6180          MOV      r1,#0x400
000130  4608              MOV      r0,r1
000132  f7fffffe          BL       Motor_Aguest
                  |L11.310|
;;;604    		}
;;;605    		os_itv_wait ();
000136  f8dfc044          LDR      r12,|L11.380|
00013a  df00              SVC      #0x0
                  |L11.316|
00013c  e767              B        |L11.14|
;;;606    	}
;;;607    }
;;;608    /**
                          ENDP

00013e  0000              DCW      0x0000
                  |L11.320|
                          DCD      rt_itv_set
                  |L11.324|
                          DCD      YawPID
                  |L11.328|
                          DCD      PIDBegin_DR16
                  |L11.332|
                          DCD      PIDBegin_CAN
                  |L11.336|
                          DCD      CAN1_Ultrasonic
                  |L11.340|
                          DCD      CAN1_Angle
                  |L11.344|
                          DCD      bumark
                  |L11.348|
                          DCD      STILL_BUTTON
                  |L11.352|
                          DCD      runstart_flag
                  |L11.356|
                          DCD      hurt_id
                  |L11.360|
                          DCD      hurt_origin
                  |L11.364|
                          DCD      auto_attack_flag
                  |L11.368|
000170  00000000          DCFS     0x00000000 ; 0
                  |L11.372|
                          DCD      speed
                  |L11.376|
000178  42c80000          DCFS     0x42c80000 ; 100
                  |L11.380|
                          DCD      rt_itv_wait

                          AREA ||i._Z15DisconnectCheckv||, CODE, READONLY, ALIGN=2

                  _Z15DisconnectCheckv PROC ; DisconnectCheck()
;;;165            ExtiFlag=1,Refree_Message=0,CAN1_Ultrasonic=0,Can2_NewBoard=0;
;;;166    __task void DisconnectCheck(void)
000000  e087              B        |L12.274|
                  |L12.2|
;;;167    {
;;;168    
;;;169    	while(1)
;;;170    	{
;;;171    		if (os_evt_wait_or (BIT_0, 50) == OS_R_TMO)
000002  2200              MOVS     r2,#0
000004  2132              MOVS     r1,#0x32
000006  2001              MOVS     r0,#1
000008  f8dfc108          LDR      r12,|L12.276|
00000c  df00              SVC      #0x0
00000e  2801              CMP      r0,#1
000010  d108              BNE      |L12.36|
;;;172    		{
;;;173    			PIDBegin_DR16 = 0;//若等待超时设置标志量为0
000012  2000              MOVS     r0,#0
000014  4940              LDR      r1,|L12.280|
000016  7008              STRB     r0,[r1,#0]
;;;174    			ESC_STOP();
000018  f7fffffe          BL       ESC_STOP
;;;175    //			os_evt_set (BIT_6, HandleDisconnectCheck);//断线保护
;;;176    			u1_printf("PIDBegin_DR16 = 0\r\n");
00001c  a03f              ADR      r0,|L12.284|
00001e  f7fffffe          BL       u1_printf
000022  e002              B        |L12.42|
                  |L12.36|
;;;177    		}
;;;178    		else PIDBegin_DR16 = 1;
000024  2001              MOVS     r0,#1
000026  493c              LDR      r1,|L12.280|
000028  7008              STRB     r0,[r1,#0]
                  |L12.42|
;;;179    		
;;;180        if (os_evt_wait_or (BIT_1, 50) == OS_R_TMO) {}
00002a  2200              MOVS     r2,#0
00002c  2132              MOVS     r1,#0x32
00002e  2002              MOVS     r0,#2
000030  f8dfc0e0          LDR      r12,|L12.276|
000034  df00              SVC      #0x0
000036  2801              CMP      r0,#1
000038  d002              BEQ      |L12.64|
;;;181    		else PIDBegin_CAN = 1;
00003a  2001              MOVS     r0,#1
00003c  493c              LDR      r1,|L12.304|
00003e  7008              STRB     r0,[r1,#0]
                  |L12.64|
;;;182    			
;;;183    		if (os_evt_wait_or (BIT_2, 50) == OS_R_TMO)
000040  2200              MOVS     r2,#0
000042  2132              MOVS     r1,#0x32
000044  2004              MOVS     r0,#4
000046  f8dfc0cc          LDR      r12,|L12.276|
00004a  df00              SVC      #0x0
00004c  2801              CMP      r0,#1
00004e  d106              BNE      |L12.94|
;;;184    		{
;;;185    			CAN1_Angle = 0;//若等待超时设置标志量为0
000050  2000              MOVS     r0,#0
000052  4938              LDR      r1,|L12.308|
000054  7008              STRB     r0,[r1,#0]
;;;186    			u1_printf("CAN1_Angle = 0\r\n");
000056  a038              ADR      r0,|L12.312|
000058  f7fffffe          BL       u1_printf
00005c  e002              B        |L12.100|
                  |L12.94|
;;;187    		}
;;;188    		else CAN1_Angle = 1;
00005e  2001              MOVS     r0,#1
000060  4934              LDR      r1,|L12.308|
000062  7008              STRB     r0,[r1,#0]
                  |L12.100|
;;;189    
;;;190    		if (os_evt_wait_or (BIT_3, 50) == OS_R_TMO)
000064  2200              MOVS     r2,#0
000066  2132              MOVS     r1,#0x32
000068  2008              MOVS     r0,#8
00006a  f8dfc0a8          LDR      r12,|L12.276|
00006e  df00              SVC      #0x0
000070  2801              CMP      r0,#1
000072  d106              BNE      |L12.130|
;;;191    		{
;;;192    			CAN2_PitchMotor = 0;//若等待超时设置标志量为0
000074  2000              MOVS     r0,#0
000076  4935              LDR      r1,|L12.332|
000078  7008              STRB     r0,[r1,#0]
;;;193    			u1_printf("CAN2_PitchMotor = 0\r\n");
00007a  a035              ADR      r0,|L12.336|
00007c  f7fffffe          BL       u1_printf
000080  e002              B        |L12.136|
                  |L12.130|
;;;194    		}
;;;195    		else CAN2_PitchMotor = 1;
000082  2001              MOVS     r0,#1
000084  4931              LDR      r1,|L12.332|
000086  7008              STRB     r0,[r1,#0]
                  |L12.136|
;;;196    		if (os_evt_wait_or (BIT_4, 50) == OS_R_TMO)
000088  2200              MOVS     r2,#0
00008a  2132              MOVS     r1,#0x32
00008c  2010              MOVS     r0,#0x10
00008e  f8dfc084          LDR      r12,|L12.276|
000092  df00              SVC      #0x0
000094  2801              CMP      r0,#1
000096  d106              BNE      |L12.166|
;;;197    		{
;;;198    			CAN2_YawMotor = 0;//若等待超时设置标志量为0
000098  2000              MOVS     r0,#0
00009a  4933              LDR      r1,|L12.360|
00009c  7008              STRB     r0,[r1,#0]
;;;199    			u1_printf("CAN2_YawMotor = 0\r\n");
00009e  a033              ADR      r0,|L12.364|
0000a0  f7fffffe          BL       u1_printf
0000a4  e002              B        |L12.172|
                  |L12.166|
;;;200    
;;;201    		}
;;;202    		else CAN2_YawMotor = 1;
0000a6  2001              MOVS     r0,#1
0000a8  492f              LDR      r1,|L12.360|
0000aa  7008              STRB     r0,[r1,#0]
                  |L12.172|
;;;203    		
;;;204    		if (os_evt_wait_or (BIT_5, 50) == OS_R_TMO)
0000ac  2200              MOVS     r2,#0
0000ae  2132              MOVS     r1,#0x32
0000b0  2020              MOVS     r0,#0x20
0000b2  f8dfc060          LDR      r12,|L12.276|
0000b6  df00              SVC      #0x0
0000b8  2801              CMP      r0,#1
0000ba  d106              BNE      |L12.202|
;;;205    		{
;;;206    			Refree_Message = 0;//若等待超时设置标志量为0
0000bc  2000              MOVS     r0,#0
0000be  4930              LDR      r1,|L12.384|
0000c0  7008              STRB     r0,[r1,#0]
;;;207    //			Motor_Power(0x000f,(u16)((83.2 - 2.5)/GameInfo.realChassisOutV*248.2));
;;;208    			u1_printf("Refree_Message = 0\r\n");
0000c2  a030              ADR      r0,|L12.388|
0000c4  f7fffffe          BL       u1_printf
0000c8  e002              B        |L12.208|
                  |L12.202|
;;;209    
;;;210    		}
;;;211    		else Refree_Message = 1;
0000ca  2001              MOVS     r0,#1
0000cc  492c              LDR      r1,|L12.384|
0000ce  7008              STRB     r0,[r1,#0]
                  |L12.208|
;;;212    		
;;;213    	  if (os_evt_wait_or (BIT_6, 50) == OS_R_TMO)
0000d0  2200              MOVS     r2,#0
0000d2  2132              MOVS     r1,#0x32
0000d4  2040              MOVS     r0,#0x40
0000d6  f8dfc03c          LDR      r12,|L12.276|
0000da  df00              SVC      #0x0
0000dc  2801              CMP      r0,#1
0000de  d106              BNE      |L12.238|
;;;214    		{
;;;215    			CAN1_Ultrasonic = 0;//若等待超时设置标志量为0
0000e0  2000              MOVS     r0,#0
0000e2  492e              LDR      r1,|L12.412|
0000e4  7008              STRB     r0,[r1,#0]
;;;216    //			Motor_Power(0x000f,(u16)((83.2 - 2.5)/GameInfo.realChassisOutV*248.2));
;;;217    			u1_printf("CAN1_Ultrasonic = 0\r\n");
0000e6  a02e              ADR      r0,|L12.416|
0000e8  f7fffffe          BL       u1_printf
0000ec  e002              B        |L12.244|
                  |L12.238|
;;;218    
;;;219    		}
;;;220    		else CAN1_Ultrasonic = 1;
0000ee  2001              MOVS     r0,#1
0000f0  492a              LDR      r1,|L12.412|
0000f2  7008              STRB     r0,[r1,#0]
                  |L12.244|
;;;221    		
;;;222    		if (os_evt_wait_or (BIT_7, 50) == OS_R_TMO)
0000f4  2200              MOVS     r2,#0
0000f6  2132              MOVS     r1,#0x32
0000f8  2080              MOVS     r0,#0x80
0000fa  f8dfc018          LDR      r12,|L12.276|
0000fe  df00              SVC      #0x0
000100  2801              CMP      r0,#1
000102  d103              BNE      |L12.268|
;;;223    		{
;;;224    			Can2_NewBoard = 0;//若等待超时设置标志量为0
000104  2000              MOVS     r0,#0
000106  492c              LDR      r1,|L12.440|
000108  7008              STRB     r0,[r1,#0]
00010a  e002              B        |L12.274|
                  |L12.268|
;;;225    //			Motor_Power(0x000f,(u16)((83.2 - 2.5)/GameInfo.realChassisOutV*248.2));
;;;226    //			u1_printf("Can2_NewBoard = 0\r\n");
;;;227    
;;;228    		}
;;;229    		else Can2_NewBoard = 1;
00010c  2001              MOVS     r0,#1
00010e  492a              LDR      r1,|L12.440|
000110  7008              STRB     r0,[r1,#0]
                  |L12.274|
000112  e776              B        |L12.2|
;;;230    		
;;;231    		
;;;232    
;;;233    	}
;;;234    }
;;;235    
                          ENDP

                  |L12.276|
                          DCD      rt_evt_wait
                  |L12.280|
                          DCD      PIDBegin_DR16
                  |L12.284|
00011c  50494442          DCB      "PIDBegin_DR16 = 0\r\n",0
000120  6567696e
000124  5f445231
000128  36203d20
00012c  300d0a00
                  |L12.304|
                          DCD      PIDBegin_CAN
                  |L12.308|
                          DCD      CAN1_Angle
                  |L12.312|
000138  43414e31          DCB      "CAN1_Angle = 0\r\n",0
00013c  5f416e67
000140  6c65203d
000144  20300d0a
000148  00      
000149  00                DCB      0
00014a  00                DCB      0
00014b  00                DCB      0
                  |L12.332|
                          DCD      CAN2_PitchMotor
                  |L12.336|
000150  43414e32          DCB      "CAN2_PitchMotor = 0\r\n",0
000154  5f506974
000158  63684d6f
00015c  746f7220
000160  3d20300d
000164  0a00    
000166  00                DCB      0
000167  00                DCB      0
                  |L12.360|
                          DCD      CAN2_YawMotor
                  |L12.364|
00016c  43414e32          DCB      "CAN2_YawMotor = 0\r\n",0
000170  5f596177
000174  4d6f746f
000178  72203d20
00017c  300d0a00
                  |L12.384|
                          DCD      Refree_Message
                  |L12.388|
000184  52656672          DCB      "Refree_Message = 0\r\n",0
000188  65655f4d
00018c  65737361
000190  6765203d
000194  20300d0a
000198  00      
000199  00                DCB      0
00019a  00                DCB      0
00019b  00                DCB      0
                  |L12.412|
                          DCD      CAN1_Ultrasonic
                  |L12.416|
0001a0  43414e31          DCB      "CAN1_Ultrasonic = 0\r\n",0
0001a4  5f556c74
0001a8  7261736f
0001ac  6e696320
0001b0  3d20300d
0001b4  0a00    
0001b6  00                DCB      0
0001b7  00                DCB      0
                  |L12.440|
                          DCD      Can2_NewBoard

                          AREA ||i._Z15PitchYaw_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z15PitchYaw_Aguestv PROC ; PitchYaw_Aguest()
;;;529     */
;;;530    __task void PitchYaw_Aguest(void)
000000  b51c              PUSH     {r2-r4,lr}
;;;531    {
;;;532    	TIM1_timer(200,(void *)pitchyaw);
000002  4921              LDR      r1,|L13.136|
000004  20c8              MOVS     r0,#0xc8
000006  f7fffffe          BL       TIM1_timer
;;;533    	os_itv_set(1);
00000a  2001              MOVS     r0,#1
00000c  f8dfc07c          LDR      r12,|L13.140|
000010  df00              SVC      #0x0
;;;534    	while(1)
000012  e038              B        |L13.134|
                  |L13.20|
;;;535    	{
;;;536    		{
;;;537    //			short gx;
;;;538    			u8 buf[6],res;
;;;539    			res=MPU_Read_Len(MPU_ADDR,MPU_GYRO_XOUTH_REG,6,buf);
000014  466b              MOV      r3,sp
000016  2206              MOVS     r2,#6
000018  2143              MOVS     r1,#0x43
00001a  2068              MOVS     r0,#0x68
00001c  f7fffffe          BL       MPU_Read_Len
000020  4604              MOV      r4,r0
;;;540    			if(res==0)
000022  bb3c              CBNZ     r4,|L13.116|
;;;541    			{
;;;542    //				PitchPID.SetOmega((float)Middle_filter(filter_buf[0],&index[0],5,(short)(((u16)buf[0]<<8)|buf[1])),1);
;;;543    //				YawPID.SetOmega((float)Middle_filter(filter_buf[1],&index[1],5,(short)(((u16)buf[4]<<8)|buf[5])),0);
;;;544    				PitchPID.SetOmega((float)(short)(((u16)buf[2]<<8)|buf[3]),1);
000024  f89d0003          LDRB     r0,[sp,#3]
000028  f89d1002          LDRB     r1,[sp,#2]
00002c  ea402001          ORR      r0,r0,r1,LSL #8
000030  b200              SXTH     r0,r0
000032  ee000a90          VMOV     s1,r0
000036  eef80ae0          VCVT.F32.S32 s1,s1
00003a  eeb00a60          VMOV.F32 s0,s1
00003e  2101              MOVS     r1,#1
000040  4813              LDR      r0,|L13.144|
000042  f7fffffe          BL       _ZN8FUZZYPID8SetOmegaEfh ; FUZZYPID::SetOmega(float, unsigned char)
;;;545    				YawPID.SetOmega( (float)(short)(((u16)buf[4]<<8)|buf[5]),0);
000046  f89d0005          LDRB     r0,[sp,#5]
00004a  f89d1004          LDRB     r1,[sp,#4]
00004e  ea402001          ORR      r0,r0,r1,LSL #8
000052  b200              SXTH     r0,r0
000054  ee000a90          VMOV     s1,r0
000058  eef80ae0          VCVT.F32.S32 s1,s1
00005c  eeb00a60          VMOV.F32 s0,s1
000060  2100              MOVS     r1,#0
000062  480c              LDR      r0,|L13.148|
000064  f7fffffe          BL       _ZN8FUZZYPID8SetOmegaEfh ; FUZZYPID::SetOmega(float, unsigned char)
;;;546    				AngleCorrect.w1 = YawPID.Omega;
000068  480a              LDR      r0,|L13.148|
00006a  ed900a19          VLDR     s0,[r0,#0x64]
00006e  480a              LDR      r0,|L13.152|
000070  ed800a00          VSTR     s0,[r0,#0]
                  |L13.116|
;;;547    //				PitchPID.Omega =-(float)(short)(((u16)buf[0]<<8)|buf[1]);
;;;548    //				YawPID.Omega =(float)(short)(((u16)buf[4]<<8)|buf[5]);
;;;549    //				u1_printf("%d\r\n",gx);
;;;550    			}
;;;551    			CVPID.AdjustPID();
000074  4809              LDR      r0,|L13.156|
000076  f7fffffe          BL       _ZN8FUZZYPID9AdjustPIDEv ; FUZZYPID::AdjustPID()
;;;552    			CVPitchPID.AdjustPID();
00007a  4809              LDR      r0,|L13.160|
00007c  f7fffffe          BL       _ZN8FUZZYPID9AdjustPIDEv ; FUZZYPID::AdjustPID()
;;;553    
;;;554    		}
;;;555    		os_itv_wait ();
000080  f8dfc020          LDR      r12,|L13.164|
000084  df00              SVC      #0x0
                  |L13.134|
000086  e7c5              B        |L13.20|
;;;556    
;;;557    	}
;;;558    }
;;;559    
                          ENDP

                  |L13.136|
                          DCD      _Z8pitchyawv ; pitchyaw()
                  |L13.140|
                          DCD      rt_itv_set
                  |L13.144|
                          DCD      PitchPID
                  |L13.148|
                          DCD      YawPID
                  |L13.152|
                          DCD      AngleCorrect
                  |L13.156|
                          DCD      CVPID
                  |L13.160|
                          DCD      CVPitchPID
                  |L13.164|
                          DCD      rt_itv_wait

                          AREA ||i._Z16Turnplate_Aguestv||, CODE, READONLY, ALIGN=2

                  _Z16Turnplate_Aguestv PROC ; Turnplate_Aguest()
;;;676    extern EncoderStuct EncoderData;
;;;677    __task void Turnplate_Aguest(void)
000000  ed2d8b02          VPUSH    {d8}
;;;678    {
000004  b084              SUB      sp,sp,#0x10
;;;679    //	uint16_t *temp;
;;;680    	int last_position;
;;;681    	uint16_t cnt,cnt1;
;;;682    	os_itv_set(4);	/* 设置延迟周期 */
000006  2004              MOVS     r0,#4
000008  f8dfc1bc          LDR      r12,|L14.456|
00000c  df00              SVC      #0x0
;;;683    	Encoder_Start();//拨盘电机码盘值初始化
00000e  f7fffffe          BL       Encoder_Start
;;;684    	Turnplate_motor_PWM = 0;
000012  2000              MOVS     r0,#0
000014  496d              LDR      r1,|L14.460|
000016  6008              STR      r0,[r1,#0]
;;;685    	while(1)
000018  e0d5              B        |L14.454|
                  |L14.26|
;;;686    	{
;;;687    //		Turnplate_motor_PWM = 1000;
;;;688    		last_position = TurnplatePID.Current;
00001a  486d              LDR      r0,|L14.464|
00001c  ed900a02          VLDR     s0,[r0,#8]
000020  eebd8ac0          VCVT.S32.F32 s16,s0
;;;689    		TurnplatePID.SetCurrent(Encoder_Get_CNT().Position);
000024  4668              MOV      r0,sp
000026  f7fffffe          BL       Encoder_Get_CNT
00002a  e9dd0100          LDRD     r0,r1,[sp,#0]
00002e  e9cd0102          STRD     r0,r1,[sp,#8]
000032  ed9d0a03          VLDR     s0,[sp,#0xc]
000036  eeb80ac0          VCVT.F32.S32 s0,s0
00003a  eef08a40          VMOV.F32 s17,s0
00003e  4864              LDR      r0,|L14.464|
000040  f7fffffe          BL       _ZN7PIDBase10SetCurrentEf ; PIDBase::SetCurrent(float)
;;;690    		TurnplatePID.AdjustPID();//拨盘电机PID解算
000044  4862              LDR      r0,|L14.464|
000046  f7fffffe          BL       _ZN9FUZZYSPID9AdjustPIDEv ; FUZZYSPID::AdjustPID()
;;;691    //		if(TurnplatePID.Out<0)
;;;692    //		{
;;;693    //			Turnplate_motor_PWM = 0;
;;;694    ////			TurnplatePID.ITerm = 0;
;;;695    //		}
;;;696    //		else
;;;697    //			Turnplate_motor_PWM = TurnplatePID.Out;
;;;698    
;;;699    		Turnplate_motor(-TurnplatePID.Out);
00004a  4961              LDR      r1,|L14.464|
00004c  ed910a03          VLDR     s0,[r1,#0xc]
000050  eeb10a40          VNEG.F32 s0,s0
000054  eebd0ac0          VCVT.S32.F32 s0,s0
000058  ee100a10          VMOV     r0,s0
00005c  f7fffffe          BL       Turnplate_motor
;;;700    
;;;701    //位置滑窗
;;;702    //=======================================================================================================================
;;;703    		if(myabs(TurnplatePID.Current - last_position) < 10 && (TurnplatePID.Target - TurnplatePID.Current) > 1)
000060  485b              LDR      r0,|L14.464|
000062  ed900a02          VLDR     s0,[r0,#8]
000066  eef80ac8          VCVT.F32.S32 s1,s16
00006a  ee300a60          VSUB.F32 s0,s0,s1
00006e  eeb50ac0          VCMPE.F32 s0,#0.0
000072  eef1fa10          VMRS     APSR_nzcv,FPSCR
000076  dd06              BLE      |L14.134|
000078  ed900a02          VLDR     s0,[r0,#8]
00007c  eef80ac8          VCVT.F32.S32 s1,s16
000080  ee300a60          VSUB.F32 s0,s0,s1
000084  e008              B        |L14.152|
                  |L14.134|
000086  4852              LDR      r0,|L14.464|
000088  ed900a02          VLDR     s0,[r0,#8]
00008c  eef80ac8          VCVT.F32.S32 s1,s16
000090  ee300a60          VSUB.F32 s0,s0,s1
000094  eeb10a40          VNEG.F32 s0,s0
                  |L14.152|
000098  eef20a04          VMOV.F32 s1,#10.00000000
00009c  eeb40ae0          VCMPE.F32 s0,s1
0000a0  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000a4  d213              BCS      |L14.206|
0000a6  484a              LDR      r0,|L14.464|
0000a8  ed900a01          VLDR     s0,[r0,#4]
0000ac  edd00a02          VLDR     s1,[r0,#8]
0000b0  ee300a60          VSUB.F32 s0,s0,s1
0000b4  eef70a00          VMOV.F32 s1,#1.00000000
0000b8  eeb40ae0          VCMPE.F32 s0,s1
0000bc  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000c0  dd05              BLE      |L14.206|
;;;704    		{
;;;705    			cnt1++;
0000c2  1c68              ADDS     r0,r5,#1
0000c4  b285              UXTH     r5,r0
;;;706    			if(cnt1 >= 125)
0000c6  2d7d              CMP      r5,#0x7d
0000c8  db02              BLT      |L14.208|
;;;707    			{
;;;708    				cnt1 = 125;
0000ca  257d              MOVS     r5,#0x7d
0000cc  e000              B        |L14.208|
                  |L14.206|
;;;709    			}
;;;710    		}
;;;711    		else
;;;712    		{
;;;713    			cnt1 = 0;
0000ce  2500              MOVS     r5,#0
                  |L14.208|
;;;714    		}
;;;715    		if(cnt1 >= 125)
0000d0  2d7d              CMP      r5,#0x7d
0000d2  db08              BLT      |L14.230|
;;;716    		{
;;;717    				TurnplatePID.Target-=300;
0000d4  483e              LDR      r0,|L14.464|
0000d6  ed900a01          VLDR     s0,[r0,#4]
0000da  eddf0a3e          VLDR     s1,|L14.468|
0000de  ee300a60          VSUB.F32 s0,s0,s1
0000e2  ed800a01          VSTR     s0,[r0,#4]
                  |L14.230|
;;;718    		}
;;;719    		
;;;720    		if(myabs(TurnplatePID.Current - last_position) < 10 && (TurnplatePID.Target - TurnplatePID.Current) < -1)
0000e6  483a              LDR      r0,|L14.464|
0000e8  ed900a02          VLDR     s0,[r0,#8]
0000ec  eef80ac8          VCVT.F32.S32 s1,s16
0000f0  ee300a60          VSUB.F32 s0,s0,s1
0000f4  eeb50ac0          VCMPE.F32 s0,#0.0
0000f8  eef1fa10          VMRS     APSR_nzcv,FPSCR
0000fc  dd06              BLE      |L14.268|
0000fe  ed900a02          VLDR     s0,[r0,#8]
000102  eef80ac8          VCVT.F32.S32 s1,s16
000106  ee300a60          VSUB.F32 s0,s0,s1
00010a  e008              B        |L14.286|
                  |L14.268|
00010c  4830              LDR      r0,|L14.464|
00010e  ed900a02          VLDR     s0,[r0,#8]
000112  eef80ac8          VCVT.F32.S32 s1,s16
000116  ee300a60          VSUB.F32 s0,s0,s1
00011a  eeb10a40          VNEG.F32 s0,s0
                  |L14.286|
00011e  eef20a04          VMOV.F32 s1,#10.00000000
000122  eeb40ae0          VCMPE.F32 s0,s1
000126  eef1fa10          VMRS     APSR_nzcv,FPSCR
00012a  d213              BCS      |L14.340|
00012c  4828              LDR      r0,|L14.464|
00012e  ed900a01          VLDR     s0,[r0,#4]
000132  edd00a02          VLDR     s1,[r0,#8]
000136  ee300a60          VSUB.F32 s0,s0,s1
00013a  eeff0a00          VMOV.F32 s1,#-1.00000000
00013e  eeb40ae0          VCMPE.F32 s0,s1
000142  eef1fa10          VMRS     APSR_nzcv,FPSCR
000146  d205              BCS      |L14.340|
;;;721    		{
;;;722    			cnt++;
000148  1c60              ADDS     r0,r4,#1
00014a  b284              UXTH     r4,r0
;;;723    			if(cnt >= 125)
00014c  2c7d              CMP      r4,#0x7d
00014e  db02              BLT      |L14.342|
;;;724    			{
;;;725    				cnt = 125;
000150  247d              MOVS     r4,#0x7d
000152  e000              B        |L14.342|
                  |L14.340|
;;;726    			}
;;;727    		}
;;;728    		else
;;;729    		{
;;;730    			cnt = 0;
000154  2400              MOVS     r4,#0
                  |L14.342|
;;;731    		}
;;;732    		if(cnt >= 125)
000156  2c7d              CMP      r4,#0x7d
000158  db08              BLT      |L14.364|
;;;733    		{
;;;734    				TurnplatePID.Target+=100;
00015a  481d              LDR      r0,|L14.464|
00015c  ed900a01          VLDR     s0,[r0,#4]
000160  eddf0a1d          VLDR     s1,|L14.472|
000164  ee300a20          VADD.F32 s0,s0,s1
000168  ed800a01          VSTR     s0,[r0,#4]
                  |L14.364|
;;;735    		}
;;;736    //				if(myabs(TurnplatePID.Current - last_position) < 10 && myabs(TurnplatePID.Current - TurnplatePID.Target) > 2)
;;;737    //		{
;;;738    //			cnt++;
;;;739    //			if(cnt >= 125)
;;;740    //			{
;;;741    //				cnt = 125;
;;;742    //			}
;;;743    //		}
;;;744    //		else
;;;745    //		{
;;;746    //			cnt = 0;
;;;747    //		}
;;;748    //		if(cnt >= 125)
;;;749    //		{
;;;750    //			//EncoderData.Position = TurnplatePID.Target;
;;;751    //			if(TurnplatePID.Target >= TurnplatePID.Current)
;;;752    //				TurnplatePID.Target-=300;
;;;753    //			else if(TurnplatePID.Target < TurnplatePID.Current)
;;;754    //				TurnplatePID.Target+=300;
;;;755    //		}
;;;756    //=======================================================================================================================
;;;757    		if(timer200msflag == 1)
00016c  481b              LDR      r0,|L14.476|
00016e  7800              LDRB     r0,[r0,#0]  ; timer200msflag
000170  2801              CMP      r0,#1
000172  d125              BNE      |L14.448|
;;;758    		{
;;;759    			if(myabs(TurnplatePID.Current - TurnplatePID.Target) < 100)
000174  4816              LDR      r0,|L14.464|
000176  ed900a02          VLDR     s0,[r0,#8]
00017a  edd00a01          VLDR     s1,[r0,#4]
00017e  ee300a60          VSUB.F32 s0,s0,s1
000182  eeb50ac0          VCMPE.F32 s0,#0.0
000186  eef1fa10          VMRS     APSR_nzcv,FPSCR
00018a  dd06              BLE      |L14.410|
00018c  ed900a02          VLDR     s0,[r0,#8]
000190  edd00a01          VLDR     s1,[r0,#4]
000194  ee300a60          VSUB.F32 s0,s0,s1
000198  e008              B        |L14.428|
                  |L14.410|
00019a  480d              LDR      r0,|L14.464|
00019c  ed900a02          VLDR     s0,[r0,#8]
0001a0  edd00a01          VLDR     s1,[r0,#4]
0001a4  ee300a60          VSUB.F32 s0,s0,s1
0001a8  eeb10a40          VNEG.F32 s0,s0
                  |L14.428|
0001ac  eddf0a0a          VLDR     s1,|L14.472|
0001b0  eeb40ae0          VCMPE.F32 s0,s1
0001b4  eef1fa10          VMRS     APSR_nzcv,FPSCR
0001b8  d202              BCS      |L14.448|
;;;760    				positionreachflag = 1;
0001ba  2001              MOVS     r0,#1
0001bc  4908              LDR      r1,|L14.480|
0001be  7008              STRB     r0,[r1,#0]
                  |L14.448|
;;;761    		}
;;;762    //		u1_printf("%d\r\n",cnt);
;;;763    //		Turnplate_motor(1000);
;;;764    		os_itv_wait ();
0001c0  f8dfc020          LDR      r12,|L14.484|
0001c4  df00              SVC      #0x0
                  |L14.454|
0001c6  e728              B        |L14.26|
;;;765    //		delay_ms(4);
;;;766    	}
;;;767    
;;;768    }
;;;769    
                          ENDP

                  |L14.456|
                          DCD      rt_itv_set
                  |L14.460|
                          DCD      0x40000440
                  |L14.464|
                          DCD      TurnplatePID
                  |L14.468|
0001d4  43960000          DCFS     0x43960000 ; 300
                  |L14.472|
0001d8  42c80000          DCFS     0x42c80000 ; 100
                  |L14.476|
                          DCD      timer200msflag
                  |L14.480|
                          DCD      positionreachflag
                  |L14.484|
                          DCD      rt_itv_wait

                          AREA ||i._Z3ttpv||, CODE, READONLY, ALIGN=2

                  _Z3ttpv PROC ; ttp()
;;;238     */
;;;239    void ttp(void)
000000  b510              PUSH     {r4,lr}
;;;240    {
;;;241    	Location(&MotorMassage);
000002  4802              LDR      r0,|L15.12|
000004  f7fffffe          BL       Location
;;;242    }
000008  bd10              POP      {r4,pc}
;;;243    
                          ENDP

00000a  0000              DCW      0x0000
                  |L15.12|
                          DCD      MotorMassage

                          AREA ||i._Z8EXTITaskv||, CODE, READONLY, ALIGN=2

                  _Z8EXTITaskv PROC ; EXTITask()
;;;244    extern float YAW_Angle_Zero;
;;;245    __task void EXTITask(void)
000000  e011              B        |L16.38|
                  |L16.2|
;;;246    {
;;;247    	while(1)
;;;248    	{
;;;249    		delay_ms(50);
000002  2032              MOVS     r0,#0x32
000004  f8dfc020          LDR      r12,|L16.40|
000008  df00              SVC      #0x0
;;;250    		if(Refree_Message==0)Motor_Power(0x000f,(u16)((83.2 - 2.5)/24*248.2));
00000a  4808              LDR      r0,|L16.44|
00000c  7800              LDRB     r0,[r0,#0]  ; Refree_Message
00000e  b920              CBNZ     r0,|L16.26|
000010  f2403142          MOV      r1,#0x342
000014  200f              MOVS     r0,#0xf
000016  f7fffffe          BL       Motor_Power
                  |L16.26|
;;;251    		if(!OVERPOWER_BUTTON )Send_OverPowerFlag(0x01);
00001a  4805              LDR      r0,|L16.48|
00001c  7800              LDRB     r0,[r0,#0]  ; OVERPOWER_BUTTON
00001e  b910              CBNZ     r0,|L16.38|
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       Send_OverPowerFlag
                  |L16.38|
000026  e7ec              B        |L16.2|
;;;252    	}
;;;253    		
;;;254    }
;;;255    
                          ENDP

                  |L16.40|
                          DCD      rt_dly_wait
                  |L16.44|
                          DCD      Refree_Message
                  |L16.48|
                          DCD      OVERPOWER_BUTTON

                          AREA ||i._Z8pitchyawv||, CODE, READONLY, ALIGN=2

                  _Z8pitchyawv PROC ; pitchyaw()
;;;503    
;;;504    void pitchyaw(void)
000000  b510              PUSH     {r4,lr}
;;;505    {
;;;506    	if(PIDBegin_CAN &&  CAN2_YawMotor && CAN2_PitchMotor && CAN1_Ultrasonic && CAN1_Angle && !GetParaFlag() && !STILL_BUTTON)
000002  4823              LDR      r0,|L17.144|
000004  7800              LDRB     r0,[r0,#0]  ; PIDBegin_CAN
000006  b388              CBZ      r0,|L17.108|
000008  4822              LDR      r0,|L17.148|
00000a  7800              LDRB     r0,[r0,#0]  ; CAN2_YawMotor
00000c  b370              CBZ      r0,|L17.108|
00000e  4822              LDR      r0,|L17.152|
000010  7800              LDRB     r0,[r0,#0]  ; CAN2_PitchMotor
000012  b358              CBZ      r0,|L17.108|
000014  4821              LDR      r0,|L17.156|
000016  7800              LDRB     r0,[r0,#0]  ; CAN1_Ultrasonic
000018  b340              CBZ      r0,|L17.108|
00001a  4821              LDR      r0,|L17.160|
00001c  7800              LDRB     r0,[r0,#0]  ; CAN1_Angle
00001e  b328              CBZ      r0,|L17.108|
000020  f7fffffe          BL       GetParaFlag
000024  bb10              CBNZ     r0,|L17.108|
000026  481f              LDR      r0,|L17.164|
000028  7800              LDRB     r0,[r0,#0]  ; STILL_BUTTON
00002a  b9f8              CBNZ     r0,|L17.108|
;;;507    	{
;;;508    		PitchPID.AdjustPID();//Pitch电机PID解算
00002c  481e              LDR      r0,|L17.168|
00002e  f7fffffe          BL       _ZN8FUZZYPID9AdjustPIDEv ; FUZZYPID::AdjustPID()
;;;509    		YawPID.AdjustPID();//Yaw电机PID解算
000032  481e              LDR      r0,|L17.172|
000034  f7fffffe          BL       _ZN8FUZZYPID9AdjustPIDEv ; FUZZYPID::AdjustPID()
;;;510    		if(PIDBegin_DR16)
000038  481d              LDR      r0,|L17.176|
00003a  7800              LDRB     r0,[r0,#0]  ; PIDBegin_DR16
00003c  b1b8              CBZ      r0,|L17.110|
;;;511    		{
;;;512    			Motor_YawPitch(-YawPID.Out,-(PitchPID.Out));//输出Pitch和Yaw的电机控制量
00003e  4a1a              LDR      r2,|L17.168|
000040  ed920a03          VLDR     s0,[r2,#0xc]
000044  eeb10a40          VNEG.F32 s0,s0
000048  eebd0ac0          VCVT.S32.F32 s0,s0
00004c  ee102a10          VMOV     r2,s0
000050  b211              SXTH     r1,r2
000052  4a16              LDR      r2,|L17.172|
000054  ed920a03          VLDR     s0,[r2,#0xc]
000058  eeb10a40          VNEG.F32 s0,s0
00005c  eebd0ac0          VCVT.S32.F32 s0,s0
000060  ee102a10          VMOV     r2,s0
000064  b210              SXTH     r0,r2
000066  f7fffffe          BL       Motor_YawPitch
00006a  e00c              B        |L17.134|
                  |L17.108|
00006c  e004              B        |L17.120|
                  |L17.110|
;;;513    		}
;;;514    		else
;;;515    		{
;;;516    		  Motor_YawPitch(0,0);
00006e  2100              MOVS     r1,#0
000070  4608              MOV      r0,r1
000072  f7fffffe          BL       Motor_YawPitch
000076  e006              B        |L17.134|
                  |L17.120|
;;;517    		}
;;;518    	}
;;;519    	else if(PIDBegin_CAN)//PIDBegin_CAN=1时才能Stop,不然买的RMDS-103驱动器会因为发送停止信号而初始化不成功
000078  4805              LDR      r0,|L17.144|
00007a  7800              LDRB     r0,[r0,#0]  ; PIDBegin_CAN
00007c  b118              CBZ      r0,|L17.134|
;;;520    	{
;;;521    		Motor_YawPitch(0,0);
00007e  2100              MOVS     r1,#0
000080  4608              MOV      r0,r1
000082  f7fffffe          BL       Motor_YawPitch
                  |L17.134|
;;;522    	}
;;;523    	bsp_LedToggle(1);
000086  2001              MOVS     r0,#1
000088  f7fffffe          BL       bsp_LedToggle
;;;524    }
00008c  bd10              POP      {r4,pc}
;;;525    
                          ENDP

00008e  0000              DCW      0x0000
                  |L17.144|
                          DCD      PIDBegin_CAN
                  |L17.148|
                          DCD      CAN2_YawMotor
                  |L17.152|
                          DCD      CAN2_PitchMotor
                  |L17.156|
                          DCD      CAN1_Ultrasonic
                  |L17.160|
                          DCD      CAN1_Angle
                  |L17.164|
                          DCD      STILL_BUTTON
                  |L17.168|
                          DCD      PitchPID
                  |L17.172|
                          DCD      YawPID
                  |L17.176|
                          DCD      PIDBegin_DR16

                          AREA ||i._Z9TaskStartv||, CODE, READONLY, ALIGN=2

                  _Z9TaskStartv PROC ; TaskStart()
;;;105     */
;;;106    __task void TaskStart(void)
000000  f7fffffe          BL       _Z13AppTaskCreatev ; AppTaskCreate()
;;;107    {
;;;108    	AppTaskCreate();/* 创建任务 */
;;;109    	AppObjCreate();/* 创建任务通信机制和有时序需要的初始化步骤 */
000004  f7fffffe          BL       _Z12AppObjCreatev ; AppObjCreate()
;;;110    	while(1)
000008  e005              B        |L18.22|
                  |L18.10|
;;;111    	{
;;;112    		CAN_FIFO_IRQ();		//用了FIFO来发送CAN数据，需要定时查询FIFO是否有数据要发
00000a  f7fffffe          BL       CAN_FIFO_IRQ
;;;113    //		bsp_LedToggle(1);	//指示系统工作的状态灯
;;;114    		os_dly_wait(1);
00000e  2001              MOVS     r0,#1
000010  f8dfc004          LDR      r12,|L18.24|
000014  df00              SVC      #0x0
                  |L18.22|
000016  e7f8              B        |L18.10|
;;;115    	}
;;;116    }
;;;117    
                          ENDP

                  |L18.24|
                          DCD      rt_dly_wait

                          AREA ||i.__sti___8_main_cpp_7d6d8351||, CODE, READONLY, ALIGN=2

                  __sti___8_main_cpp_7d6d8351 PROC
000000  b510              PUSH     {r4,lr}
000002  ed2d8b0e          VPUSH    {d8-d14}
000006  b08a              SUB      sp,sp,#0x28
000008  ed9f0a89          VLDR     s0,|L19.560|
00000c  ed8d0a08          VSTR     s0,[sp,#0x20]
000010  eeb00a04          VMOV.F32 s0,#2.50000000
000014  ed8d0a07          VSTR     s0,[sp,#0x1c]
000018  ed9f0a86          VLDR     s0,|L19.564|
00001c  ed8d0a06          VSTR     s0,[sp,#0x18]
000020  ed9f0a85          VLDR     s0,|L19.568|
000024  ed8d0a05          VSTR     s0,[sp,#0x14]
000028  ed9f0a84          VLDR     s0,|L19.572|
00002c  ed8d0a04          VSTR     s0,[sp,#0x10]
000030  ed9f0a82          VLDR     s0,|L19.572|
000034  ed8d0a03          VSTR     s0,[sp,#0xc]
000038  ed9f0a81          VLDR     s0,|L19.576|
00003c  ed8d0a02          VSTR     s0,[sp,#8]
000040  ed9f0a80          VLDR     s0,|L19.580|
000044  ed8d0a01          VSTR     s0,[sp,#4]
000048  ed9f0a7f          VLDR     s0,|L19.584|
00004c  ed8d0a00          VSTR     s0,[sp,#0]
000050  eddf7a7e          VLDR     s15,|L19.588|
000054  eeb37a04          VMOV.F32 s14,#20.00000000
000058  eddf6a7d          VLDR     s13,|L19.592|
00005c  ed9f6a7b          VLDR     s12,|L19.588|
000060  eddf5a7a          VLDR     s11,|L19.588|
000064  ed9f5a79          VLDR     s10,|L19.588|
000068  eddf4a7a          VLDR     s9,|L19.596|
00006c  ed9f4a7a          VLDR     s8,|L19.600|
000070  eddf3a78          VLDR     s7,|L19.596|
000074  ed9f3a78          VLDR     s6,|L19.600|
000078  eddf2a78          VLDR     s5,|L19.604|
00007c  ed9f2a78          VLDR     s4,|L19.608|
000080  eddf1a72          VLDR     s3,|L19.588|
000084  ed9f1a71          VLDR     s2,|L19.588|
000088  eddf0a70          VLDR     s1,|L19.588|
00008c  ed9f0a6f          VLDR     s0,|L19.588|
000090  4874              LDR      r0,|L19.612|
000092  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000096  ed9f0a74          VLDR     s0,|L19.616|
00009a  ed8d0a08          VSTR     s0,[sp,#0x20]
00009e  ed9f0a73          VLDR     s0,|L19.620|
0000a2  ed8d0a07          VSTR     s0,[sp,#0x1c]
0000a6  ed9f0a72          VLDR     s0,|L19.624|
0000aa  ed8d0a06          VSTR     s0,[sp,#0x18]
0000ae  ed9f0a67          VLDR     s0,|L19.588|
0000b2  ed8d0a05          VSTR     s0,[sp,#0x14]
0000b6  ed9f0a65          VLDR     s0,|L19.588|
0000ba  ed8d0a04          VSTR     s0,[sp,#0x10]
0000be  ed9f0a63          VLDR     s0,|L19.588|
0000c2  ed8d0a03          VSTR     s0,[sp,#0xc]
0000c6  ed9f0a6b          VLDR     s0,|L19.628|
0000ca  ed8d0a02          VSTR     s0,[sp,#8]
0000ce  ed9f0a6a          VLDR     s0,|L19.632|
0000d2  ed8d0a01          VSTR     s0,[sp,#4]
0000d6  ed9f0a69          VLDR     s0,|L19.636|
0000da  ed8d0a00          VSTR     s0,[sp,#0]
0000de  eddf7a5b          VLDR     s15,|L19.588|
0000e2  ed9f7a67          VLDR     s14,|L19.640|
0000e6  eddf6a67          VLDR     s13,|L19.644|
0000ea  ed9f6a58          VLDR     s12,|L19.588|
0000ee  eddf5a66          VLDR     s11,|L19.648|
0000f2  ed9f5a66          VLDR     s10,|L19.652|
0000f6  eddf4a66          VLDR     s9,|L19.656|
0000fa  ed9f4a66          VLDR     s8,|L19.660|
0000fe  eddf3a4f          VLDR     s7,|L19.572|
000102  ed9f3a65          VLDR     s6,|L19.664|
000106  eddf2a62          VLDR     s5,|L19.656|
00010a  ed9f2a62          VLDR     s4,|L19.660|
00010e  eddf1a4f          VLDR     s3,|L19.588|
000112  ed9f1a62          VLDR     s2,|L19.668|
000116  eddf0a62          VLDR     s1,|L19.672|
00011a  eeb20a01          VMOV.F32 s0,#8.50000000
00011e  4861              LDR      r0,|L19.676|
000120  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000124  4c60              LDR      r4,|L19.680|
000126  ed9f8a49          VLDR     s16,|L19.588|
00012a  eddf8a48          VLDR     s17,|L19.588|
00012e  ed9f9a47          VLDR     s18,|L19.588|
000132  eddf9a46          VLDR     s19,|L19.588|
000136  ed9faa5d          VLDR     s20,|L19.684|
00013a  eddfaa5d          VLDR     s21,|L19.688|
00013e  ed9fba5d          VLDR     s22,|L19.692|
000142  ed9fca5d          VLDR     s24,|L19.696|
000146  eddfca44          VLDR     s25,|L19.600|
00014a  ed9fda42          VLDR     s26,|L19.596|
00014e  eddfda4f          VLDR     s27,|L19.652|
000152  ed9fea4d          VLDR     s28,|L19.648|
000156  eddfba4a          VLDR     s23,|L19.640|
00015a  eeb06a6b          VMOV.F32 s12,s23
00015e  eef05a4e          VMOV.F32 s11,s28
000162  eeb05a6d          VMOV.F32 s10,s27
000166  eef04a4d          VMOV.F32 s9,s26
00016a  eeb04a6c          VMOV.F32 s8,s25
00016e  eef03a4c          VMOV.F32 s7,s24
000172  eeb03a4b          VMOV.F32 s6,s22
000176  eef02a6a          VMOV.F32 s5,s21
00017a  eeb02a4a          VMOV.F32 s4,s20
00017e  eef01a69          VMOV.F32 s3,s19
000182  eeb01a49          VMOV.F32 s2,s18
000186  eef00a68          VMOV.F32 s1,s17
00018a  eeb00a48          VMOV.F32 s0,s16
00018e  4620              MOV      r0,r4
000190  f7fffffe          BL       _ZN7PIDBaseC1Efffffffffffff ; PIDBase::PIDBase(float, float, float, float, float, float, float, float, float, float, float, float, float)
000194  4604              MOV      r4,r0
000196  bf00              NOP      
000198  ed9f0a48          VLDR     s0,|L19.700|
00019c  ed8d0a08          VSTR     s0,[sp,#0x20]
0001a0  ed9f0a47          VLDR     s0,|L19.704|
0001a4  ed8d0a07          VSTR     s0,[sp,#0x1c]
0001a8  ed9f0a28          VLDR     s0,|L19.588|
0001ac  ed8d0a06          VSTR     s0,[sp,#0x18]
0001b0  ed9f0a26          VLDR     s0,|L19.588|
0001b4  ed8d0a05          VSTR     s0,[sp,#0x14]
0001b8  ed9f0a24          VLDR     s0,|L19.588|
0001bc  ed8d0a04          VSTR     s0,[sp,#0x10]
0001c0  ed9f0a22          VLDR     s0,|L19.588|
0001c4  ed8d0a03          VSTR     s0,[sp,#0xc]
0001c8  eeb00a08          VMOV.F32 s0,#3.00000000
0001cc  ed8d0a02          VSTR     s0,[sp,#8]
0001d0  eeb10a0c          VMOV.F32 s0,#7.00000000
0001d4  ed8d0a01          VSTR     s0,[sp,#4]
0001d8  eeb20a0e          VMOV.F32 s0,#15.00000000
0001dc  ed8d0a00          VSTR     s0,[sp,#0]
0001e0  eddf7a38          VLDR     s15,|L19.708|
0001e4  ed9f7a38          VLDR     s14,|L19.712|
0001e8  eddf6a38          VLDR     s13,|L19.716|
0001ec  ed9f6a17          VLDR     s12,|L19.588|
0001f0  eddf5a25          VLDR     s11,|L19.648|
0001f4  ed9f5a25          VLDR     s10,|L19.652|
0001f8  eddf4a35          VLDR     s9,|L19.720|
0001fc  ed9f4a35          VLDR     s8,|L19.724|
000200  eddf3a0e          VLDR     s7,|L19.572|
000204  ed9f3a24          VLDR     s6,|L19.664|
000208  eddf2a31          VLDR     s5,|L19.720|
00020c  ed9f2a31          VLDR     s4,|L19.724|
000210  eddf1a0e          VLDR     s3,|L19.588|
000214  ed9f1a30          VLDR     s2,|L19.728|
000218  eddf0a0c          VLDR     s1,|L19.588|
00021c  eeb10a04          VMOV.F32 s0,#5.00000000
000220  482e              LDR      r0,|L19.732|
000222  f7fffffe          BL       _ZN9FUZZYSPIDC1Efffffffffffffffffffffffff ; FUZZYSPID::FUZZYSPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
000226  b00a              ADD      sp,sp,#0x28
000228  ecbd8b0e          VPOP     {d8-d14}
00022c  bd10              POP      {r4,pc}
                          ENDP

00022e  0000              DCW      0x0000
                  |L19.560|
000230  3fe66666          DCFS     0x3fe66666 ; 1.7999999523162842
                  |L19.564|
000234  400ccccd          DCFS     0x400ccccd ; 2.2000000476837158
                  |L19.568|
000238  44160000          DCFS     0x44160000 ; 600
                  |L19.572|
00023c  43fa0000          DCFS     0x43fa0000 ; 500
                  |L19.576|
000240  42be0000          DCFS     0x42be0000 ; 95
                  |L19.580|
000244  42b40000          DCFS     0x42b40000 ; 90
                  |L19.584|
000248  42c80000          DCFS     0x42c80000 ; 100
                  |L19.588|
00024c  00000000          DCFS     0x00000000 ; 0
                  |L19.592|
000250  42200000          DCFS     0x42200000 ; 40
                  |L19.596|
000254  459c4000          DCFS     0x459c4000 ; 5000
                  |L19.600|
000258  c59c4000          DCFS     0xc59c4000 ; -5000
                  |L19.604|
00025c  45bb8000          DCFS     0x45bb8000 ; 6000
                  |L19.608|
000260  c5bb8000          DCFS     0xc5bb8000 ; -6000
                  |L19.612|
                          DCD      PitchPID
                  |L19.616|
000268  40333333          DCFS     0x40333333 ; 2.7999999523162842
                  |L19.620|
00026c  40866666          DCFS     0x40866666 ; 4.1999998092651367
                  |L19.624|
000270  3f99999a          DCFS     0x3f99999a ; 1.2000000476837158
                  |L19.628|
000274  42960000          DCFS     0x42960000 ; 75
                  |L19.632|
000278  428c0000          DCFS     0x428c0000 ; 70
                  |L19.636|
00027c  42a00000          DCFS     0x42a00000 ; 80
                  |L19.640|
000280  42700000          DCFS     0x42700000 ; 60
                  |L19.644|
000284  42f00000          DCFS     0x42f00000 ; 120
                  |L19.648|
000288  7f000000          DCFS     0x7f000000 ; 1.7014118346046923e+38
                  |L19.652|
00028c  ff000000          DCFS     0xff000000 ; -1.7014118346046923e+38
                  |L19.656|
000290  458ca000          DCFS     0x458ca000 ; 4500
                  |L19.660|
000294  c58ca000          DCFS     0xc58ca000 ; -4500
                  |L19.664|
000298  c3fa0000          DCFS     0xc3fa0000 ; -500
                  |L19.668|
00029c  3f8ccccd          DCFS     0x3f8ccccd ; 1.1000000238418579
                  |L19.672|
0002a0  3dcccccd          DCFS     0x3dcccccd ; 0.10000000149011612
                  |L19.676|
                          DCD      YawPID
                  |L19.680|
                          DCD      CarFramePID
                  |L19.684|
0002ac  c69c4000          DCFS     0xc69c4000 ; -20000
                  |L19.688|
0002b0  469c4000          DCFS     0x469c4000 ; 20000
                  |L19.692|
0002b4  c53b8000          DCFS     0xc53b8000 ; -3000
                  |L19.696|
0002b8  453b8000          DCFS     0x453b8000 ; 3000
                  |L19.700|
0002bc  3d4ccccd          DCFS     0x3d4ccccd ; 0.05000000074505806
                  |L19.704|
0002c0  3e99999a          DCFS     0x3e99999a ; 0.30000001192092896
                  |L19.708|
0002c4  43480000          DCFS     0x43480000 ; 200
                  |L19.712|
0002c8  43960000          DCFS     0x43960000 ; 300
                  |L19.716|
0002cc  43c80000          DCFS     0x43c80000 ; 400
                  |L19.720|
0002d0  447a0000          DCFS     0x447a0000 ; 1000
                  |L19.724|
0002d4  c47a0000          DCFS     0xc47a0000 ; -1000
                  |L19.728|
0002d8  38d1b717          DCFS     0x38d1b717 ; 9.9999997473787516e-05
                  |L19.732|
                          DCD      TurnplatePID

                          AREA ||i.main||, CODE, READONLY, ALIGN=2

                  main PROC
;;;1044    */
;;;1045   int main (void)
000000  f7fffffe          BL       bsp_Init
;;;1046   {
;;;1047   	/* 初始化外设 */
;;;1048   	bsp_Init();
;;;1049   
;;;1050    	os_sys_init_user (TaskStart,              /* 任务函数 */
000004  f7fffffe          BL       os_set_env
000008  4a03              LDR      r2,|L20.24|
00000a  4904              LDR      r1,|L20.28|
00000c  4804              LDR      r0,|L20.32|
00000e  f8dfc014          LDR      r12,|L20.36|
000012  df00              SVC      #0x0
;;;1051   	                  200,                         /* 任务优先级 */
;;;1052   	                  &TaskStartStk,          /* 任务栈 */
;;;1053   	                  sizeof(TaskStartStk)); /* 任务栈大小，单位字节数 */
;;;1054   	while(1)
000014  bf00              NOP      
                  |L20.22|
000016  e7fe              B        |L20.22|
;;;1055   	{;}
;;;1056   
;;;1057   }
                          ENDP

                  |L20.24|
                          DCD      TaskStartStk
                  |L20.28|
                          DCD      0x000200c8
                  |L20.32|
                          DCD      _Z9TaskStartv ; TaskStart()
                  |L20.36|
                          DCD      rt_sys_init

                          AREA ||.ARM.exidx||, LINKORDER=||i._Z12AppObjCreatev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          DCD      0x00000000
                          RELOC 42, ||i._Z12AppObjCreatev||
                          DCD      0x00000001

                          AREA ||area_number.22||, LINKORDER=||i._Z13Boot_Sequencev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.22||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13Boot_Sequencev||
                          DCD      0x00000001

                          AREA ||area_number.23||, LINKORDER=||i._Z12DR16_SxValuev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.23||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z12DR16_SxValuev||
                          DCD      0x00000001

                          AREA ||area_number.24||, LINKORDER=||i._Z16Turnplate_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.24||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z16Turnplate_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.25||, LINKORDER=||i._Z13PCData_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.25||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13PCData_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.26||, LINKORDER=||i._Z15CarFrame_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.26||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15CarFrame_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.27||, LINKORDER=||i._Z8pitchyawv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.27||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8pitchyawv||
                          DCD      0x00000001

                          AREA ||area_number.28||, LINKORDER=||i._Z15PitchYaw_Aguestv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.28||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15PitchYaw_Aguestv||
                          DCD      0x00000001

                          AREA ||area_number.29||, LINKORDER=||i._Z14CAN1_DATA0_Recv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.29||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14CAN1_DATA0_Recv||
                          DCD      0x00000001

                          AREA ||area_number.30||, LINKORDER=||i._Z14CAN2_DATA1_Recv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.30||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14CAN2_DATA1_Recv||
                          DCD      0x00000001

                          AREA ||area_number.31||, LINKORDER=||i._Z14CAN2_DATA0_Recv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.31||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z14CAN2_DATA0_Recv||
                          DCD      0x00000001

                          AREA ||area_number.32||, LINKORDER=||i._Z13DR16_DATA_Recv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.32||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13DR16_DATA_Recv||
                          DCD      0x00000001

                          AREA ||area_number.33||, LINKORDER=||i._Z10DEBUG_DATAv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.33||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z10DEBUG_DATAv||
                          DCD      0x00000001

                          AREA ||area_number.34||, LINKORDER=||i._Z8EXTITaskv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.34||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z8EXTITaskv||
                          DCD      0x00000001

                          AREA ||area_number.35||, LINKORDER=||i._Z15DisconnectCheckv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.35||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z15DisconnectCheckv||
                          DCD      0x00000001

                          AREA ||area_number.36||, LINKORDER=||i._Z13AppTaskCreatev||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.36||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z13AppTaskCreatev||
                          DCD      0x00000001

                          AREA ||area_number.37||, LINKORDER=||i._Z9TaskStartv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.37||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z9TaskStartv||
                          DCD      0x00000001

                          AREA ||area_number.38||, LINKORDER=||i._Z3ttpv||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.38||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._Z3ttpv||
                          DCD      0x00000001

                          AREA ||area_number.39||, LINKORDER=||i.main||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.39||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.main||
                          DCD      0x00000001

                          AREA ||area_number.40||, LINKORDER=||i.__sti___8_main_cpp_7d6d8351||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.40||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i.__sti___8_main_cpp_7d6d8351||
                          DCD      0x00000001

                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  PitchPID
                          %        228
                  YawPID
                          %        228
                  CarFramePID
                          %        164
                  TurnplatePID
                          %        292
                  TaskStartStk
                          %        512
                  DEBUG_DATAStk
                          %        512
                  DR16_DATA_RecStk
                          %        512
                  CAN2_DATA0_RecStk
                          %        512
                  CAN2_DATA1_RecStk
                          %        512
                  CAN1_DATA0_RecStk
                          %        512
                  DisconnectCheckStk
                          %        512
                  EXTITaskStk
                          %        512
                  PitchYaw_AguestStk
                          %        512
                  CarFrame_AguestStk
                          %        512
                  PCData_AguestStk
                          %        512
                  Turnplate_AguestStk
                          %        512
                  DR16_SxValueStk
                          %        512
                  Boot_SequenceStk
                          %        512
                  GameInfo
                          %        38

                          AREA ||.data||, DATA, ALIGN=2

                  DUOJI_OPEN
000000  02bc              DCW      0x02bc
                  DUOJI_CLOSE
000002  0631              DCW      0x0631
                  arrive_position
000004  00                DCB      0x00
                  cvstruct
000005  000000            DCB      0x00,0x00,0x00
                          DCD      0x00000000
00000c  00000000          DCB      0x00,0x00,0x00,0x00
                  HandleDEBUG_DATA
                          DCD      0x00000000
                  HandleDR16_DATA_Rec
                          DCD      0x00000000
                  HandleCAN2_DATA0_Rec
                          DCD      0x00000000
                  HandleCAN2_DATA1_Rec
                          DCD      0x00000000
                  HandleCAN1_DATA0_Rec
                          DCD      0x00000000
                  HandleDisconnectCheck
                          DCD      0x00000000
                  HandleEXTITask
                          DCD      0x00000000
                  HandlePitchYaw_Aguest
                          DCD      0x00000000
                  HandleCarFrame_Aguest
                          DCD      0x00000000
                  HandlePCData_Aguest
                          DCD      0x00000000
                  HandleTurnplate_Aguest
                          DCD      0x00000000
                  HandleDR16_SxValue
                          DCD      0x00000000
                  HandleBoot_Sequence
                          DCD      0x00000000
                  timer200msflag
000044  00                DCB      0x00
                  positionreachflag
000045  00                DCB      0x00
                  shootedflag
000046  00                DCB      0x00
                  shootonce
000047  00                DCB      0x00
                  shootcons
000048  00                DCB      0x00
                  hurt_id
000049  06                DCB      0x06
                  hurt_origin
00004a  0000              DCB      0x00,0x00
                  tmee
                          DCD      0x00000000
                  tmeee
                          DCD      0x00000000
                  PIDBegin_DR16
000054  00                DCB      0x00
                  PIDBegin_CAN
000055  00                DCB      0x00
                  CAN1_Angle
000056  00                DCB      0x00
                  CAN2_PitchMotor
000057  00                DCB      0x00
                  CAN2_YawMotor
000058  00                DCB      0x00
                  ExtiFlag
000059  01                DCB      0x01
                  Refree_Message
00005a  00                DCB      0x00
                  CAN1_Ultrasonic
00005b  00                DCB      0x00
                  Can2_NewBoard
00005c  00                DCB      0x00
                  dddflag
00005d  000000            DCB      0x00,0x00,0x00
                  tmr1
                          DCD      0x00000000
                  ||cnt||
000064  00                DCB      0x00

                          AREA ||.init_array||, DATA, READONLY, INIT_ARRAY, ALIGN=2

                          DCD      0x00000000
                          RELOC 38, __sti___8_main_cpp_7d6d8351

                          AREA ||i._ZN8FUZZYPID8SetOmegaEfh||, COMGROUP=_ZN8FUZZYPID8SetOmegaEfh, CODE, READONLY, ALIGN=1

                  _ZN8FUZZYPID8SetOmegaEfh PROC ; FUZZYPID::SetOmega(float, unsigned char)
;;;69     	void FuzzyPID(float error,float errorC);
;;;70     	void SetOmega(float data,unsigned char dir){
000000  edd00a1a          VLDR     s1,[r0,#0x68]
;;;71     		Omega = (data - Omega_Offset);
000004  ee700a60          VSUB.F32 s1,s0,s1
000008  edc00a19          VSTR     s1,[r0,#0x64]
;;;72     		if(dir) Omega = -Omega;
00000c  b129              CBZ      r1,|L146.26|
00000e  edd00a19          VLDR     s1,[r0,#0x64]
000012  eef10a60          VNEG.F32 s1,s1
000016  edc00a19          VSTR     s1,[r0,#0x64]
                  |L146.26|
;;;73     	};
00001a  4770              BX       lr
;;;74     	void SetOmegaOffset(float data){
                          ENDP


                          AREA ||area_number.147||, COMGROUP=_ZN8FUZZYPID8SetOmegaEfh, LINKORDER=||i._ZN8FUZZYPID8SetOmegaEfh||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.147||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN8FUZZYPID8SetOmegaEfh||
                          DCD      0x00000001

                          AREA ||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||, COMGROUP=_ZN9FUZZYSPIDC1Efffffffffffffffffffffffff, CODE, READONLY, ALIGN=1

                  _ZN9FUZZYSPIDC2Efffffffffffffffffffffffff                  ; Alternate entry point ; FUZZYSPID::FUZZYSPID__sub_object(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
                  _ZN9FUZZYSPIDC1Efffffffffffffffffffffffff PROC ; FUZZYSPID::FUZZYSPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
;;;100    		
;;;101    	FUZZYSPID(float m_Kp, float m_Ki, float m_Kd, float m_Target,\
;;;102    		 float m_Rpi, float m_Rpa, float m_Rii, float m_Ria,\
;;;103    		 float m_Rdi, float m_Rda, float m_Ti, float m_Ta,float m_DeadZone,
;;;104    
;;;105    		 float m_NB_PB, float m_NM_PM, float m_NS_PS,\
;;;106    		 float m_NB_PB_kp,float m_NM_PM_kp, float m_NS_PS_kp,\
;;;107    		 float m_NB_PB_ki,float m_NM_PM_ki, float m_NS_PS_ki,\
;;;108    		 float m_NB_PB_kd,float m_NM_PM_kd, float m_NS_PS_kd
;;;109    			 ):FUZZYPID(m_Kp,m_Ki,m_Kd,m_Target,\
;;;110    				m_Rpi,m_Rpa,m_Rii,m_Ria,\
;;;111    				m_Rdi,m_Rda,m_Ti,m_Ta,m_DeadZone,\
;;;112    				m_NB_PB,m_NM_PM,m_NS_PS,\
;;;113    				m_NB_PB_kp,m_NM_PM_kp,m_NS_PS_kp,\
;;;114    				m_NB_PB_ki,m_NM_PM_ki,m_NS_PS_ki,\
;;;115    				m_NB_PB_kd,m_NM_PM_kd,m_NS_PS_kd)
;;;116    		 {};
;;;117    	void AdjustPID(void);
000000  b511              PUSH     {r0,r4,lr}
000002  ed2d0b10          VPUSH    {d0-d7}
000006  ed2d8b10          VPUSH    {d8-d15}
00000a  b089              SUB      sp,sp,#0x24
00000c  4604              MOV      r4,r0
00000e  eeb08a40          VMOV.F32 s16,s0
000012  eef08a60          VMOV.F32 s17,s1
000016  eeb09a41          VMOV.F32 s18,s2
00001a  eef09a61          VMOV.F32 s19,s3
00001e  eeb0aa42          VMOV.F32 s20,s4
000022  eef0aa62          VMOV.F32 s21,s5
000026  eeb0ba43          VMOV.F32 s22,s6
00002a  eef0ba63          VMOV.F32 s23,s7
00002e  eeb0ca44          VMOV.F32 s24,s8
000032  eef0ca64          VMOV.F32 s25,s9
000036  eeb0da45          VMOV.F32 s26,s10
00003a  eef0da65          VMOV.F32 s27,s11
00003e  eeb0ea46          VMOV.F32 s28,s12
000042  eef0ea66          VMOV.F32 s29,s13
000046  eeb0fa47          VMOV.F32 s30,s14
00004a  edddfa2c          VLDR     s31,[sp,#0xb0]
00004e  ed9d0a34          VLDR     s0,[sp,#0xd0]
000052  ed8d0a08          VSTR     s0,[sp,#0x20]
000056  ed9d0a33          VLDR     s0,[sp,#0xcc]
00005a  ed8d0a07          VSTR     s0,[sp,#0x1c]
00005e  ed9d0a32          VLDR     s0,[sp,#0xc8]
000062  ed8d0a06          VSTR     s0,[sp,#0x18]
000066  ed9d0a31          VLDR     s0,[sp,#0xc4]
00006a  ed8d0a05          VSTR     s0,[sp,#0x14]
00006e  ed9d0a30          VLDR     s0,[sp,#0xc0]
000072  ed8d0a04          VSTR     s0,[sp,#0x10]
000076  ed9d0a2f          VLDR     s0,[sp,#0xbc]
00007a  ed8d0a03          VSTR     s0,[sp,#0xc]
00007e  ed9d0a2e          VLDR     s0,[sp,#0xb8]
000082  ed8d0a02          VSTR     s0,[sp,#8]
000086  ed9d0a2d          VLDR     s0,[sp,#0xb4]
00008a  ed8d0a01          VSTR     s0,[sp,#4]
00008e  edcdfa00          VSTR     s31,[sp,#0]
000092  eddd7a28          VLDR     s15,[sp,#0xa0]
000096  eeb07a4f          VMOV.F32 s14,s30
00009a  eef06a6e          VMOV.F32 s13,s29
00009e  eeb06a4e          VMOV.F32 s12,s28
0000a2  eef05a6d          VMOV.F32 s11,s27
0000a6  eeb05a4d          VMOV.F32 s10,s26
0000aa  eef04a6c          VMOV.F32 s9,s25
0000ae  eeb04a4c          VMOV.F32 s8,s24
0000b2  eef03a6b          VMOV.F32 s7,s23
0000b6  eeb03a4b          VMOV.F32 s6,s22
0000ba  eef02a6a          VMOV.F32 s5,s21
0000be  eeb02a4a          VMOV.F32 s4,s20
0000c2  eef01a69          VMOV.F32 s3,s19
0000c6  eeb01a49          VMOV.F32 s2,s18
0000ca  eef00a68          VMOV.F32 s1,s17
0000ce  eeb00a48          VMOV.F32 s0,s16
0000d2  4620              MOV      r0,r4
0000d4  f7fffffe          BL       _ZN8FUZZYPIDC1Efffffffffffffffffffffffff ; FUZZYPID::FUZZYPID(float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float, float)
0000d8  4604              MOV      r4,r0
0000da  4620              MOV      r0,r4
0000dc  b009              ADD      sp,sp,#0x24
0000de  ecbd8b10          VPOP     {d8-d15}
0000e2  b011              ADD      sp,sp,#0x44
0000e4  bd10              POP      {r4,pc}
                          ENDP


                          AREA ||area_number.154||, COMGROUP=_ZN9FUZZYSPIDC1Efffffffffffffffffffffffff, LINKORDER=||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||, DATA, READONLY, SECTYPE={SHT_ARM_EXIDX}, ALIGN=2

                          EXPORTAS ||area_number.154||, ||.ARM.exidx||
                          DCD      0x00000000
                          RELOC 42, ||i._ZN9FUZZYSPIDC1Efffffffffffffffffffffffff||
                          DCD      0x00000001

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\main.cpp"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z7__REV16j|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___8_main_cpp_7d6d8351___Z7__REV16j| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z7__REVSHi|
#line 144
|__asm___8_main_cpp_7d6d8351___Z7__REVSHi| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___8_main_cpp_7d6d8351___Z5__RRXj|
#line 300
|__asm___8_main_cpp_7d6d8351___Z5__RRXj| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***

                  __ARM_use_no_argv EQU 0
