; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rt_system.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rt_system.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rt_system.crf ..\..\RTX\src\rt_System.c]
                          THUMB

                          AREA ||i.os_tick_init||, CODE, READONLY, ALIGN=2

                  os_tick_init PROC
;;;214    
;;;215    __weak int os_tick_init (void) {
000000  bf00              NOP      
000002  4809              LDR      r0,|L1.40|
000004  6800              LDR      r0,[r0,#0]  ; os_trv
000006  f04f21e0          MOV      r1,#0xe000e000
00000a  6148              STR      r0,[r1,#0x14]
00000c  2000              MOVS     r0,#0
00000e  6188              STR      r0,[r1,#0x18]
000010  2007              MOVS     r0,#7
000012  6108              STR      r0,[r1,#0x10]
000014  4805              LDR      r0,|L1.44|
000016  6800              LDR      r0,[r0,#0]
000018  f040407f          ORR      r0,r0,#0xff000000
00001c  4903              LDR      r1,|L1.44|
00001e  6008              STR      r0,[r1,#0]
000020  bf00              NOP      
;;;216      /* Initialize SysTick timer as system tick timer. */
;;;217      rt_systick_init ();
;;;218      return (-1);  /* Return IRQ number of SysTick timer */
000022  1748              ASRS     r0,r1,#29
;;;219    }
000024  4770              BX       lr
;;;220    
                          ENDP

000026  0000              DCW      0x0000
                  |L1.40|
                          DCD      os_trv
                  |L1.44|
                          DCD      0xe000ed20

                          AREA ||i.os_tick_irqack||, CODE, READONLY, ALIGN=1

                  os_tick_irqack PROC
;;;223    
;;;224    __weak void os_tick_irqack (void) {
000000  4770              BX       lr
;;;225      /* Acknowledge timer interrupt. */
;;;226    }
;;;227    
                          ENDP


                          AREA ||i.rt_pop_req||, CODE, READONLY, ALIGN=2

                  rt_pop_req PROC
;;;178    
;;;179    void rt_pop_req (void) {
000000  b570              PUSH     {r4-r6,lr}
;;;180      /* Process an ISR post service requests. */
;;;181      struct OS_XCB *p_CB;
;;;182      P_TCB next;
;;;183      U32  idx;
;;;184    
;;;185      os_tsk.run->state = READY;
000002  2001              MOVS     r0,#1
000004  4925              LDR      r1,|L3.156|
000006  6809              LDR      r1,[r1,#0]  ; os_tsk
000008  7048              STRB     r0,[r1,#1]
;;;186      rt_put_rdy_first (os_tsk.run);
00000a  4924              LDR      r1,|L3.156|
00000c  6808              LDR      r0,[r1,#0]  ; os_tsk
00000e  f7fffffe          BL       rt_put_rdy_first
;;;187    
;;;188      idx = os_psq->last;
000012  4823              LDR      r0,|L3.160|
000014  7844              LDRB     r4,[r0,#1]  ; os_fifo
;;;189      while (os_psq->count) {
000016  e032              B        |L3.126|
                  |L3.24|
;;;190        p_CB = os_psq->q[idx].id;
000018  4821              LDR      r0,|L3.160|
00001a  1d00              ADDS     r0,r0,#4
00001c  f8505034          LDR      r5,[r0,r4,LSL #3]
;;;191        if (p_CB->cb_type == TCB) {
000020  7828              LDRB     r0,[r5,#0]
000022  b948              CBNZ     r0,|L3.56|
;;;192          /* Is of TCB type */
;;;193          rt_evt_psh ((P_TCB)p_CB, (U16)os_psq->q[idx].arg);
000024  481e              LDR      r0,|L3.160|
000026  1d00              ADDS     r0,r0,#4
000028  eb0000c4          ADD      r0,r0,r4,LSL #3
00002c  8880              LDRH     r0,[r0,#4]
00002e  b281              UXTH     r1,r0
000030  4628              MOV      r0,r5
000032  f7fffffe          BL       rt_evt_psh
000036  e00e              B        |L3.86|
                  |L3.56|
;;;194        }
;;;195        else if (p_CB->cb_type == MCB) {
000038  7828              LDRB     r0,[r5,#0]
00003a  2801              CMP      r0,#1
00003c  d108              BNE      |L3.80|
;;;196          /* Is of MCB type */
;;;197          rt_mbx_psh ((P_MCB)p_CB, (void *)os_psq->q[idx].arg);
00003e  4818              LDR      r0,|L3.160|
000040  1d00              ADDS     r0,r0,#4
000042  eb0000c4          ADD      r0,r0,r4,LSL #3
000046  6841              LDR      r1,[r0,#4]
000048  4628              MOV      r0,r5
00004a  f7fffffe          BL       rt_mbx_psh
00004e  e002              B        |L3.86|
                  |L3.80|
;;;198        }
;;;199        else {
;;;200          /* Must be of SCB type */
;;;201          rt_sem_psh ((P_SCB)p_CB);
000050  4628              MOV      r0,r5
000052  f7fffffe          BL       rt_sem_psh
                  |L3.86|
;;;202        }
;;;203        if (++idx == os_psq->size) idx = 0;
000056  1c60              ADDS     r0,r4,#1
000058  4604              MOV      r4,r0
00005a  4911              LDR      r1,|L3.160|
00005c  78c9              LDRB     r1,[r1,#3]  ; os_fifo
00005e  4288              CMP      r0,r1
000060  d100              BNE      |L3.100|
000062  2400              MOVS     r4,#0
                  |L3.100|
;;;204        rt_dec (&os_psq->count);
000064  bf00              NOP      
                  |L3.102|
000066  480e              LDR      r0,|L3.160|
000068  1c80              ADDS     r0,r0,#2
00006a  e8d00f4f          LDREXB   r0,[r0]
00006e  1e40              SUBS     r0,r0,#1
000070  b2c1              UXTB     r1,r0
000072  480b              LDR      r0,|L3.160|
000074  1c80              ADDS     r0,r0,#2
000076  e8c01f42          STREXB   r2,r1,[r0]
00007a  2a00              CMP      r2,#0
00007c  d1f3              BNE      |L3.102|
                  |L3.126|
00007e  4808              LDR      r0,|L3.160|
000080  7880              LDRB     r0,[r0,#2]            ;189  ; os_fifo
000082  2800              CMP      r0,#0                 ;189
000084  d1c8              BNE      |L3.24|
;;;205      }
;;;206      os_psq->last = idx;
000086  4906              LDR      r1,|L3.160|
000088  704c              STRB     r4,[r1,#1]
;;;207    
;;;208      next = rt_get_first (&os_rdy);
00008a  4806              LDR      r0,|L3.164|
00008c  f7fffffe          BL       rt_get_first
000090  4606              MOV      r6,r0
;;;209      rt_switch_req (next);
000092  4630              MOV      r0,r6
000094  f7fffffe          BL       rt_switch_req
;;;210    }
000098  bd70              POP      {r4-r6,pc}
;;;211    
                          ENDP

00009a  0000              DCW      0x0000
                  |L3.156|
                          DCD      os_tsk
                  |L3.160|
                          DCD      os_fifo
                  |L3.164|
                          DCD      os_rdy

                          AREA ||i.rt_psh_req||, CODE, READONLY, ALIGN=2

                  rt_psh_req PROC
;;;165    
;;;166    void rt_psh_req (void) {
000000  4805              LDR      r0,|L4.24|
;;;167      /* Initiate a post service handling request if required. */
;;;168      if (os_lock == __FALSE) {
000002  7800              LDRB     r0,[r0,#0]  ; os_lock
000004  b920              CBNZ     r0,|L4.16|
;;;169        OS_PEND_IRQ ();
000006  f04f5080          MOV      r0,#0x10000000
00000a  4904              LDR      r1,|L4.28|
00000c  6008              STR      r0,[r1,#0]
00000e  e002              B        |L4.22|
                  |L4.16|
;;;170      }
;;;171      else {
;;;172        os_psh_flag = __TRUE;
000010  2001              MOVS     r0,#1
000012  4903              LDR      r1,|L4.32|
000014  7008              STRB     r0,[r1,#0]
                  |L4.22|
;;;173      }
;;;174    }
000016  4770              BX       lr
;;;175    
                          ENDP

                  |L4.24|
                          DCD      os_lock
                  |L4.28|
                          DCD      0xe000ed04
                  |L4.32|
                          DCD      os_psh_flag

                          AREA ||i.rt_resume||, CODE, READONLY, ALIGN=2

                  rt_resume PROC
;;;74     
;;;75     void rt_resume (U32 sleep_time) {
000000  b570              PUSH     {r4-r6,lr}
000002  4605              MOV      r5,r0
;;;76       /* Resume OS scheduler after suspend */
;;;77       P_TCB next;
;;;78       U32   delta;
;;;79     
;;;80       os_tsk.run->state = READY;
000004  2001              MOVS     r0,#1
000006  4933              LDR      r1,|L5.212|
000008  6809              LDR      r1,[r1,#0]  ; os_tsk
00000a  7048              STRB     r0,[r1,#1]
;;;81       rt_put_rdy_first (os_tsk.run);
00000c  4931              LDR      r1,|L5.212|
00000e  6808              LDR      r0,[r1,#0]  ; os_tsk
000010  f7fffffe          BL       rt_put_rdy_first
;;;82     
;;;83       os_robin.task = NULL;
000014  2000              MOVS     r0,#0
000016  4930              LDR      r1,|L5.216|
000018  6008              STR      r0,[r1,#0]  ; os_robin
;;;84     
;;;85       /* Update delays. */
;;;86       if (os_dly.p_dlnk) {
00001a  4830              LDR      r0,|L5.220|
00001c  68c0              LDR      r0,[r0,#0xc]  ; os_dly
00001e  b360              CBZ      r0,|L5.122|
;;;87         delta = sleep_time;
000020  462c              MOV      r4,r5
;;;88         if (delta >= os_dly.delta_time) {
000022  482e              LDR      r0,|L5.220|
000024  8a80              LDRH     r0,[r0,#0x14]  ; os_dly
000026  42a0              CMP      r0,r4
000028  d81c              BHI      |L5.100|
;;;89           delta   -= os_dly.delta_time;
00002a  482c              LDR      r0,|L5.220|
00002c  8a80              LDRH     r0,[r0,#0x14]  ; os_dly
00002e  1a24              SUBS     r4,r4,r0
;;;90           os_time += os_dly.delta_time;
000030  482a              LDR      r0,|L5.220|
000032  8a80              LDRH     r0,[r0,#0x14]  ; os_dly
000034  492a              LDR      r1,|L5.224|
000036  6809              LDR      r1,[r1,#0]  ; os_time
000038  4408              ADD      r0,r0,r1
00003a  4929              LDR      r1,|L5.224|
00003c  6008              STR      r0,[r1,#0]  ; os_time
;;;91           os_dly.delta_time = 1;
00003e  2001              MOVS     r0,#1
000040  4926              LDR      r1,|L5.220|
000042  8288              STRH     r0,[r1,#0x14]
;;;92           while (os_dly.p_dlnk) {
000044  e009              B        |L5.90|
                  |L5.70|
;;;93             rt_dec_dly();
000046  f7fffffe          BL       rt_dec_dly
;;;94             if (delta == 0) break;
00004a  b904              CBNZ     r4,|L5.78|
00004c  e009              B        |L5.98|
                  |L5.78|
;;;95             delta--;
00004e  1e64              SUBS     r4,r4,#1
;;;96             os_time++;
000050  4823              LDR      r0,|L5.224|
000052  6800              LDR      r0,[r0,#0]  ; os_time
000054  1c40              ADDS     r0,r0,#1
000056  4922              LDR      r1,|L5.224|
000058  6008              STR      r0,[r1,#0]  ; os_time
                  |L5.90|
00005a  4820              LDR      r0,|L5.220|
00005c  68c0              LDR      r0,[r0,#0xc]          ;92  ; os_dly
00005e  2800              CMP      r0,#0                 ;92
000060  d1f1              BNE      |L5.70|
                  |L5.98|
000062  e00f              B        |L5.132|
                  |L5.100|
;;;97           }
;;;98         } else {
;;;99           os_time           += delta;
000064  481e              LDR      r0,|L5.224|
000066  6800              LDR      r0,[r0,#0]  ; os_time
000068  4420              ADD      r0,r0,r4
00006a  491d              LDR      r1,|L5.224|
00006c  6008              STR      r0,[r1,#0]  ; os_time
;;;100          os_dly.delta_time -= delta;
00006e  481b              LDR      r0,|L5.220|
000070  8a80              LDRH     r0,[r0,#0x14]  ; os_dly
000072  1b00              SUBS     r0,r0,r4
000074  4919              LDR      r1,|L5.220|
000076  8288              STRH     r0,[r1,#0x14]
000078  e004              B        |L5.132|
                  |L5.122|
;;;101        }
;;;102      } else {
;;;103        os_time += sleep_time;
00007a  4819              LDR      r0,|L5.224|
00007c  6800              LDR      r0,[r0,#0]  ; os_time
00007e  4428              ADD      r0,r0,r5
000080  4917              LDR      r1,|L5.224|
000082  6008              STR      r0,[r1,#0]  ; os_time
                  |L5.132|
;;;104      }
;;;105    
;;;106      /* Check the user timers. */
;;;107      if (os_tmr.next) {
000084  4817              LDR      r0,|L5.228|
000086  6800              LDR      r0,[r0,#0]  ; os_tmr
000088  b1d0              CBZ      r0,|L5.192|
;;;108        delta = sleep_time;
00008a  462c              MOV      r4,r5
;;;109        if (delta >= os_tmr.tcnt) {
00008c  4815              LDR      r0,|L5.228|
00008e  8880              LDRH     r0,[r0,#4]  ; os_tmr
000090  42a0              CMP      r0,r4
000092  d810              BHI      |L5.182|
;;;110          delta   -= os_tmr.tcnt;
000094  4813              LDR      r0,|L5.228|
000096  8880              LDRH     r0,[r0,#4]  ; os_tmr
000098  1a24              SUBS     r4,r4,r0
;;;111          os_tmr.tcnt = 1;
00009a  2001              MOVS     r0,#1
00009c  4911              LDR      r1,|L5.228|
00009e  8088              STRH     r0,[r1,#4]
;;;112          while (os_tmr.next) {
0000a0  e004              B        |L5.172|
                  |L5.162|
;;;113            rt_tmr_tick();
0000a2  f7fffffe          BL       rt_tmr_tick
;;;114            if (delta == 0) break;
0000a6  b904              CBNZ     r4,|L5.170|
0000a8  e004              B        |L5.180|
                  |L5.170|
;;;115            delta--;
0000aa  1e64              SUBS     r4,r4,#1
                  |L5.172|
0000ac  480d              LDR      r0,|L5.228|
0000ae  6800              LDR      r0,[r0,#0]            ;112  ; os_tmr
0000b0  2800              CMP      r0,#0                 ;112
0000b2  d1f6              BNE      |L5.162|
                  |L5.180|
0000b4  e004              B        |L5.192|
                  |L5.182|
;;;116          }
;;;117        } else {
;;;118          os_tmr.tcnt -= delta;
0000b6  480b              LDR      r0,|L5.228|
0000b8  8880              LDRH     r0,[r0,#4]  ; os_tmr
0000ba  1b00              SUBS     r0,r0,r4
0000bc  4909              LDR      r1,|L5.228|
0000be  8088              STRH     r0,[r1,#4]
                  |L5.192|
;;;119        }
;;;120      }
;;;121    
;;;122      /* Switch back to highest ready task */
;;;123      next = rt_get_first (&os_rdy);
0000c0  4809              LDR      r0,|L5.232|
0000c2  f7fffffe          BL       rt_get_first
0000c6  4606              MOV      r6,r0
;;;124      rt_switch_req (next);
0000c8  4630              MOV      r0,r6
0000ca  f7fffffe          BL       rt_switch_req
;;;125    
;;;126      rt_tsk_unlock();
0000ce  f7fffffe          BL       rt_tsk_unlock
;;;127    }
0000d2  bd70              POP      {r4-r6,pc}
;;;128    
                          ENDP

                  |L5.212|
                          DCD      os_tsk
                  |L5.216|
                          DCD      os_robin
                  |L5.220|
                          DCD      os_dly
                  |L5.224|
                          DCD      os_time
                  |L5.228|
                          DCD      os_tmr
                  |L5.232|
                          DCD      os_rdy

                          AREA ||i.rt_stk_check||, CODE, READONLY, ALIGN=2

                  rt_stk_check PROC
;;;254    
;;;255    __weak void rt_stk_check (void) {
000000  b510              PUSH     {r4,lr}
;;;256      /* Check for stack overflow. */
;;;257      if ((os_tsk.run->tsk_stack < (U32)os_tsk.run->stack) || 
000002  4809              LDR      r0,|L6.40|
000004  6800              LDR      r0,[r0,#0]  ; os_tsk
000006  6ac0              LDR      r0,[r0,#0x2c]
000008  4907              LDR      r1,|L6.40|
00000a  6809              LDR      r1,[r1,#0]  ; os_tsk
00000c  6b09              LDR      r1,[r1,#0x30]
00000e  4288              CMP      r0,r1
000010  d306              BCC      |L6.32|
;;;258          (os_tsk.run->stack[0] != MAGIC_WORD)) {
000012  4805              LDR      r0,|L6.40|
000014  6800              LDR      r0,[r0,#0]  ; os_tsk
000016  6b00              LDR      r0,[r0,#0x30]
000018  6800              LDR      r0,[r0,#0]
00001a  4904              LDR      r1,|L6.44|
00001c  4288              CMP      r0,r1
00001e  d002              BEQ      |L6.38|
                  |L6.32|
;;;259        os_error (OS_ERR_STK_OVF);
000020  2001              MOVS     r0,#1
000022  f7fffffe          BL       os_error
                  |L6.38|
;;;260      }
;;;261    }
000026  bd10              POP      {r4,pc}
;;;262    
                          ENDP

                  |L6.40|
                          DCD      os_tsk
                  |L6.44|
                          DCD      0xe25a2ea5

                          AREA ||i.rt_suspend||, CODE, READONLY, ALIGN=2

                  rt_suspend PROC
;;;55     
;;;56     U32 rt_suspend (void) {
000000  b500              PUSH     {lr}
;;;57       /* Suspend OS scheduler */
;;;58       U32 delta = 0xFFFF;
000002  f64f72ff          MOV      r2,#0xffff
;;;59       
;;;60       rt_tsk_lock();
000006  f7fffffe          BL       rt_tsk_lock
;;;61       
;;;62       if (os_dly.p_dlnk) {
00000a  4808              LDR      r0,|L7.44|
00000c  68c0              LDR      r0,[r0,#0xc]  ; os_dly
00000e  b108              CBZ      r0,|L7.20|
;;;63         delta = os_dly.delta_time;
000010  4806              LDR      r0,|L7.44|
000012  8a82              LDRH     r2,[r0,#0x14]  ; os_dly
                  |L7.20|
;;;64       }
;;;65       if (os_tmr.next) {
000014  4806              LDR      r0,|L7.48|
000016  6800              LDR      r0,[r0,#0]  ; os_tmr
000018  b128              CBZ      r0,|L7.38|
;;;66         if (os_tmr.tcnt < delta) delta = os_tmr.tcnt;
00001a  4805              LDR      r0,|L7.48|
00001c  8880              LDRH     r0,[r0,#4]  ; os_tmr
00001e  4290              CMP      r0,r2
000020  d201              BCS      |L7.38|
000022  4803              LDR      r0,|L7.48|
000024  8882              LDRH     r2,[r0,#4]  ; os_tmr
                  |L7.38|
;;;67       }
;;;68     
;;;69       return (delta);
000026  4610              MOV      r0,r2
;;;70     }
000028  bd00              POP      {pc}
;;;71     
                          ENDP

00002a  0000              DCW      0x0000
                  |L7.44|
                          DCD      os_dly
                  |L7.48|
                          DCD      os_tmr

                          AREA ||i.rt_systick||, CODE, READONLY, ALIGN=2

                  rt_systick PROC
;;;230    
;;;231    void rt_systick (void) {
000000  b510              PUSH     {r4,lr}
;;;232      /* Check for system clock update, suspend running task. */
;;;233      P_TCB next;
;;;234    
;;;235      os_tsk.run->state = READY;
000002  2001              MOVS     r0,#1
000004  490c              LDR      r1,|L8.56|
000006  6809              LDR      r1,[r1,#0]  ; os_tsk
000008  7048              STRB     r0,[r1,#1]
;;;236      rt_put_rdy_first (os_tsk.run);
00000a  490b              LDR      r1,|L8.56|
00000c  6808              LDR      r0,[r1,#0]  ; os_tsk
00000e  f7fffffe          BL       rt_put_rdy_first
;;;237    
;;;238      /* Check Round Robin timeout. */
;;;239      rt_chk_robin ();
000012  f7fffffe          BL       rt_chk_robin
;;;240    
;;;241      /* Update delays. */
;;;242      os_time++;
000016  4809              LDR      r0,|L8.60|
000018  6800              LDR      r0,[r0,#0]  ; os_time
00001a  1c40              ADDS     r0,r0,#1
00001c  4907              LDR      r1,|L8.60|
00001e  6008              STR      r0,[r1,#0]  ; os_time
;;;243      rt_dec_dly ();
000020  f7fffffe          BL       rt_dec_dly
;;;244    
;;;245      /* Check the user timers. */
;;;246      rt_tmr_tick ();
000024  f7fffffe          BL       rt_tmr_tick
;;;247    
;;;248      /* Switch back to highest ready task */
;;;249      next = rt_get_first (&os_rdy);
000028  4805              LDR      r0,|L8.64|
00002a  f7fffffe          BL       rt_get_first
00002e  4604              MOV      r4,r0
;;;250      rt_switch_req (next);
000030  4620              MOV      r0,r4
000032  f7fffffe          BL       rt_switch_req
;;;251    }
000036  bd10              POP      {r4,pc}
;;;252    
                          ENDP

                  |L8.56|
                          DCD      os_tsk
                  |L8.60|
                          DCD      os_time
                  |L8.64|
                          DCD      os_rdy

                          AREA ||i.rt_tsk_lock||, CODE, READONLY, ALIGN=2

                  rt_tsk_lock PROC
;;;131    
;;;132    void rt_tsk_lock (void) {
000000  4818              LDR      r0,|L9.100|
;;;133      /* Prevent task switching by locking out scheduler */
;;;134      if (os_tick_irqn < 0) {
000002  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
000004  2800              CMP      r0,#0
000006  da11              BGE      |L9.44|
;;;135        OS_LOCK();
000008  2005              MOVS     r0,#5
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;136        os_lock = __TRUE;
000010  2001              MOVS     r0,#1
000012  4915              LDR      r1,|L9.104|
000014  7008              STRB     r0,[r1,#0]
;;;137        OS_UNPEND (&pend_flags);
000016  4815              LDR      r0,|L9.108|
000018  6800              LDR      r0,[r0,#0]
00001a  2105              MOVS     r1,#5
00001c  ea016090          AND      r0,r1,r0,LSR #26
000020  4913              LDR      r1,|L9.112|
000022  7008              STRB     r0,[r1,#0]
000024  0640              LSLS     r0,r0,#25
000026  4911              LDR      r1,|L9.108|
000028  6008              STR      r0,[r1,#0]
00002a  e019              B        |L9.96|
                  |L9.44|
;;;138      } else {
;;;139        OS_X_LOCK(os_tick_irqn);
00002c  480d              LDR      r0,|L9.100|
00002e  7800              LDRB     r0,[r0,#0]  ; os_tick_irqn
000030  f000011f          AND      r1,r0,#0x1f
000034  2001              MOVS     r0,#1
000036  4088              LSLS     r0,r0,r1
000038  490a              LDR      r1,|L9.100|
00003a  6809              LDR      r1,[r1,#0]  ; os_tick_irqn
00003c  1149              ASRS     r1,r1,#5
00003e  0089              LSLS     r1,r1,#2
000040  f10121e0          ADD      r1,r1,#0xe000e000
000044  f8c10180          STR      r0,[r1,#0x180]
;;;140        os_lock = __TRUE;
000048  2001              MOVS     r0,#1
00004a  4907              LDR      r1,|L9.104|
00004c  7008              STRB     r0,[r1,#0]
;;;141        OS_X_UNPEND (&pend_flags);
00004e  4807              LDR      r0,|L9.108|
000050  6800              LDR      r0,[r0,#0]
000052  f3c07000          UBFX     r0,r0,#28,#1
000056  4906              LDR      r1,|L9.112|
000058  7008              STRB     r0,[r1,#0]
00005a  06c0              LSLS     r0,r0,#27
00005c  4903              LDR      r1,|L9.108|
00005e  6008              STR      r0,[r1,#0]
                  |L9.96|
;;;142      }
;;;143    }
000060  4770              BX       lr
;;;144    
                          ENDP

000062  0000              DCW      0x0000
                  |L9.100|
                          DCD      os_tick_irqn
                  |L9.104|
                          DCD      os_lock
                  |L9.108|
                          DCD      0xe000ed04
                  |L9.112|
                          DCD      pend_flags

                          AREA ||i.rt_tsk_unlock||, CODE, READONLY, ALIGN=2

                  rt_tsk_unlock PROC
;;;147    
;;;148    void rt_tsk_unlock (void) {
000000  481a              LDR      r0,|L10.108|
;;;149      /* Unlock scheduler and re-enable task switching */
;;;150      if (os_tick_irqn < 0) {
000002  6800              LDR      r0,[r0,#0]  ; os_tick_irqn
000004  2800              CMP      r0,#0
000006  da13              BGE      |L10.48|
;;;151        OS_UNLOCK();
000008  2007              MOVS     r0,#7
00000a  f04f21e0          MOV      r1,#0xe000e000
00000e  6108              STR      r0,[r1,#0x10]
;;;152        os_lock = __FALSE;
000010  2000              MOVS     r0,#0
000012  4917              LDR      r1,|L10.112|
000014  7008              STRB     r0,[r1,#0]
;;;153        OS_PEND (pend_flags, os_psh_flag);
000016  4817              LDR      r0,|L10.116|
000018  7800              LDRB     r0,[r0,#0]  ; pend_flags
00001a  4917              LDR      r1,|L10.120|
00001c  7809              LDRB     r1,[r1,#0]  ; os_psh_flag
00001e  ea400081          ORR      r0,r0,r1,LSL #2
000022  0680              LSLS     r0,r0,#26
000024  4915              LDR      r1,|L10.124|
000026  6008              STR      r0,[r1,#0]
;;;154        os_psh_flag = __FALSE;
000028  2000              MOVS     r0,#0
00002a  4913              LDR      r1,|L10.120|
00002c  7008              STRB     r0,[r1,#0]
00002e  e01b              B        |L10.104|
                  |L10.48|
;;;155      } else {
;;;156        OS_X_UNLOCK(os_tick_irqn);
000030  480e              LDR      r0,|L10.108|
000032  7800              LDRB     r0,[r0,#0]  ; os_tick_irqn
000034  f000011f          AND      r1,r0,#0x1f
000038  2001              MOVS     r0,#1
00003a  4088              LSLS     r0,r0,r1
00003c  490b              LDR      r1,|L10.108|
00003e  6809              LDR      r1,[r1,#0]  ; os_tick_irqn
000040  1149              ASRS     r1,r1,#5
000042  0089              LSLS     r1,r1,#2
000044  f10121e0          ADD      r1,r1,#0xe000e000
000048  f8c10100          STR      r0,[r1,#0x100]
;;;157        os_lock = __FALSE;
00004c  2000              MOVS     r0,#0
00004e  4908              LDR      r1,|L10.112|
000050  7008              STRB     r0,[r1,#0]
;;;158        OS_X_PEND (pend_flags, os_psh_flag);
000052  4808              LDR      r0,|L10.116|
000054  7800              LDRB     r0,[r0,#0]  ; pend_flags
000056  4908              LDR      r1,|L10.120|
000058  7809              LDRB     r1,[r1,#0]  ; os_psh_flag
00005a  4308              ORRS     r0,r0,r1
00005c  0700              LSLS     r0,r0,#28
00005e  4907              LDR      r1,|L10.124|
000060  6008              STR      r0,[r1,#0]
;;;159        os_psh_flag = __FALSE;
000062  2000              MOVS     r0,#0
000064  4904              LDR      r1,|L10.120|
000066  7008              STRB     r0,[r1,#0]
                  |L10.104|
;;;160      }
;;;161    }
000068  4770              BX       lr
;;;162    
                          ENDP

00006a  0000              DCW      0x0000
                  |L10.108|
                          DCD      os_tick_irqn
                  |L10.112|
                          DCD      os_lock
                  |L10.116|
                          DCD      pend_flags
                  |L10.120|
                          DCD      os_psh_flag
                  |L10.124|
                          DCD      0xe000ed04

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  RL_RTX_Version
                  ||__tagsym$$used||
                          DCD      0x00040049

                          AREA ||.data||, DATA, ALIGN=2

                  os_tick_irqn
                          DCD      0x00000000
                  os_lock
000004  00                DCB      0x00
                  os_psh_flag
000005  00                DCB      0x00
                  pend_flags
000006  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\RTX\\src\\rt_System.c"
	AREA ||.emb_text||, CODE
	THUMB
	EXPORT ||$$RTX$$version||
#line 43
||$$RTX$$version|| PROC
#line 43

 

 EXPORT __RL_RTX_VER

__RL_RTX_VER EQU 0x473
	ENDP

;*** End   embedded assembler ***
