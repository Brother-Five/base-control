; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\rtx_conf_cm.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\rtx_conf_cm.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\rtx_conf_cm.crf ..\..\User\RTX_Conf_CM.c]
                          THUMB

                          AREA ||i.os_error||, CODE, READONLY, ALIGN=1

                  os_error PROC
;;;205    
;;;206    void os_error (U32 err_code) {
000000  bf00              NOP      
                  |L1.2|
;;;207      /* This function is called when a runtime error is detected. Parameter */
;;;208      /* 'err_code' holds the runtime error code (defined in RTL.H).         */
;;;209    
;;;210      /* HERE: include optional code to be executed on runtime error. */
;;;211      for (;;);
000002  e7fe              B        |L1.2|
;;;212    }
;;;213    
                          ENDP


                          AREA ||i.os_idle_demon||, CODE, READONLY, ALIGN=1

                  os_idle_demon PROC
;;;147    
;;;148    __task void os_idle_demon (void) {
000000  bf00              NOP      
                  |L2.2|
;;;149      /* The idle demon is a system task, running when no other task is ready */
;;;150      /* to run. The 'os_xxx' function calls are not allowed from this task.  */
;;;151    
;;;152      for (;;) {
000002  e7fe              B        |L2.2|
;;;153      /* HERE: include optional user code to be executed when no task runs.*/
;;;154      }
;;;155    }
;;;156    
                          ENDP


                          AREA ||i.os_tmr_call||, CODE, READONLY, ALIGN=2

                  os_tmr_call PROC
;;;181    extern u8 timer200msflag,shootonce ;
;;;182    void os_tmr_call (U16 info) {
000000  2801              CMP      r0,#1
;;;183      /* This function is called when the user timer has expired. Parameter   */
;;;184      /* 'info' holds the value, defined when the timer was created.          */
;;;185    
;;;186      /* HERE: include optional user code to be executed on timeout. */
;;;187      /* 定时器回调函数中仅支持isr_开头的系统函数，os_开头的不支持，此回调函数是在
;;;188         滴答定时器中断中执行的。
;;;189      */
;;;190      switch(info)
000002  d105              BNE      |L3.16|
;;;191      {
;;;192    	case 1:          /* 参数为1 */
;;;193          timer200msflag = 0;
000004  4a03              LDR      r2,|L3.20|
000006  2100              MOVS     r1,#0
000008  7011              STRB     r1,[r2,#0]
;;;194    	  shootonce = 0;
00000a  4a03              LDR      r2,|L3.24|
00000c  7011              STRB     r1,[r2,#0]
;;;195    	//u1_printf("ok\r\n");
;;;196          break;
00000e  bf00              NOP      
                  |L3.16|
000010  bf00              NOP      
;;;197    	
;;;198    //	case 2:          /* 参数为2 */
;;;199    //	  bsp_LedToggle(1);    
;;;200    //      break;
;;;201      }
;;;202    }
000012  4770              BX       lr
;;;203    
                          ENDP

                  |L3.20|
                          DCD      timer200msflag
                  |L3.24|
                          DCD      shootonce

                          AREA ||i.rt_chk_robin||, CODE, READONLY, ALIGN=1

                  rt_chk_robin PROC
;;;360     void rt_init_robin (void) {;}
;;;361     void rt_chk_robin  (void) {;}
000000  4770              BX       lr
;;;362    #endif
                          ENDP


                          AREA ||i.rt_init_robin||, CODE, READONLY, ALIGN=1

                  rt_init_robin PROC
;;;359    #if (__CM__) && OS_ROBIN == 0
;;;360     void rt_init_robin (void) {;}
000000  4770              BX       lr
;;;361     void rt_chk_robin  (void) {;}
                          ENDP


                          AREA ||.bss||, DATA, NOINIT, ALIGN=3

                  mp_tcb
                          %        856
                  mp_stk
                          %        528
                  os_fifo
                          %        132
                  os_active_TCB
                          %        60
                  mp_tmr
                          %        20

                          AREA ||.constdata||, DATA, READONLY, ALIGN=2

                  os_maxtaskrun
000000  000f              DCW      0x000f
000002  0000              DCB      0x00,0x00
                  os_stackinfo
                          DCD      0x010f0200
                  os_rrobin
                          DCD      0x00000005
                  os_trv
                          DCD      0x0002903f
                  os_flags
000010  01000000          DCB      0x01,0x00,0x00,0x00
                  os_clockrate
                  ||__tagsym$$used||
                          DCD      0x000003e8
                  os_timernum
                  |symbol_number.18|
                          DCD      0x00000001
                  mp_tcb_size
00001c  0354              DCW      0x0354
00001e  0000              DCB      0x00,0x00
                  mp_stk_size
                          DCD      0x00000210
                  os_fifo_size
000024  1000              DCB      0x10,0x00
                  mp_tmr_size
000026  0014              DCW      0x0014

                          AREA ||.data||, DATA, ALIGN=2

                  m_tmr
                          DCD      mp_tmr

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\RTX_Conf_CM.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___13_RTX_Conf_CM_c_79201571____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____REVSH|
#line 144
|__asm___13_RTX_Conf_CM_c_79201571____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___13_RTX_Conf_CM_c_79201571____RRX|
#line 300
|__asm___13_RTX_Conf_CM_c_79201571____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
