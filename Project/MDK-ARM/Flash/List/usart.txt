; generated by Component: ARM Compiler 5.05 update 1 (build 106) Tool: ArmCC [4d0efa]
; commandline ArmCC [--list --split_sections --debug -c --asm --interleave -o.\flash\obj\usart.o --asm_dir=.\Flash\List\ --list_dir=.\Flash\List\ --depend=.\flash\obj\usart.d --cpu=Cortex-M4.fp --apcs=interwork -O0 --diag_suppress=9931 -I..\..\Libraries\CMSIS\Include -I..\..\Libraries\CMSIS\Device\ST\STM32F4xx\Include -I..\..\Libraries\STM32F4xx_StdPeriph_Driver\inc -I..\..\User\bsp_stm32f4xx\inc -I..\..\User\bsp_stm32f4xx -I..\..\User -I..\..\RTX\inc -I..\..\RTX\portable -I..\..\MySrc -I..\..\Libraries -I..\..\MySrc\ostask -I..\..\MySrc\MPU6050 -D__MICROLIB -D__UVISION_VERSION=514 -DUSE_STDPERIPH_DRIVER -DSTM32F40_41xxx -DARM_MATH_CM4 -DSTM32F40_41xxx --omf_browse=.\flash\obj\usart.crf ..\..\User\usart.c]
                          THUMB

                          AREA ||i.USART1_IRQHandler||, CODE, READONLY, ALIGN=2

                  USART1_IRQHandler PROC
;;;98     
;;;99     void USART1_IRQHandler(void)
000000  b510              PUSH     {r4,lr}
;;;100    {
;;;101    	u8 com_data;
;;;102    	
;;;103    	if(USART1->SR & USART_SR_ORE)//ORE中断
000002  481b              LDR      r0,|L1.112|
000004  8800              LDRH     r0,[r0,#0]
000006  f0000008          AND      r0,r0,#8
00000a  b110              CBZ      r0,|L1.18|
;;;104    	{
;;;105    		com_data = USART1->DR;
00000c  4818              LDR      r0,|L1.112|
00000e  8880              LDRH     r0,[r0,#4]
000010  b2c4              UXTB     r4,r0
                  |L1.18|
;;;106    	}
;;;107    
;;;108      //接收中断
;;;109    	if( USART_GetITStatus(USART1,USART_IT_RXNE) )
000012  f2405125          MOV      r1,#0x525
000016  4816              LDR      r0,|L1.112|
000018  f7fffffe          BL       USART_GetITStatus
00001c  b150              CBZ      r0,|L1.52|
;;;110    	{
;;;111    		USART_ClearITPendingBit(USART1,USART_IT_RXNE);
00001e  f2405125          MOV      r1,#0x525
000022  4813              LDR      r0,|L1.112|
000024  f7fffffe          BL       USART_ClearITPendingBit
;;;112    
;;;113    		com_data = USART1->DR;
000028  4811              LDR      r0,|L1.112|
00002a  8880              LDRH     r0,[r0,#4]
00002c  b2c4              UXTB     r4,r0
;;;114    		ANO_DT_Data_Receive_Prepare(com_data);
00002e  4620              MOV      r0,r4
000030  f7fffffe          BL       ANO_DT_Data_Receive_Prepare
                  |L1.52|
;;;115    	}
;;;116    	//发送中断
;;;117    	if( USART_GetITStatus(USART1,USART_IT_TXE ) )
000034  f2407127          MOV      r1,#0x727
000038  480d              LDR      r0,|L1.112|
00003a  f7fffffe          BL       USART_GetITStatus
00003e  b1a8              CBZ      r0,|L1.108|
;;;118    	{
;;;119    				
;;;120    		USART1->DR = TxBuffer[TxCounter++]; 
000040  480c              LDR      r0,|L1.116|
000042  7801              LDRB     r1,[r0,#0]  ; TxCounter
000044  7800              LDRB     r0,[r0,#0]  ; TxCounter
000046  1c40              ADDS     r0,r0,#1
000048  4a0a              LDR      r2,|L1.116|
00004a  7010              STRB     r0,[r2,#0]
00004c  480a              LDR      r0,|L1.120|
00004e  5c40              LDRB     r0,[r0,r1]
000050  4907              LDR      r1,|L1.112|
000052  8088              STRH     r0,[r1,#4]
;;;121    		if(TxCounter == count)
000054  4610              MOV      r0,r2
000056  7800              LDRB     r0,[r0,#0]  ; TxCounter
000058  4908              LDR      r1,|L1.124|
00005a  7809              LDRB     r1,[r1,#0]  ; count
00005c  4288              CMP      r0,r1
00005e  d105              BNE      |L1.108|
;;;122    		{
;;;123    			USART1->CR1 &= ~USART_CR1_TXEIE;		
000060  4803              LDR      r0,|L1.112|
000062  8980              LDRH     r0,[r0,#0xc]
000064  f0200080          BIC      r0,r0,#0x80
000068  4901              LDR      r1,|L1.112|
00006a  8188              STRH     r0,[r1,#0xc]
                  |L1.108|
;;;124    		}
;;;125    
;;;126    		//USART_ClearITPendingBit(USART2,USART_IT_TXE);
;;;127    	}
;;;128    
;;;129    
;;;130    
;;;131    }
00006c  bd10              POP      {r4,pc}
;;;132    
                          ENDP

00006e  0000              DCW      0x0000
                  |L1.112|
                          DCD      0x40011000
                  |L1.116|
                          DCD      TxCounter
                  |L1.120|
                          DCD      TxBuffer
                  |L1.124|
                          DCD      count

                          AREA ||i.Usart1_Send||, CODE, READONLY, ALIGN=2

                  Usart1_Send PROC
;;;132    
;;;133    void Usart1_Send(unsigned char *DataToSend ,u8 data_num)
000000  b570              PUSH     {r4-r6,lr}
;;;134    {
000002  4605              MOV      r5,r0
000004  460e              MOV      r6,r1
;;;135      u8 i;
;;;136    	for(i=0;i<data_num;i++)
000006  2400              MOVS     r4,#0
000008  e00a              B        |L2.32|
                  |L2.10|
;;;137    	{
;;;138    		TxBuffer[count++] = *(DataToSend+i);
00000a  5d29              LDRB     r1,[r5,r4]
00000c  480b              LDR      r0,|L2.60|
00000e  7802              LDRB     r2,[r0,#0]  ; count
000010  7800              LDRB     r0,[r0,#0]  ; count
000012  1c40              ADDS     r0,r0,#1
000014  4b09              LDR      r3,|L2.60|
000016  7018              STRB     r0,[r3,#0]
000018  4809              LDR      r0,|L2.64|
00001a  5481              STRB     r1,[r0,r2]
00001c  1c60              ADDS     r0,r4,#1              ;136
00001e  b2c4              UXTB     r4,r0                 ;136
                  |L2.32|
000020  42b4              CMP      r4,r6                 ;136
000022  dbf2              BLT      |L2.10|
;;;139    	}
;;;140    
;;;141    	if(!(USART1->CR1 & USART_CR1_TXEIE))
000024  4807              LDR      r0,|L2.68|
000026  8980              LDRH     r0,[r0,#0xc]
000028  f0000080          AND      r0,r0,#0x80
00002c  b928              CBNZ     r0,|L2.58|
;;;142    	{
;;;143    		USART_ITConfig(USART1, USART_IT_TXE, ENABLE);
00002e  2201              MOVS     r2,#1
000030  f2407127          MOV      r1,#0x727
000034  4803              LDR      r0,|L2.68|
000036  f7fffffe          BL       USART_ITConfig
                  |L2.58|
;;;144    	}
;;;145    
;;;146    }
00003a  bd70              POP      {r4-r6,pc}
;;;147    //void USART1_IRQHandler(void)                	//串口1中断服务程序
                          ENDP

                  |L2.60|
                          DCD      count
                  |L2.64|
                          DCD      TxBuffer
                  |L2.68|
                          DCD      0x40011000

                          AREA ||i._sys_exit||, CODE, READONLY, ALIGN=1

                  _sys_exit PROC
;;;22     //定义_sys_exit()以避免使用半主机模式    
;;;23     void _sys_exit(int x) 
000000  bf00              NOP      
;;;24     { 
;;;25     	x = x; 
;;;26     } 
000002  4770              BX       lr
;;;27     //重定义fputc函数 
                          ENDP


                          AREA ||i.fputc||, CODE, READONLY, ALIGN=2

                  fputc PROC
;;;27     //重定义fputc函数 
;;;28     int fputc(int ch, FILE *f)
000000  bf00              NOP      
                  |L4.2|
;;;29     { 	
;;;30     	while((USART1->SR&0X40)==0);//循环发送,直到发送完毕   
000002  4a05              LDR      r2,|L4.24|
000004  8812              LDRH     r2,[r2,#0]
000006  f0020240          AND      r2,r2,#0x40
00000a  2a00              CMP      r2,#0
00000c  d0f9              BEQ      |L4.2|
;;;31     	USART1->DR = (u8) ch;      
00000e  b2c2              UXTB     r2,r0
000010  4b01              LDR      r3,|L4.24|
000012  809a              STRH     r2,[r3,#4]
;;;32     	return ch;
;;;33     }
000014  4770              BX       lr
;;;34     #endif
                          ENDP

000016  0000              DCW      0x0000
                  |L4.24|
                          DCD      0x40011000

                          AREA ||i.uart_init||, CODE, READONLY, ALIGN=2

                  uart_init PROC
;;;47     //bound:波特率
;;;48     void uart_init(u32 bound){
000000  b510              PUSH     {r4,lr}
000002  b088              SUB      sp,sp,#0x20
000004  4604              MOV      r4,r0
;;;49        //GPIO端口设置
;;;50       GPIO_InitTypeDef GPIO_InitStructure;
;;;51     	USART_InitTypeDef USART_InitStructure;
;;;52     	NVIC_InitTypeDef NVIC_InitStructure;
;;;53     	
;;;54     	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA,ENABLE); //使能GPIOA时钟
000006  2101              MOVS     r1,#1
000008  4608              MOV      r0,r1
00000a  f7fffffe          BL       RCC_AHB1PeriphClockCmd
;;;55     	RCC_APB2PeriphClockCmd(RCC_APB2Periph_USART1,ENABLE);//使能USART1时钟
00000e  2101              MOVS     r1,#1
000010  2010              MOVS     r0,#0x10
000012  f7fffffe          BL       RCC_APB2PeriphClockCmd
;;;56      
;;;57     	//串口1对应引脚复用映射
;;;58     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource9,GPIO_AF_USART1); //GPIOA9复用为USART1
000016  2207              MOVS     r2,#7
000018  2109              MOVS     r1,#9
00001a  4822              LDR      r0,|L5.164|
00001c  f7fffffe          BL       GPIO_PinAFConfig
;;;59     	GPIO_PinAFConfig(GPIOA,GPIO_PinSource10,GPIO_AF_USART1); //GPIOA10复用为USART1
000020  2207              MOVS     r2,#7
000022  210a              MOVS     r1,#0xa
000024  481f              LDR      r0,|L5.164|
000026  f7fffffe          BL       GPIO_PinAFConfig
;;;60     	
;;;61     	//USART1端口配置
;;;62       GPIO_InitStructure.GPIO_Pin = GPIO_Pin_9 | GPIO_Pin_10; //GPIOA9与GPIOA10
00002a  f44f60c0          MOV      r0,#0x600
00002e  9006              STR      r0,[sp,#0x18]
;;;63     	GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF;//复用功能
000030  2002              MOVS     r0,#2
000032  f88d001c          STRB     r0,[sp,#0x1c]
;;;64     	GPIO_InitStructure.GPIO_Speed = GPIO_Speed_50MHz;	//速度50MHz
000036  f88d001d          STRB     r0,[sp,#0x1d]
;;;65     	GPIO_InitStructure.GPIO_OType = GPIO_OType_PP; //推挽复用输出
00003a  2000              MOVS     r0,#0
00003c  f88d001e          STRB     r0,[sp,#0x1e]
;;;66     	GPIO_InitStructure.GPIO_PuPd = GPIO_PuPd_UP; //上拉
000040  2001              MOVS     r0,#1
000042  f88d001f          STRB     r0,[sp,#0x1f]
;;;67     	GPIO_Init(GPIOA,&GPIO_InitStructure); //初始化PA9，PA10
000046  a906              ADD      r1,sp,#0x18
000048  4816              LDR      r0,|L5.164|
00004a  f7fffffe          BL       GPIO_Init
;;;68     
;;;69        //USART1 初始化设置
;;;70     	USART_InitStructure.USART_BaudRate = bound;//波特率设置
00004e  9402              STR      r4,[sp,#8]
;;;71     	USART_InitStructure.USART_WordLength = USART_WordLength_8b;//字长为8位数据格式
000050  2000              MOVS     r0,#0
000052  f8ad000c          STRH     r0,[sp,#0xc]
;;;72     	USART_InitStructure.USART_StopBits = USART_StopBits_1;//一个停止位
000056  f8ad000e          STRH     r0,[sp,#0xe]
;;;73     	USART_InitStructure.USART_Parity = USART_Parity_No;//无奇偶校验位
00005a  f8ad0010          STRH     r0,[sp,#0x10]
;;;74     	USART_InitStructure.USART_HardwareFlowControl = USART_HardwareFlowControl_None;//无硬件数据流控制
00005e  f8ad0014          STRH     r0,[sp,#0x14]
;;;75     	USART_InitStructure.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;	//收发模式
000062  200c              MOVS     r0,#0xc
000064  f8ad0012          STRH     r0,[sp,#0x12]
;;;76       USART_Init(USART1, &USART_InitStructure); //初始化串口1
000068  a902              ADD      r1,sp,#8
00006a  480f              LDR      r0,|L5.168|
00006c  f7fffffe          BL       USART_Init
;;;77     	
;;;78       USART_Cmd(USART1, ENABLE);  //使能串口1 
000070  2101              MOVS     r1,#1
000072  480d              LDR      r0,|L5.168|
000074  f7fffffe          BL       USART_Cmd
;;;79     	
;;;80     	//USART_ClearFlag(USART1, USART_FLAG_TC);
;;;81     	
;;;82     #if EN_USART1_RX	
;;;83     	USART_ITConfig(USART1, USART_IT_RXNE, ENABLE);//开启相关中断
000078  2201              MOVS     r2,#1
00007a  f2405125          MOV      r1,#0x525
00007e  480a              LDR      r0,|L5.168|
000080  f7fffffe          BL       USART_ITConfig
;;;84     
;;;85     	//Usart1 NVIC 配置
;;;86       NVIC_InitStructure.NVIC_IRQChannel = USART1_IRQn;//串口1中断通道
000084  2025              MOVS     r0,#0x25
000086  f88d0004          STRB     r0,[sp,#4]
;;;87     	NVIC_InitStructure.NVIC_IRQChannelPreemptionPriority=3;//抢占优先级3
00008a  2003              MOVS     r0,#3
00008c  f88d0005          STRB     r0,[sp,#5]
;;;88     	NVIC_InitStructure.NVIC_IRQChannelSubPriority =3;		//子优先级3
000090  f88d0006          STRB     r0,[sp,#6]
;;;89     	NVIC_InitStructure.NVIC_IRQChannelCmd = ENABLE;			//IRQ通道使能
000094  2001              MOVS     r0,#1
000096  f88d0007          STRB     r0,[sp,#7]
;;;90     	NVIC_Init(&NVIC_InitStructure);	//根据指定的参数初始化VIC寄存器、
00009a  a801              ADD      r0,sp,#4
00009c  f7fffffe          BL       NVIC_Init
;;;91     
;;;92     #endif
;;;93     	
;;;94     }
0000a0  b008              ADD      sp,sp,#0x20
0000a2  bd10              POP      {r4,pc}
;;;95     u8 TxBuffer[256];
                          ENDP

                  |L5.164|
                          DCD      0x40020000
                  |L5.168|
                          DCD      0x40011000

                          AREA ||.bss||, DATA, NOINIT, ALIGN=0

                  USART_RX_BUF
                          %        200
                  TxBuffer
                          %        256

                          AREA ||.data||, DATA, ALIGN=2

                  __stdout
                          DCD      0x00000000
                  USART_RX_STA
000004  0000              DCW      0x0000
                  TxCounter
000006  00                DCB      0x00
                  count
000007  00                DCB      0x00

;*** Start embedded assembler ***

#line 1 "..\\..\\User\\usart.c"
	AREA ||.rev16_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REV16|
#line 129 "..\\..\\Libraries\\CMSIS\\Include\\core_cmInstr.h"
|__asm___7_usart_c_9275e5e5____REV16| PROC
#line 130

 rev16 r0, r0
 bx lr
	ENDP
	AREA ||.revsh_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____REVSH|
#line 144
|__asm___7_usart_c_9275e5e5____REVSH| PROC
#line 145

 revsh r0, r0
 bx lr
	ENDP
	AREA ||.rrx_text||, CODE
	THUMB
	EXPORT |__asm___7_usart_c_9275e5e5____RRX|
#line 300
|__asm___7_usart_c_9275e5e5____RRX| PROC
#line 301

 rrx r0, r0
 bx lr
	ENDP

;*** End   embedded assembler ***
